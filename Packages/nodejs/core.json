{"Buffer": ["isEncoding(encoding)", "isBuffer(obj)", "byteLength(string[, encoding])", "concat(list[, totalLength])", "compare(buf1, buf2)"], "Certificate": ["verifySpkac(spkac)", "exportChallenge(spkac)", "exportPublicKey(spkac)"], "ECDH": ["generateKeys([encoding[, format]])", "computeSecret(other_public_key[, input_encoding][, output_encoding])", "getPublicKey([encoding[, format]])", "getPrivateKey([encoding])", "setPublicKey(public_key[, encoding])", "setPrivateKey(private_key[, encoding])"], "EventEmitter": ["defaultMaxListeners", "listenerCount(emitter, event)"], "Typekit": ["load()"], "agent": ["maxSockets", "maxFreeSockets", "sockets", "freeSockets", "requests", "destroy()", "getName(options)"], "assert": ["fail(actual, expected, message, operator)", "ok(value[, message])", "equal(actual, expected[, message])", "notEqual(actual, expected[, message])", "deepEqual(actual, expected[, message])", "notDeepEqual(actual, expected[, message])", "strictEqual(actual, expected[, message])", "notStrictEqual(actual, expected[, message])", "throws(block[, error][, message])", "doesNotThrow(block[, message])", "ifError(value)"], "buf": ["length", "write(string[, offset][, length][, encoding])", "writeUIntLE(value, offset, byteLength[, noAssert])", "writeUIntBE(value, offset, byteLength[, noAssert])", "writeIntLE(value, offset, byteLength[, noAssert])", "writeIntBE(value, offset, byteLength[, noAssert])", "readUIntLE(offset, byteLength[, noAssert])", "readUIntBE(offset, byteLength[, noAssert])", "readIntLE(offset, byteLength[, noAssert])", "readIntBE(offset, byteLength[, noAssert])", "toString([encoding][, start][, end])", "toJSON()", "equals(otherBuffer)", "compare(otherBuffer)", "copy(targetBuffer[, targetStart][, sourceStart][, sourceEnd])", "slice([start][, end])", "readUInt8(offset[, noAssert])", "readUInt16LE(offset[, noAssert])", "readUInt16BE(offset[, noAssert])", "readUInt32LE(offset[, noAssert])", "readUInt32BE(offset[, noAssert])", "readInt8(offset[, noAssert])", "readInt16LE(offset[, noAssert])", "readInt16BE(offset[, noAssert])", "readInt32LE(offset[, noAssert])", "readInt32BE(offset[, noAssert])", "readFloatLE(offset[, noAssert])", "readFloatBE(offset[, noAssert])", "readDoubleLE(offset[, noAssert])", "readDoubleBE(offset[, noAssert])", "writeUInt8(value, offset[, noAssert])", "writeUInt16LE(value, offset[, noAssert])", "writeUInt16BE(value, offset[, noAssert])", "writeUInt32LE(value, offset[, noAssert])", "writeUInt32BE(value, offset[, noAssert])", "writeInt8(value, offset[, noAssert])", "writeInt16LE(value, offset[, noAssert])", "writeInt16BE(value, offset[, noAssert])", "writeInt32LE(value, offset[, noAssert])", "writeInt32BE(value, offset[, noAssert])", "writeFloatLE(value, offset[, noAssert])", "writeFloatBE(value, offset[, noAssert])", "writeDoubleLE(value, offset[, noAssert])", "writeDoubleBE(value, offset[, noAssert])", "fill(value[, offset][, end])"], "buffer": ["INSPECT_MAX_BYTES"], "child": ["stdin", "stdout", "stderr", "stdio", "pid", "connected", "kill([signal])", "send(message[, sendHandle])", "disconnect()"], "child_process": ["spawn(command[, args][, options])", "exec(command[, options], callback)", "execFile(file[, args][, options][, callback])", "fork(modulePath[, args][, options])", "spawnSync(command[, args][, options])", "execFileSync(command[, args][, options])", "execSync(command[, options])"], "cipher": ["update(data[, input_encoding][, output_encoding])", "final([output_encoding])", "setAutoPadding(auto_padding=true)", "getAuthTag()", "setAAD(buffer)"], "cluster": ["schedulingPolicy", "settings", "isMaster", "isWorker", "worker", "workers", "setupMaster([settings])", "fork([env])", "disconnect([callback])"], "console": ["log([data][, ...])", "info([data][, ...])", "error([data][, ...])", "warn([data][, ...])", "dir(obj[, options])", "time(label)", "timeEnd(label)", "trace(message[, ...])", "assert(value[, message][, ...])"], "crypto": ["DEFAULT_ENCODING", "setEngine(engine[, flags])", "getCiphers()", "getHashes()", "createCredentials(details)", "createHash(algorithm)", "createHmac(algorithm, key)", "createCipher(algorithm, password)", "createCipheriv(algorithm, key, iv)", "createDecipher(algorithm, password)", "createDecipheriv(algorithm, key, iv)", "createSign(algorithm)", "createVerify(algorithm)", "createDiffieHellman(prime_length[, generator])", "createDiffieHellman(prime[, prime_encoding][, generator][, generator_encoding])", "getDiffieHellman(group_name)", "createECDH(curve_name)", "pbkdf2(password, salt, iterations, keylen[, digest], callback)", "pbkdf2Sync(password, salt, iterations, keylen[, digest])", "randomBytes(size[, callback])", "pseudoRandomBytes(size[, callback])", "publicEncrypt(public_key, buffer)", "privateDecrypt(private_key, buffer)"], "cryptoStream": ["bytesWritten"], "decipher": ["update(data[, input_encoding][, output_encoding])", "final([output_encoding])", "setAutoPadding(auto_padding=true)", "setAuthTag(buffer)", "setAAD(buffer)"], "decoder": ["write(buffer)", "end()"], "dgram": ["Socket", "createSocket(type[, callback])", "createSocket(options[, callback])"], "diffieHellman": ["verifyError", "generateKeys([encoding])", "computeSecret(other_public_key[, input_encoding][, output_encoding])", "getPrime([encoding])", "getGenerator([encoding])", "getPublicKey([encoding])", "getPrivateKey([encoding])", "setPublicKey(public_key[, encoding])", "setPrivateKey(private_key[, encoding])"], "dns": ["lookup", "reverse", "lookup(hostname[, options], callback)", "lookupService(address, port, callback)", "resolve(hostname[, rrtype], callback)", "resolve4(hostname, callback)", "resolve6(hostname, callback)", "resolveMx(hostname, callback)", "resolveTxt(hostname, callback)", "resolveSrv(hostname, callback)", "resolveSoa(hostname, callback)", "resolveNs(hostname, callback)", "resolveCname(hostname, callback)", "reverse(ip, callback)", "getServers()", "setServers(servers)"], "domain": ["members", "create()", "run(fn)", "add(emitter)", "remove(emitter)", "bind(callback)", "intercept(callback)", "enter()", "exit()", "dispose()"], "emitter": ["addListener(event, listener)", "on(event, listener)", "once(event, listener)", "removeListener(event, listener)", "removeAllListeners([event])", "setMaxListeners(n)", "listeners(event)", "emit(event[, arg1][, arg2][, ...])"], "events": ["EventEmitter"], "file": ["bytesWritten"], "fs": ["Stats", "ReadStream", "WriteStream", "FSWatcher", "rename(oldPath, newPath, callback)", "renameSync(oldPath, newPath)", "ftruncate(fd, len, callback)", "ftruncateSync(fd, len)", "truncate(path, len, callback)", "truncateSync(path, len)", "chown(path, uid, gid, callback)", "chownSync(path, uid, gid)", "fchown(fd, uid, gid, callback)", "fchownSync(fd, uid, gid)", "lchown(path, uid, gid, callback)", "lchownSync(path, uid, gid)", "chmod(path, mode, callback)", "chmodSync(path, mode)", "fchmod(fd, mode, callback)", "fchmodSync(fd, mode)", "lchmod(path, mode, callback)", "lchmodSync(path, mode)", "stat(path, callback)", "lstat(path, callback)", "fstat(fd, callback)", "statSync(path)", "lstatSync(path)", "fstatSync(fd)", "link(srcpath, dstpath, callback)", "linkSync(srcpath, dstpath)", "symlink(srcpath, dstpath[, type], callback)", "symlinkSync(srcpath, dstpath[, type])", "readlink(path, callback)", "readlinkSync(path)", "realpath(path[, cache], callback)", "realpathSync(path[, cache])", "unlink(path, callback)", "unlinkSync(path)", "rmdir(path, callback)", "rmdirSync(path)", "mkdir(path[, mode], callback)", "mkdirSync(path[, mode])", "readdir(path, callback)", "readdirSync(path)", "close(fd, callback)", "closeSync(fd)", "open(path, flags[, mode], callback)", "openSync(path, flags[, mode])", "utimes(path, atime, mtime, callback)", "utimesSync(path, atime, mtime)", "futimes(fd, atime, mtime, callback)", "futimesSync(fd, atime, mtime)", "fsync(fd, callback)", "fsyncSync(fd)", "write(fd, buffer, offset, length[, position], callback)", "write(fd, data[, position[, encoding]], callback)", "writeSync(fd, buffer, offset, length[, position])", "writeSync(fd, data[, position[, encoding]])", "read(fd, buffer, offset, length, position, callback)", "readSync(fd, buffer, offset, length, position)", "readFile(filename[, options], callback)", "readFileSync(filename[, options])", "writeFile(filename, data[, options], callback)", "writeFileSync(filename, data[, options])", "appendFile(filename, data[, options], callback)", "appendFileSync(filename, data[, options])", "watchFile(filename[, options], listener)", "unwatchFile(filename[, listener])", "watch(filename[, options][, listener])", "exists(path, callback)", "existsSync(path)", "access(path[, mode], callback)", "accessSync(path[, mode])", "createReadStream(path[, options])", "createWriteStream(path[, options])"], "hash": ["update(data[, input_encoding])", "digest([encoding])"], "hmac": ["update(data)", "digest([encoding])"], "http": ["METHODS", "STATUS_CODES", "Server", "ServerResponse", "Agent", "globalAgent", "ClientRequest", "IncomingMessage", "createServer([requestListener])", "createClient([port][, host])", "request(options[, callback])", "get(options[, callback])"], "https": ["Server", "Agent", "globalAgent", "createServer(options[, requestListener])", "request(options, callback)", "get(options, callback)"], "message": ["httpVersion", "headers", "rawHeaders", "trailers", "rawTrailers", "method", "url", "statusCode", "statusMessage", "socket", "setTimeout(msecs, callback)"], "module": ["exports", "id", "filename", "loaded", "parent", "children", "require(id)"], "net": ["Server", "Socket", "createServer([options][, connectionListener])", "connect(options[, connectionListener])", "createConnection(options[, connectionListener])", "connect(port[, host][, connectListener])", "createConnection(port[, host][, connectListener])", "connect(path[, connectListener])", "createConnection(path[, connectListener])", "Socket([options])", "isIP(input)", "isIPv4(input)", "isIPv6(input)"], "options": ["stdio", "detached", "customFds"], "os": ["EOL", "tmpdir()", "endianness()", "hostname()", "type()", "platform()", "arch()", "release()", "uptime()", "loadavg()", "totalmem()", "freemem()", "cpus()", "networkInterfaces()"], "path": ["sep", "delimiter", "posix", "win32", "normalize(p)", "join([path1][, path2][, ...])", "resolve([from ...], to)", "isAbsolute(path)", "relative(from, to)", "dirname(p)", "basename(p[, ext])", "extname(p)", "parse(pathString)", "format(pathObject)"], "process": ["stdout", "stderr", "stdin", "argv", "execPath", "execArgv", "env", "exitCode", "version", "versions", "config", "pid", "title", "arch", "platform", "mainModule", "abort()", "chdir(directory)", "cwd()", "exit([code])", "getgid()", "setgid(id)", "getuid()", "setuid(id)", "getgroups()", "setgroups(groups)", "initgroups(user, extra_group)", "kill(pid[, signal])", "memoryUsage()", "nextTick(callback)", "umask([mask])", "uptime()", "hrtime()"], "punycode": ["ucs2", "version", "decode(string)", "encode(string)", "toUnicode(domain)", "toASCII(domain)"], "querystring": ["escape", "unescape", "stringify(obj[, sep][, eq][, options])", "parse(str[, sep][, eq][, options])"], "readable": ["read([size])", "setEncoding(encoding)", "resume()", "pause()", "isPaused()", "pipe(destination[, options])", "unpipe([destination])", "unshift(chunk)", "wrap(stream)", "_read(size)", "push(chunk[, encoding])"], "readline": ["createInterface(options)", "cursorTo(stream, x, y)", "moveCursor(stream, dx, dy)", "clearLine(stream, dir)", "clearScreenDown(stream)"], "repl": ["start(options)"], "request": ["flushHeaders()", "write(chunk[, encoding][, callback])", "end([data][, encoding][, callback])", "abort()", "setTimeout(timeout[, callback])", "setNoDelay([noDelay])", "setSocketKeepAlive([enable][, initialDelay])"], "require": ["cache", "extensions", "resolve()"], "response": ["statusCode", "statusMessage", "headersSent", "sendDate", "writeContinue()", "writeHead(statusCode[, statusMessage][, headers])", "setTimeout(msecs, callback)", "setHeader(name, value)", "getHeader(name)", "removeHeader(name)", "write(chunk[, encoding][, callback])", "addTrailers(headers)", "end([data][, encoding][, callback])"], "rl": ["setPrompt(prompt)", "prompt([preserveCursor])", "question(query, callback)", "pause()", "resume()", "close()", "write(data[, key])"], "rs": ["isRaw", "setRawMode(mode)"], "script": ["runInThisContext([options])", "runInContext(contextifiedSandbox[, options])", "runInNewContext([sandbox][, options])"], "server": ["maxConnections", "connections", "maxConnections", "connections", "maxHeadersCount", "timeout", "timeout", "listen(port[, host][, callback])", "close()", "address()", "addContext(hostname, context)", "listen(port[, host][, backlog][, callback])", "listen(path[, callback])", "listen(handle[, callback])", "listen(options[, callback])", "close([callback])", "address()", "unref()", "ref()", "getConnections(callback)", "listen(port[, hostname][, backlog][, callback])", "listen(path[, callback])", "listen(handle[, callback])", "close([callback])", "setTimeout(msecs, callback)", "setTimeout(msecs, callback)", "listen(port[, host][, backlog][, callback])", "listen(path[, callback])", "listen(handle[, callback])", "close([callback])"], "sign": ["update(data)", "sign(private_key[, output_format])"], "smalloc": ["kMaxLength", "Types", "alloc(length[, receiver][, type])", "copyOnto(source, sourceStart, dest, destStart, copyLength)", "dispose(obj)", "hasExternalData(obj)"], "socket": ["bufferSize", "remoteAddress", "remoteFamily", "remotePort", "localAddress", "localPort", "bytesRead", "bytesWritten", "connect(port[, host][, connectListener])", "connect(path[, connectListener])", "setEncoding([encoding])", "write(data[, encoding][, callback])", "end([data][, encoding])", "destroy()", "pause()", "resume()", "setTimeout(timeout[, callback])", "setNoDelay([noDelay])", "setKeepAlive([enable][, initialDelay])", "address()", "unref()", "ref()", "send(buf, offset, length, port, address[, callback])", "bind(port[, address][, callback])", "bind(options[, callback])", "close()", "address()", "setBroadcast(flag)", "setTTL(ttl)", "setMulticastTTL(ttl)", "setMulticastLoopback(flag)", "addMembership(multicastAddress[, multicastInterface])", "dropMembership(multicastAddress[, multicastInterface])", "unref()", "ref()"], "stream": ["Readable", "Writable", "Duplex", "Transform", "Readable", "Writable", "Duplex", "Transform", "PassThrough", "Readable([options])", "Writable([options])", "Duplex(options)", "Transform([options])", "read(0)", "push()"], "tls": ["TLSSocket", "Server", "TLSSocket", "getCiphers()", "createServer(options[, secureConnectionListener])", "connect(options[, callback])", "connect(port[, host][, options][, callback])", "TLSSocket(socket, options)", "createSecureContext(details)", "createSecurePair([context][, isServer][, requestCert][, rejectUnauthorized])"], "tlsSocket": ["encrypted", "authorized", "authorizationError", "remoteAddress", "remoteFamily", "remotePort", "localAddress", "localPort", "getPeerCertificate([ detailed ])", "getCipher()", "renegotiate(options, callback)", "setMaxSendFragment(size)", "getSession()", "getTLSTicket()", "address()"], "transform": ["_transform(chunk, encoding, callback)", "_flush(callback)"], "tty": ["isatty(fd)", "setRawMode(mode)"], "ucs2": ["decode(string)", "encode(codePoints)"], "url": ["parse(urlStr[, parseQueryString][, slashesDenoteHost])", "format(urlObj)", "resolve(from, to)"], "util": ["inspect", "debuglog(section)", "format(format[, ...])", "log(string)", "inspect(object[, options])", "isArray(object)", "isRegExp(object)", "isDate(object)", "isError(object)", "inherits(constructor, superConstructor)", "deprecate(function, string)", "debug(string)", "error([...])", "puts([...])", "print([...])", "pump(readableStream, writableStream[, callback])"], "verifier": ["update(data)", "verify(object, signature[, signature_format])"], "vm": ["runInThisContext(code[, options])", "createContext([sandbox])", "isContext(sandbox)", "runInContext(code, contextifiedSandbox[, options])", "runInNewContext(code[, sandbox][, options])", "runInDebugContext(code)", "Script(code, options)"], "watcher": ["close()"], "worker": ["id", "process", "suicide", "send(message[, sendHandle])", "kill([signal=SIGTERM])", "disconnect()", "isDead()", "isConnected()"], "writable": ["write(chunk[, encoding][, callback])", "cork()", "uncork()", "setDefaultEncoding(encoding)", "end([chunk][, encoding][, callback])", "_write(chunk, encoding, callback)", "_writev(chunks, callback)"], "ws": ["columns", "rows"], "zlib": ["Zlib", "Gzip", "Gunzip", "Deflate", "Inflate", "DeflateRaw", "InflateRaw", "Unzip", "createGzip([options])", "createGunzip([options])", "createDeflate([options])", "createInflate([options])", "createDeflateRaw([options])", "createInflateRaw([options])", "createUnzip([options])", "flush([kind], callback)", "params(level, strategy, callback)", "reset()", "deflate(buf[, options], callback)", "deflateSync(buf[, options])", "deflateRaw(buf[, options], callback)", "deflateRawSync(buf[, options])", "gzip(buf[, options], callback)", "gzipSync(buf[, options])", "gunzip(buf[, options], callback)", "gunzipSync(buf[, options])", "inflate(buf[, options], callback)", "inflateSync(buf[, options])", "inflateRaw(buf[, options], callback)", "inflateRawSync(buf[, options])", "unzip(buf[, options], callback)", "unzipSync(buf[, options])"]}