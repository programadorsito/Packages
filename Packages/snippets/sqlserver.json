{"alter_table_add_check_constraint": "ALTER TABLE @name WITH CHECK ADD CONSTRAINT @name CHECK(@attr > 0)", "alter_table_add_foreign_key": "ALTER TABLE @tableName ADD CONSTRAINT FOREIGN KEY (@COLUMN) REFERENCES @tableName(@COLUMN)", "alter_table_add_primary_key": "ALTER TABLE @name ADD CONSTRAINT @name PRIMARY KEY (@column)", "alter_table_drop_constraint": "ALTER TABLE @tableName DROP CONSTRAINT @name ", "and_operator": "AND", "and_operator}": "AND", "avg_function": "AVG(@ColumnName)", "begin_try": "BEGIN TRY\n    @\nEND TRY", "between": "BETWEEN @izq AND @der ", "between_operator": "BETWEEN @izq AND @der ", "bigint_type": "BIGINT", "binary_type": "BINARY", "bit_type": "BIT", "case": "case @optionalColumn \n    when @value then @result \n    when @value then result\n    else @default\n    end", "cast": "CAST(@columnOrvalue AS @type)", "cast_f": "CAST(@columnOrvalue AS @type)", "cast_function": "CAST(@columnOrvalue AS @type)", "change_name_database": "ALTER DATABASE @1oldName SET SINGLE_USER WITH ROLLBACK IMMEDIATE\nGO\nALTER DATABASE @1oldName MODIFY NAME = @2newName\nGO\nALTER DATABASE @2newName SET MULTI_USER\nGO", "char": "CHAR(@)", "check_attr": "CHECK(@attr > 0)", "clean_table": "DBCC CLEANTABLE (@database, '@1table', 0);\nALTER TABLE @1table REBUILD;", "coalesce_function": "COALESCE(@columnOrValue, @defaultValue)", "constraint": "CONSTRAINT @name PRIMARY KEY(@column)", "constraint_primary_key": "CONSTRAINT name PRIMARY KEY(column)", "convert_function": "CONVERT(@type, @columnOrvalue)", "count_function": "COUNT(@ColumnName)", "create_clustered_index": "CREATE CLUSTERED INDEX @name ON @tableName(@column)", "create_database_specific": "CREATE DATABASE @1Database   ON PRIMARY\n( NAME = N'@1Database ', FILENAME = N'd:\\dbs\\@1Database .mdf',\nSIZE = 10MB , MAXSIZE = UNLIMITED, FILEGROWTH = 10% ),\nFILEGROUP FG1 DEFAULT ( NAME = N'@1Database  SQL2008SBSFG1_Dat1',\nFILENAME = N'd:\\dbs\\@1Database _1.ndf',\nSIZE = 10MB , MAXSIZE = UNLIMITED, FILEGROWTH = 2MB),\n(NAME = N'@1Database FG1_Dat2', FILENAME = N'd:\\dbs\\@1Database _2.ndf',\nSIZE = 10MB , MAXSIZE = UNLIMITED, FILEGROWTH = 2MB),\n(NAME = N'@1Database FG1_Dat3', FILENAME = N'd:\\dbs\\@1Database _3.ndf',\nSIZE = 10MB , MAXSIZE = UNLIMITED, FILEGROWTH = 2MB)\nLOG ON\n( NAME = N'@1Database _Log', FILENAME = N'd:\\dbs\\@1Database .ldf',\nSIZE = 10MB , MAXSIZE = UNLIMITED , FILEGROWTH = 10MB )\nGO", "create_database_specific_file": "CREATE DATABASE Databasename ON PRIMARY ( NAME = N'Databasename', FILENAME = N'd:\\dbs\\Databasename.mdf',SIZE = 3MB , MAXSIZE = UNLIMITED, FILEGROWTH = 10% )\ngo", "create_nonclustered_index": "CREATE NONCLUSTERED INDEX @name ON @tableName(@column1, @optionalColumn)", "create_table": "create table @tabla(@);", "cross_join": "CROSS JOIN @1TableName ", "datalength": "DATALENGTH(@~varname) ", "datalength_function": "DATALENGTH(@varname) ", "date": "DATE", "datetime": "DATETIME", "datetime2": "DATETIME2", "datetimeoffset": "DATETIMEOFFSET", "decimal": "DECIMAL(@presition, @scale)", "decimal_type": "DECIMAL(@presition, @scale)", "declare": "DECLARE @~varname ~type ", "default_attr": "DEFAULT @value ", "describe_table": "exec sp_columns @tableName;", "different_operator": "<>", "distinct": "DISTINCT", "distinct_select_operator": "DISTINCT", "ej_case": "SELECT ShipMethodID, CASE ShipMethodID\n    WHEN 1 THEN 'A.Datum'\n    WHEN 2 THEN 'Contoso'\n    WHEN 3 THEN 'Consolidated Messenger'\n    ELSE 'Unknown'\n    END\nFROM Purchasing.PurchaseOrderHeader", "ej_group_by": "SELECT JobTitle, count(*)\nFROM HumanResources.Employee\nGROUP BY JobTitle", "error_global_var": "@@ERROR~ ", "exists_condition": "EXISTS(@selectQuery)", "filestream_type": "VARBINARY(MAX) FILESTREAM NULL", "float": "FLOAT(@)", "full_outer_join": "FULL OUTER JOIN @1TableName ON @1TableName.@Column = @OtherTable.@Column ", "group_by": "GROUP BY @Column ", "having}": "HAVING @condition ", "identity": "IDENTITY(@initial, @increment)", "identity_global_var": "@@IDENTITY~ ", "if": "IF @varName = @value\n    @statement1\nelse\n    @statement2", "image_type": "IMAGE", "in_operator": "IN (@value, @value)", "inner_join": "INNER JOIN @1TableName ON @1TableName.@Column = @OtherTable.@Column ", "insersect": "INTERSECT", "insert": "INSERT INTO @tablename VALUES (@);", "insert_into_from_procedimiento": "INSERT INTO @tableName EXEC @procedimiento ", "int_type": "INT", "is_not_null_condition": "IS NOT NULL", "is_null_condition": "IS NULL", "isnull_function": "ISNULL(@columnOrValue, @defaultValue)", "join": "JOIN @1TableName ON @1TableName.@Column = @OtherTable.@Column ", "left_outer_join": "LEFT OUTER JOIN @1TableName ON @1TableName.@Column = @OtherTable.@Column ", "max_function": "MAX(@columnname)", "merge": "MERGE @tableTarget USING @tableSource\nON @condition\nWHEN MATCHED THEN UPDATE SET @statement\nWHEN NO MATCHED BY TARGET THEN INSERT (@columns) VALUES (@columns)", "min_function": "MIN(@columnname)", "money": "MONEY", "nchar": "NCHAR(@)", "not_null_attr": "NOT NUll", "ntext": "NTEXT", "numeric": "NUMERIC(@persition, @scale)", "nvarchar": "NVARCHAR(@)", "order_by": "ORDER BY @columnName DESC", "primary_key_attr": "PRIMARY KEY", "real": "REAL", "references": "REFERENCES @table(@column)", "restore_database": "RESTORE DATABASE @database FROM DISK = 'D:/database.bak' WITH REPLACE", "right_outer_join": "RIGHT OUTER JOIN @1TableName ON @1TableName.@Column = @OtherTable.@Column ", "row_count_global_var": "@@ROWCOUNT", "row_number": "ROW_NUMBER() OVER(ORDER BY @column DESC) AS ROW_NUMBER", "rowcount_global_var": "@@ROWCOUNT~ ", "select_into": "select @columns \ninto @tableTarget\nfrom @tableSource \nwhere @condition ", "select_into_var": "select @varName = column from tableName where condition ", "set": "SET @~varname = ~value ", "smalldatetime": "SMALLDATETIME", "smallint": "SMALLINT", "smallmoney": "SMALLMONEY", "smallmoney_type": "SMALLMONEY", "sparse_attr": "SPARSE NULL", "sum_function": "SUM(@columnname)", "time": "TIME", "tinyint": "TINYINT", "tinyint_type": "TINYINT", "top": "TOP @number ", "top_select_operator": "TOP @number ", "trancount_global_var": "@@TRANCOUNT~ ", "truncate_table": "TRUNCATE TABLE @tableName ", "try_catch": "BEGIN TRY\n    @\nEND TRY\nBEGIN CATCH\n    @\nEND CATCH", "union": "UNION", "union_all": "UNION ALL", "unique_attr": "UNIQUE", "use": "use @database;", "varbinary_type": "VARBINARY(@n)", "varchar": "VARCHAR(@)", "version_global_var": "@@VERSION~ ", "where": "WHERE", "where_select_operator": "WHERE", "xml_type": "XML"}