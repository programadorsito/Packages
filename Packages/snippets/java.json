{"FORI": "for(int i=0;i<@n;i++){\n    @\n}", "Toast": "Toast.makeText(this, \"\", Toast.LENGTH_LONG).show();", "actiondial": "Intent intent=new Intent(Intent.ACTION_DIAL, Uri.parse(\"tel:555-2368\"));", "activity": "package com.android.myfisrtapp;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\npublic class ~ActivityName extends Activity {\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.~layout);\n    }\n}", "advertencia": "mostrarAdvertencia(\"@\");", "agregar_contacto": "Uri numero=Uri.parse(\"tel:546548\");\nIntent call=new Intent(Intent.ACTION_DIAL, numero);\nstartActivity(call);", "android_abrir_enlace": "Uri webpage = Uri.parse(\"http://www.google.com\");\nIntent webIntent = new Intent(Intent.ACTION_VIEW, webpage);\nstartActivity(webIntent);", "android_add_calendar_event": "Intent calendarIntent = new Intent(Intent.ACTION_INSERT, CalendarContract.Events.CONTENT_URI);\nCalendar beginTime = Calendar.getInstance();\nbeginTime.set(2015,4,25,13,0);\nCalendar endTime = Calendar.getInstance();\nendTime.set(2015,4,25,14, 0);\ncalendarIntent.putExtra(CalendarContract.EXTRA_EVENT_BEGIN_TIME, beginTime.getTimeInMillis());\ncalendarIntent.putExtra(CalendarContract.EXTRA_EVENT_END_TIME, endTime.getTimeInMillis());\ncalendarIntent.putExtra(CalendarContract.Events.TITLE, \"Ninja class\");\ncalendarIntent.putExtra(CalendarContract.Events.EVENT_LOCATION, \"Secret dojo\");\nstartActivity(calendarIntent);", "android_add_fragment": "getFragmentManager().beginTransaction().add(R.id.@_container_fragment, new @Fragment()).commit();", "android_agregar_contacto": "Uri numero=Uri.parse(\"tel:546548\");\n        Intent call=new Intent(Intent.ACTION_DIAL, numero);\n        startActivity(call);", "android_fragment": "package co.edu.udea.cmovil.gr8.schedulearning.note;\n\nimport android.app.Fragment;\nimport android.os.Bundle;\nimport android.support.annotation.Nullable;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport co.edu.udea.cmovil.gr8.schedulearning.R;\n\npublic class NoteListFragment extends Fragment {\n    @Nullable\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.note_list, container, false);\n        ~\n    }\n}\n", "android_getintent": "Intent intent=getIntent();", "android_getsharedpreferences": "getSharedPreferences(\"@preferencesName\", Context.MODE_PRIVATE).getString(\"@key\", \"\")", "android_getstringextra": "intent.getStringExtra(@key)", "android_intent_valid": "PackageManager packageManager = getPackageManager();\nList activities = packageManager.queryIntentActivities(calendarIntent,PackageManager.MATCH_DEFAULT_ONLY);\nboolean isIntentSafe = activities.size() > 0;\n\nif(isIntentSafe){\n    startActivity(calendarIntent);\n}", "android_list_View": "listView1=(ListView)findViewById(R.id.listView1);\nlistAdapter=new ArrayAdapter<String>(this, R.layout.item, Arrays.asList(new String[]{\"Daniel\", \"Alejandro\", \"Molina\"}));\nlistView1.setAdapter(listAdapter);", "android_listener_method": "public void @MethodName(View view){\n    @\n}", "android_log_debug": "Log.d(CLASS, \"@\");", "android_log_error": "Log.e(CLASS, \"@\");", "android_log_info": "Log.i(CLASS, \"@\");", "android_menu": "@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    getMenuInflater().inflate(R.menu.principal, menu);\n    return true;\n}\n\n@Override\npublic boolean onOptionsItemSelected(MenuItem item) {\n    int id = item.getItemId();\n\n    switch(id){\n        case R.id.action_settings:\n        ~\n        return true;\n\n        default:\n            return super.onOptionsItemSelected(item);\n    }\n}", "android_newintent": "Intent intent=new Intent(this, @ActivityName.class);", "android_oncreateoptionsmenu": "@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    getMenuInflater().inflate(R.menu.principal, menu);\n    return true;~\n}", "android_onoptionsitemselected": "@Override\npublic boolean onOptionsItemSelected(MenuItem item) {\n    int id = item.getItemId();\n\n    switch(id){\n        case R.id.action_settings:\n            return true;\n\n        default:\n            return super.onOptionsItemSelected(item);\n    }\n    ~\n}", "android_ontouch_method": "@Override\npublic boolean onTouch(View v, MotionEvent event){\n    ~    \n}", "android_open_assets": "getAssets().open(\"@\")", "android_putextra": "intent.putExtra(@key , @value);", "android_read_assets_file": "InputStreamReader in=new InputStreamReader(getAssets().open(\"filename\"));\nBufferedReader bf=new BufferedReader(in);\nString uno=bf.readLine();        ", "android_replace_fragment": "getFragmentManager().beginTransaction().replace(R.id.@_container_fragment, new @Fragment()).commit();", "android_send_email": "Intent emailIntent = new Intent(Intent.ACTION_SEND);\n// The intent does not have a URI, so declare the \"text/plain\" MIME type\nemailIntent.setType(HTTP.PLAIN_TEXT_TYPE);\nemailIntent.putExtra(Intent.EXTRA_EMAIL, new String[] {\"programanime@gmail.com\"}); // recipients\nemailIntent.putExtra(Intent.EXTRA_SUBJECT, \"test\");\nemailIntent.putExtra(Intent.EXTRA_TEXT, \"teste\");\n//emailIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse(\"content://path/to/email/attachment\"));\nstartActivity(emailIntent);", "android_set_fragment": "setContentView(R.layout.matter);\nif (savedInstanceState == null) {\n    getFragmentManager().beginTransaction().add(R.id.matter_container_fragment, new MatterListFragment()).commit();\n}", "android_shared_text_plain": "Intent sendIntent = new Intent();\nsendIntent.setAction(Intent.ACTION_SEND);\nsendIntent.putExtra(Intent.EXTRA_TEXT, \"This is my text to send.\");\nsendIntent.setType(\"text/plain\");\nstartActivity(sendIntent);", "android_show": "Toast.makeText(this, \"@\", Toast.LENGTH_LONG);", "android_show_map": "Uri location = Uri.parse(\"geo:0,0?q=1600+Amphitheatre+Parkway,+Mountain+View,+California\");\nIntent mapIntent = new Intent(Intent.ACTION_VIEW, location);\nstartActivity(mapIntent);", "android_spinner_adapter": "spi=(Spinner)this.findViewById(R.id.spi);\nArrayAdapter adapter=ArrayAdapter.createFromResource(this,R.array.string_array, android.R.layout.simple_spinner_item);\nadapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\nspi.setAdapter(adapter);", "android_ver_mapa": "Uri location = Uri.parse(\"geo:0,0?q=1600+Amphitheatre+Parkway,+Mountain+View,+California\");\nIntent mapIntent = new Intent(Intent.ACTION_VIEW, location);", "android_view_page": "Uri webpage = Uri.parse(\"http://www.google.com\");\nIntent webIntent = new Intent(Intent.ACTION_VIEW, webpage);", "app": "public class app\n{\n    public static void main(String[] args) \n    {\n        @\n    }\n}", "array_adapter": "ArrayAdapter<String> a = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1 , new String[]{\"daniel\", \"molina\"});\nListView lista= (ListView) findViewById(R.id.listView);\nlista.setAdapter(a);", "atributo": "this.@1=@1;", "basic": "@Basic(optional=false)~", "cadena_conexion_mysql": "jdbc:mysql://localhost:3306/@database?user=@root&password=root", "cara": "^_^", "column": "@Column(name=\"~\")", "comment": "/**\n* @\n*/", "convertStreamToString": "private static String convertStreamToString(InputStream is) {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n    StringBuilder sb = new StringBuilder();\n\n    String line = null;\n    try {\n        while ((line = reader.readLine()) != null) {\n            sb.append(line + \"\\n\");\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            is.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return sb.toString();\n}", "create_ok": "mostrarInfo(\"create_ok\");", "createmenu": "@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    getMenuInflater().inflate(R.menu.menu_main, menu);\n    return true;\n}\n\n@Override\npublic boolean onOptionsItemSelected(MenuItem item) {\n    int id = item.getItemId();\n\n    if (id == R.id.action_settings) {\n        return true;\n    }\n    ~\n\n    return super.onOptionsItemSelected(item);\n}", "delete_ok": "mostrarInfo(\"delete_ok\");", "ej_activity": "package ~;\n\nimport android.app.ActionBar;\nimport android.content.res.AssetManager;\nimport android.os.Bundle;\nimport android.support.v7.app.ActionBarActivity;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Button;\nimport android.widget.LinearLayout;\nimport android.widget.RelativeLayout;\nimport android.widget.Toast;\n\n\npublic class MainActivity extends ActionBarActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        this.setContentView(R.layout.~);\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n    \n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        int id = item.getItemId();\n    \n        if (id == R.id.action_settings) {\n            return true;\n        }\n    \n        return super.onOptionsItemSelected(item);\n    }\n}\n", "ej_android_activity_listview": "package co.edu.udea.testdani;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.widget.ListView;\nimport android.widget.SimpleAdapter;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\n\n\npublic class MainActivity extends Activity {\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        ListView lv = (ListView) findViewById(R.id.listview);\n\n        // create the grid item mapping\n        String[] from = new String[]{\"rowid\", \"col_1\", \"col_2\", \"col_3\"};\n        int[] to = new int[]{R.id.item1, R.id.item2, R.id.item3, R.id.item4};\n\n        // prepare the list of all records\n        List<HashMap<String, String>> fillMaps = new ArrayList<HashMap<String, String>>();\n        for (int i = 0; i < 10; i++) {\n            HashMap<String, String> map = new HashMap<String, String>();\n            map.put(\"rowid\", \"\" + i);\n            map.put(\"col_1\", \"col_1_item_\" + i);\n            map.put(\"col_2\", \"col_2_item_\" + i);\n            map.put(\"col_3\", \"col_3_item_\" + i);\n            fillMaps.add(map);\n        }\n\n        // fill in the grid_item layout\n        SimpleAdapter adapter = new SimpleAdapter(this, fillMaps, R.layout.grid_item, from, to);\n        lv.setAdapter(adapter);\n        ~\n    }\n}", "ej_android_animation": "ImageView androidIV = (ImageView)findViewById(R.id.imagen);\nandroidIV.setBackgroundResource(R.drawable.transiccion);\nAnimationDrawable androidAnimation =(AnimationDrawable) androidIV.getBackground();\nandroidAnimation.start();", "ej_android_array_adapter": "ArrayAdapter<String> a = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1 , new String[]{\"daniel\", \"molina\"});\nListView lista= (ListView) findViewById(R.id.listView);\nlista.setAdapter(a);", "ej_android_db_sqlite": "package co.edu.udea.testdani;\n\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\n\n/**\n * Created by dmolina on 27/05/2015.\n */\npublic class Conexion extends SQLiteOpenHelper{\n\n\n    public Conexion(Context context) {\n        super(context, \"dbtest\", null, 1);\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        db.execSQL(\"create table if not exists usuario(cedula, nombre)\");\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        db.execSQL(\"drop table if exists usuario\");\n    }\n\n    public void agregarUsuario(String cedula, String nombre){\n        this.getWritableDatabase().execSQL(\"insert into usuario values('\"+cedula+\"', '\"+nombre+\"');\");\n    }\n\n    public Cursor getUsuarios(){\n        return this.getReadableDatabase().query(\"usuario\", new String[]{\"cedula\", \"nombre\"}, null, null, null, null, null);\n    }\n\n    ~\n}\n", "ej_android_fragment": "package dani.com.pony;\n\nimport android.app.Fragment;\nimport android.os.Bundle;\nimport android.support.annotation.Nullable;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\npublic class ArticuloFragment extends Fragment {\n    @Nullable\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.article_view, container, false);\n        ~\n    }\n}\n", "ej_android_fragment_container_dinamic": "package dani.com.pony;\n\nimport android.app.Fragment;\nimport android.app.FragmentTransaction;\nimport android.support.v7.app.ActionBarActivity;\nimport android.os.Bundle;\nimport android.view.Menu;\nimport android.view.MenuItem;\n\n\npublic class Noticias extends ActionBarActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.noticias);\n        NoticiaFragment f=new NoticiaFragment();\n        f.setArguments(savedInstanceState);\n        android.support.v4.app.FragmentTransaction ft=getSupportFragmentManager().beginTransaction();\n        ft.add(R.id.fragment_container, f).commit();\n        ~\n    }\n}\n", "ej_android_fragment_dinamico": "package dani.com.pony;\n\n\nimport android.support.v4.app.Fragment;\nimport android.os.Bundle;\nimport android.support.annotation.Nullable;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\npublic class NoticiaFragment extends Fragment {\n    @Nullable\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.noticia_view, container, false);\n        ~\n    }\n}\n", "ej_android_plural_message": "Resources resources = getResources();\nString cadena = resources.getQuantityString(R.plurals.androidC, 2, 2);\ntxt.setText(cadena);", "ej_android_replace_fragment": "OtroFragment f=new OtroFragment();\nandroid.support.v4.app.FragmentTransaction ft=getSupportFragmentManager().beginTransaction();\nft.replace(R.id.fragment_container, f);\nft.addToBackStack(null);\nft.commit();", "ej_android_simpleadapter": "ListView lv = (ListView) findViewById(R.id.listview);\n\n// create the grid item mapping\nString[] from = new String[]{\"rowid\", \"col_1\", \"col_2\", \"col_3\"};\nint[] to = new int[]{R.id.item1, R.id.item2, R.id.item3, R.id.item4};\n\n// prepare the list of all records\nList<HashMap<String, String>> fillMaps = new ArrayList<HashMap<String, String>>();\nfor (int i = 0; i < 10; i++) {\n    HashMap<String, String> map = new HashMap<String, String>();\n    map.put(\"rowid\", \"\" + i);\n    map.put(\"col_1\", \"col_1_item_\" + i);\n    map.put(\"col_2\", \"col_2_item_\" + i);\n    map.put(\"col_3\", \"col_3_item_\" + i);\n    fillMaps.add(map);\n}\n\n// fill in the grid_item layout\nSimpleAdapter adapter = new SimpleAdapter(this, fillMaps, R.layout.grid_item, from, to);\nlv.setAdapter(adapter);", "ej_android_simplecursoradapter": "ListView lv = (ListView) view.findViewById(R.id.listviewMatters);\nint[] to = new int[]{R.id.item_matter_name, R.id.item_matter_weight};\nSimpleCursorAdapter adapter = new SimpleCursorAdapter(getActivity(), R.layout.matter_list_item, db.cursorFindAll(Matter.class), SQL.MATTER_COLUMNS, to, SimpleCursorAdapter.FLAG_REGISTER_CONTENT_OBSERVER);\nlv.setAdapter(adapter);", "ej_converter": "package com.dani.proyecto.converter;\nimport javax.faces.convert.Converter;\nimport javax.faces.context.FacesContext;\nimport javax.faces.component.UIComponent;\nimport javax.faces.convert.FacesConverter;\n\n@FacesConverter(\"moneyConverter\")\npublic class MoneyConverter implements Converter{\n    @Override\n    public String getAsObject(FacesContext context, UIComponent component, String value){\n        return value;\n    }\n\n    @Override\n    public String getAsString(FacesContext context, UIComponent component, Object value){\n        if(value!=null)\n            return \"\\$\"+value.toString();\n        return value.toString();\n    }\n    ~\n}", "ej_datasource": "DataSource source=DB.db();\nConnection conexion= source.getConnection();\nPreparedStatement ps= conexion.prepareStatement(\"select * from carro\");\nResultSet resultset= ps.executeQuery();", "ej_datasource_lookup": "import javax.naming.Context;\nimport javax.naming.InitialContext;\nimport javax.sql.DataSource;\n\npublic class DB{\n    private static DataSource db=null;\n    private static Context context=null;\n\n    public static DataSource db() throws Exception{\n        if(db!=null)return db;\n        try{\n            if(context==null)context=new InitialContext();\n            db=(DataSource)  context.lookup(\"testOrigen\");\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n        return db;\n    }\n}", "ej_ejb_cliente_local_test": "package test;\n\nimport javax.ejb.embeddable.EJBContainer;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.dani.dominio.Persona;\nimport com.dani.servicio.PersonaService;\n\npublic class PersonaServiceTest {\n	private PersonaService personaService;\n	@Before\n	public void setUp() throws Exception{\n		EJBContainer contenedor = EJBContainer.createEJBContainer();\n		personaService = (PersonaService) contenedor.getContext().lookup(\"java:global/classes/PersonaServiceImpl!com.dani.servicio.PersonaService\");\n	}\n	\n	@Test\n	public void testEJBPersonaService(){\n		System.out.println(\"inicio de test\");\n		assert(personaService!=null);\n		System.out.println(\"**********ok\");\n		this.showPersonas();\n	}\n\n	private void showPersonas() {\n		for (Persona persona : personaService.allPersonas()) {\n			System.out.println(persona);\n		}\n	}\n}\n", "ej_ejb_cliente_remoto": "package com.dani.cliente;\n\nimport javax.naming.Context;\nimport javax.naming.InitialContext;\nimport javax.naming.NamingException;\n\nimport java.util.List;\n\nimport com.dani.dominio.Persona;\nimport com.dani.servicio.PersonaServiceRemote;\n\npublic class ClientePersonaService {\n	public static void main(String[] args) {\n		System.out.println(\"begin\");\n		try {\n			Context jndi=new InitialContext();\n			PersonaServiceRemote personaService=(PersonaServiceRemote) jndi.lookup(\"java:global/sga-jee/PersonaServiceImpl!com.dani.servicio.PersonaServiceRemote\");\n			List<Persona> l=personaService.allPersonas();\n			for (Persona persona : l) {\n				System.out.println(persona);\n			}\n			System.out.println(\"fin con exito\");\n		} catch (NamingException e) {\n			System.out.println(\"error llamando al ejb\");\n			e.printStackTrace();\n		}\n		System.out.println(\"fin\");\n	}\n}", "ej_ejb_interfaz_remota": "package com.dani.servicio;\n\n\n\nimport java.util.List;\n\nimport javax.ejb.Remote;\n\nimport com.dani.dominio.Persona;\n\n@Remote\npublic interface PersonaServiceRemote {\n	public List<Persona> allPersonas();\n	public Persona findById(Integer id);\n	public Persona findByEmail(String meail);\n	public void savePersona(Persona persona);\n	public void modifyPersona(Persona persona);\n	public void deletePersona(Persona persona);\n}\n", "ej_ejb_stateless": "package com.dani.servicio;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.ejb.Stateless;\n\nimport com.dani.dominio.Persona;\n\n@Stateless\npublic class PersonaServiceImpl implements PersonaServiceRemote {\n\n	public List<Persona> allPersonas() {\n		List<Persona> lista=new ArrayList<Persona>();\n		lista.add(new Persona(1,\"dani\",\"serna\",\"a@a.com\", \"5\"));\n		lista.add(new Persona(2,\"ale\",\"algo\",\"a@a.com\", \"6\"));\n		lista.add(new Persona(3,\"jojo\",\"algo\",\"a@a.com\", \"6\"));\n		return lista;\n	}\n\n	public Persona findById(Integer id) {\n		// TODO Auto-generated method stub\n		return null;\n	}\n\n	public Persona findByEmail(String meail) {\n		// TODO Auto-generated method stub\n		return null;\n	}\n\n	public void savePersona(Persona persona) {\n		// TODO Auto-generated method stub\n		\n	}\n\n	public void modifyPersona(Persona persona) {\n		// TODO Auto-generated method stub\n\n	}\n\n	public void deletePersona(Persona persona) {\n		// TODO Auto-generated method stub\n	}\n}\n", "ej_esapi_security": "String temp=resultset.getString(nombre);\ntemp=ESAPI.encoder().canonicalize(temp);\ntemp=ESAPI.encoder().encodeForHTML(temp);", "ej_getdocument_epd": "ITextEditor editor=(ITextEditor)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();\nIDocumentProvider documentProvider=editor.getDocumentProvider();\nIDocument document = documentProvider.getDocument(editor.getEditorInput());", "ej_getseleccion_epd": "ITextEditor editor=(ITextEditor)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();\nString seleccion=((TextSelection)editor.getSelectionProvider().getSelection()).getText());", "ej_getselection_epd": "ITextEditor editor=(ITextEditor)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();\nString seleccion=((TextSelection)editor.getSelectionProvider().getSelection()).getText());", "ej_intent_create_alarm": "Intent intent = new Intent(AlarmClock.ACTION_SET_ALARM)\n        .putExtra(AlarmClock.EXTRA_MESSAGE, \"mensaje de la alarma\")\n        .putExtra(AlarmClock.EXTRA_HOUR, 10)\n        .putExtra(AlarmClock.EXTRA_MINUTES, 15);\nif (intent.resolveActivity(getPackageManager()) != null) {\n    startActivity(intent);\n}", "ej_jsf_converter": "package com.dani.proyecto.converter;\nimport javax.faces.convert.Converter;\nimport javax.faces.context.FacesContext;\nimport javax.faces.component.UIComponent;\nimport javax.faces.convert.FacesConverter;\n\n@FacesConverter(\"moneyConverter\")\npublic class MoneyConverter implements Converter{\n    @Override\n    public String getAsObject(FacesContext context, UIComponent component, String value){\n        return value;\n    }\n\n    @Override\n    public String getAsString(FacesContext context, UIComponent component, Object value){\n        if(value!=null)\n            return \"\\$\"+value.toString();\n        return value.toString();\n    }\n    ~\n}", "ej_layoutparams": "LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT);\nLinearLayout.LayoutParams params2=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);\nLinearLayout layout=new LinearLayout(this);\nlayout.setOrientation(LinearLayout.VERTICAL);\nthis.addContentView(layout, params);\nfor(int i=0;i<50;i++) {\n    Button btn = new Button(this);\n    btn.setText(\"boton\"+i);\n    layout.addView(btn, params2);\n}", "ej_list_all_jobs": "Scheduler scheduler = new StdSchedulerFactory().getScheduler();\n        \n   for (String groupName : scheduler.getJobGroupNames()) {\n\n     for (JobKey jobKey : scheduler.getJobKeys(GroupMatcher.jobGroupEquals(groupName))) {\n                \n      String jobName = jobKey.getName();\n      String jobGroup = jobKey.getGroup();\n                \n      //get job's trigger\n      List<Trigger> triggers = (List<Trigger>) scheduler.getTriggersOfJob(jobKey);\n      Date nextFireTime = triggers.get(0).getNextFireTime(); \n\n        System.out.println(\"[jobName] : \" + jobName + \" [groupName] : \"\n            + jobGroup + \" - \" + nextFireTime);\n\n      }\n\n    }", "ej_list_all_jobs_1.6": " Scheduler scheduler = new StdSchedulerFactory().getScheduler();\n\n    //loop all group\n    for (String groupName : scheduler.getJobGroupNames()) {\n\n  //loop all jobs by groupname\n  for (String jobName : scheduler.getJobNames(groupName)) {\n        \n          //get job's trigger\n    Trigger[] triggers = scheduler.getTriggersOfJob(jobName,groupName);\n    Date nextFireTime = triggers[0].getNextFireTime();\n\n    System.out.println(\"[jobName] : \" + jobName + \" [groupName] : \"\n      + groupName + \" - \" + nextFireTime);\n\n  }\n\n}", "ej_llamar_ventana_zk": "Map<String, Project> map=new HashMap<String, Project>();\nmap.put(Constants.PROJECT, project);\nfinal Window window=(Window)Executions.createComponents(Common.getMangerPath(Constants.PROJECT, winProjectList, map));\nwindow.doModal();\ndoAfterCompose(winProjectList);", "ej_managedbean": "package com.dani.proyecto.beans;\n\nimport javax.faces.bean.ManagedBean;\nimport javax.faces.bean.RequestScoped;\n\n@ManagedBean\n@RequestScoped\npublic class ~Bean{\n    ~\n}", "ej_onetomany": "@JoinColumn(name = \"PACIENTE_ID\", referencedColumnName = \"ID\")\n@ManyToOne(optional = false, fetch=FetchType.LAZY)", "ej_preferences_get": "getPreferences(Context.MODE_PRIVATE).getString(getString(R.string.pass), \"\");", "ej_preferences_put": "SharedPreferences sp=getPreferences(Context.MODE_PRIVATE);\nSharedPreferences.Editor editor=sp.edit();\neditor.putString(getString(R.string.name), editName.getText().toString());\neditor.commit();", "ej_preparedstatement": "PreparedStatement ps=conexion.prepareStatement(\"insert into cliente (nombre) values (?)\");\nps.setString(1, persona.getNombre());\nps.executeUpdate();", "ej_resolver": "public class Resolver implements org.zkoss.xel.VariableResolver\n{\n    public Object resolveVariable(String name) {\n        if (\"customer\".equals(name))\n            return new Customer();\n        return null; \n    }\n}", "ej_rest_delete_json": "@DELETE\n@Path(\"/eliminar\")\n@Consumes({MediaType.APPLICATION_FORM_URLENCODED, MediaType.APPLICATION_JSON})\n@Produces(MediaType.TEXT_HTML)\npublic Response eliminar(String data){\n    System.out.println(\"el dato a aleiminar es : \"+data);\n    return Response.ok(\"todo bien mijo\").build();\n}", "ej_rest_get": "import javax.ws.rs.GET;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\n\n\n@Path(\"/carros\")\npublic class Carros {\n    @GET\n    @Produces(MediaType.TEXT_HTML)\n    public String otherMethod(){\n        return \"<p>other tutorial here</p>\";\n        ~\n    }\n}\n", "ej_rest_json": "@Path(\"/carros\")\n@Produces(MediaType.TEXT_HTML)\npublic class Carros {\n    List<String> list=new ArrayList<String>();\n\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response Carros(){\n        return Response.ok(getCarros()).build();\n    }\n\n    private String getCarros(){\n        try{\n            DataSource source=DB.db();\n            Connection conexion= source.getConnection();\n            PreparedStatement ps= conexion.prepareStatement(\"select * from carro\");\n            ResultSet resultset= ps.executeQuery();\n            JSONArray array=ToJSON.toJsonArray(resultset);\n            ps.close();\n            conexion.close();\n            return array.toString();\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n        return \"\";\n    }\n}~", "ej_rest_pathparam": "@GET\n@Path(\"/{nombre}\")\n@Produces(MediaType.APPLICATION_JSON)\npublic Response getAll(@PathParam(\"nombre\") String nombre){\n    return Response.ok(getArboles(nombre)).build();\n}~", "ej_rest_pathparams": "@GET\n@Path(\"/{nombre}/{ubicacion}\")\n@Produces(MediaType.APPLICATION_JSON)\npublic Response getAll(@PathParam(\"nombre\") String nombre, @PathParam(\"ubicacion\") String ubicacion){\n    return Response.ok(getArboles(nombre, ubicacion)).build();\n}~", "ej_rest_post_save_json": "@POST\n@Consumes({MediaType.APPLICATION_FORM_URLENCODED,MediaType.APPLICATION_JSON})\n@Produces(MediaType.APPLICATION_JSON)\npublic Response addArbol(String datos) throws Exception {\n    JSONObject obj=new JSONObject(datos);\n    setArbol(new Arbol(obj.getInt(\"id\"), obj.getInt(\"altura\"), obj.getString(\"nombre\"), obj.getString(\"ubicacion\")));\n    return Response.ok(\"TODO BIEN MIJO\").build();\n}~", "ej_rest_produces": "@Produces(MediaType.TEXT_HTML)~", "ej_rest_put_json": "@Path(\"/actualizar\")\n@PUT\n@Consumes({MediaType.APPLICATION_FORM_URLENCODED, MediaType.APPLICATION_JSON})\n@Produces(MediaType.APPLICATION_JSON)\npublic Response updateItem(String datos){\n    System.out.println(datos);\n    return Response.ok(\"ok\").build();\n}", "ej_rest_queryparam": "@GET\n@Produces(MediaType.APPLICATION_JSON)\npublic Response getAll(@QueryParam(\"nombre\") String nombre){\n    return Response.ok(getArboles(nombre)).build();\n}~", "ej_rest_resource_json": "@Path(\"/arboles\")\npublic class Arboles{\n\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getAll(){\n        return Response.ok(getArboles(\"\")).build();\n    }\n\n    public String getArboles(String nombre){\n        try{\n            Context context=new InitialContext();\n            DataSource ds=(DataSource)context.lookup(\"testOrigen\");\n            Connection cn=ds.getConnection();\n            PreparedStatement ps=cn.prepareStatement(\"select * from arbol where nombre like '%\"+nombre+\"%'\");\n            ResultSet rs=ps.executeQuery();\n            JSONArray array=new JSONArray();\n            while(rs.next()){\n                JSONObject obj=new JSONObject();\n                obj.put(\"id\", rs.getInt(\"id\"));\n                obj.put(\"nombre\", rs.getString(\"nombre\"));\n                obj.put(\"ubicacion\", rs.getString(\"ubicacion\"));\n                obj.put(\"altura\", rs.getInt(\"altura\"));\n                array.put(obj);\n            }\n            cn.close();\n            rs.close();\n            return array.toString();\n        }catch(Exception e){\n            System.out.println(\"Error al tratar de conulstar todos los arboles\");\n        }\n        return \"\";\n    }\n}~", "ej_resultset": "PreparedStatement ps=conexion.prepareStatement(\"select * from cliente\");\nResultSet rs=ps.executeQuery();\nList<Persona> personas=new ArrayList<Persona>();\nwhile(rs.next()){\n    int id=rs.getInt(\"id\");\n    String nombre=rs.getString(\"nombre\");\n    personas.add(new Persona(id, nombre));\n}", "ej_resultset_to_json": "import org.codehaus.jettison.json.JSONObject;\nimport org.codehaus.jettison.json.JSONArray;\nimport java.sql.Types;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\n\npublic class ToJSON{\n    public static JSONArray toJsonArray(ResultSet resultset){\n        JSONArray json=new JSONArray();\n        try{\n            ResultSetMetaData md = resultset.getMetaData();\n            while(resultset.next()){\n                int columnas= md.getColumnCount();\n                JSONObject obj=new JSONObject();\n                for(int i=1;i < columnas;i++){\n                    String nombre = md.getColumnName(i);\n\n                    if(md.getColumnType(i)==Types.INTEGER){\n                        obj.put(nombre, resultset.getInt(nombre));\n                    }else if(md.getColumnType(i)==Types.VARCHAR){\n                        obj.put(nombre,resultset.getString(nombre));\n                    }\n                }\n                json.put(obj);\n            }\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n        return json;\n    }\n}~", "ej_sharedpreferences_get": "getSharedPreferences(\"com.danielito.dos\", Context.MODE_PRIVATE).getString(getString(R.string.name), \"\");", "ej_sharedpreferences_put": "SharedPreferences sp=getSharedPreferences(\"com.danielito.dos\", Context.MODE_PRIVATE);\nSharedPreferences.Editor editor=sp.edit();\neditor.putString(getString(R.string.name), editName.getText().toString());\neditor.commit();", "ej_show_android": "Toast.makeText(this, \"ok\", Toast.LENGTH_LONG);", "ej_sql_metadata": "ResultSetMetaData md = resultset.getMetaData();\nwhile(resultset.next()){\n    int columnas= md.getColumnCount();\n    JSONObject obj=new JSONObject();\n    for(int i=1;i < columnas;i++){\n        String nombre = md.getColumnName(i);\n\n        if(md.getColumnType(i)==Types.INTEGER){\n            obj.put(nombre, resultset.getInt(nombre));\n        }else if(md.getColumnType(i)==Types.VARCHAR){\n            String temp=resultset.getString(nombre);\n            temp=ESAPI.encoder().canonicalize(temp);\n            temp=ESAPI.encoder().encodeForHTML(temp);\n            \n            obj.put(nombre,temp);\n        }\n    }\n    json.put(obj);\n}", "ej_string_format": "String.format(\"Este es el mensaje : %1\\$d\", 10)", "ejb_interceptor": "import java.lang.reflect.Method;\nimport javax.interceptor.AroundInvoke;\nimport javax.interceptor.InvocationContext;\n\npublic class LogginInterceptor{\n    @AroundInvoke\n    public Object metodoLogueo(InvocationContext ic) throws Exception{\n        Object objeto=ic.getTarget();\n        Method metodo=ic.getMethod();\n        System.out.println(\"entrando en : \" + objeto.getClass().getName() + \"en el metodo : \"+metodo.getName());\n        Object o=ic.proceed();\n        System.out.println(\"saliendo de : \" + objeto.getClass().getName() + \"en el metodo : \"+metodo.getName());\n        return o;\n    }\n}\n~", "ejb_put_interceptor": "@Interceptors({~ClassName.class})", "ejemplo_barchart_jfreechart": "import java.io.File;\nimport org.jfree.chart.*;\nimport org.jfree.data.general.*;\nimport org.jfree.data.category.DefaultCategoryDataset;\npublic class app\n{\n	public static void main(String[] args) \n	{\n		DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n		dataset.addValue(1.0, \"Row 1\", \"Column 1\");\n		dataset.addValue(5.0, \"Row 1\", \"Column 2\");\n		dataset.addValue(3.0, \"Row 1\", \"Column 3\");\n		JFreeChart grafico= ChartFactory.createBarChart(\"CAR\",\"Category\", \"Value\", dataset);\n		ChartFrame marco=new ChartFrame(\"CAR\", grafico);\n		marco.pack();\n		marco.setVisible(true);\n	}\n}", "ejemplo_charts": "import java.io.File;\nimport java.io.IOException;\n\nimport org.jfree.chart.ChartFactory;\nimport org.jfree.chart.ChartFrame;\nimport org.jfree.chart.ChartUtilities;\nimport org.jfree.chart.JFreeChart;\nimport org.jfree.data.category.DefaultCategoryDataset;\nimport org.jfree.data.general.DefaultPieDataset;\nimport org.jfree.data.xy.XYSeries;\nimport org.jfree.data.xy.XYSeriesCollection;\n\npublic class Graf \n{\n	public static void main(String [] args) throws IOException\n	{\n		Graf g=new Graf();\n		g.barra();\n		int [] x={1,2,3,4,5};\n		int [] y={2,3,4,5,6};\n		g.agregarPuntos(x, y);\n		ChartFrame f=new ChartFrame(\"si\", g.grafica);\n		f.setVisible(true);\n		f.setSize(400, 400);\n		ChartUtilities.saveChartAsPNG(new File(\"e:/archivo.png\"), g.grafica, 400, 400);\n	}\n	boolean xy=false;\n	JFreeChart grafica;\n	XYSeriesCollection datos;\n	\n	public Graf()\n	{\n		datos=new XYSeriesCollection();\n	}\n	\n	public void pie()\n	{\n		DefaultPieDataset datosPie;\n		datosPie=new DefaultPieDataset();\n		datosPie.setValue(\"dani\", 10);\n		datosPie.setValue(\"joder\", 30);\n		datosPie.setValue(\"marica\", 40);\n		grafica=ChartFactory.createPieChart(\"\", datosPie);\n	}\n	\n	public void barra()\n	{\n		DefaultCategoryDataset datos=new DefaultCategoryDataset();\n		datos.addValue(5, \"enero\", \"mucho\");\n		datos.addValue(1.0, \"Row 1\", \"Column 1\");\n		datos.addValue(5.0, \"Row 1\", \"Column 2\");\n		datos.addValue(3.0, \"Row 1\", \"Column 3\");\n		grafica=ChartFactory.createBarChart(\"\", \"\", \"\", datos);\n	}\n	\n	public void lineal()\n	{\n		grafica=ChartFactory.createXYLineChart(\"\", \"x\", \"y\", datos);\n	}\n	\n	public void polar()\n	{\n		grafica=ChartFactory.createPolarChart(\"\", datos, true, true, true);\n	}\n	\n	public void dispersion()\n	{\n		grafica=ChartFactory.createScatterPlot(\"\", \"\", \"\", datos);\n	}\n	\n	public void area()\n	{\n		grafica=ChartFactory.createXYAreaChart(\"\", \"\", \"\", datos);\n	}\n	\n	public void tiempo()\n	{\n		grafica=ChartFactory.createTimeSeriesChart(\"\", \"\", \"\", datos);\n	}\n	\n	public void agregarPuntos(int[] x, int [] y)\n	{\n		XYSeries s=new XYSeries(\"\");\n		for(int i=0;i<x.length;i++)\n		{\n			s.add(x[i], y[i]);\n		}\n		datos.addSeries(s);\n	}\n}\n", "ejemplo_excel_celda": "import java.io.FileOutputStream;\nimport org.apache.poi.hssf.usermodel.HSSFCell;\nimport org.apache.poi.hssf.usermodel.HSSFRichTextString;\nimport org.apache.poi.hssf.usermodel.HSSFRow;\nimport org.apache.poi.hssf.usermodel.HSSFSheet;\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\n\n\npublic class app \n{\n    public static void main(String[] args) {\n        HSSFWorkbook libro=new HSSFWorkbook();\n        HSSFSheet hoja1=libro.createSheet(\"Hoja\");\n        HSSFRow fila=hoja1.createRow(5);\n        HSSFCell celda=fila.createCell(1);\n        HSSFRichTextString texto=new HSSFRichTextString(\"danielito estubo aqui\");\n        celda.setCellValue(texto);\n        try\n        {\n            FileOutputStream archivo=new FileOutputStream(\"hola.xls\");\n            libro.write(archivo);\n            archivo.close();\n        }catch(Exception e)\n        {\n            System.out.println(\"error\");\n        }\n    }\n}\n", "ejemplo_piechart_jfreechart": "import java.io.File;\nimport org.jfree.chart.*;\nimport org.jfree.data.general.*;\n\npublic class app\n{\n	public static void main(String[] args) \n	{\n		DefaultPieDataset datos=new DefaultPieDataset();\n		datos.setValue(\"nacional\", 33);\n		datos.setValue(\"medallo\", 40);\n		datos.setValue(\"carajo\", 600);\n		JFreeChart grafico= ChartFactory.createPieChart(\"CAR\", datos, true, true, true);\n		ChartFrame marco=new ChartFrame(\"CAR\", grafico);\n		marco.pack();\n		marco.setVisible(true);\n	}\n}", "ejemplo_piechart_multiple_jfreechart": "import java.awt.Color;\n\nimport org.jfree.chart.ChartFactory;\nimport org.jfree.chart.ChartFrame;\nimport org.jfree.chart.JFreeChart;\nimport org.jfree.chart.plot.PiePlot;\nimport org.jfree.data.category.CategoryDataset;\nimport org.jfree.data.general.DatasetUtilities;\nimport org.jfree.data.general.DefaultPieDataset;\nimport org.jfree.util.TableOrder;\n\npublic class app {\n\npublic static void main(String[] args) {\n		DefaultPieDataset dataset=new DefaultPieDataset();\n		dataset.setValue(\"verde\", 10);\n		dataset.setValue(\"rojo\", 20);\n		double[][] data = new double[][] {\n	            {3.0, 4.0, 3.0, 5.0},\n	            {5.0, 7.0, 6.0, 8.0}\n	        };\n		CategoryDataset datos=DatasetUtilities.createCategoryDataset(\"Uno\", \"Dos\", data);\n		JFreeChart chart = ChartFactory.createMultiplePieChart(\"Car\", datos, TableOrder.BY_ROW, true, true, true);\n		\n		ChartFrame frame = new ChartFrame(\"First\", chart);\n		frame.pack();\n		frame.setVisible(true);\n	}\n}", "error": "lerror(LOG, \"@\", e);", "errorbean": "LOG.error(\"@\", e);\nFacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, Utils.getMsg(\"error_sistema\") , \"\" ));", "execute_javascript": "RequestContext.getCurrentInstance().execute(\"@\");", "faces_error_sistema": "FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, GestorMensajes.getMessage(Constants.MESSAGES_BUNDLE, \"global_error\"), \"\" ));", "facesmessage": "FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, \"@summary\" , \"@details\" ));", "faltainfo": "LOG.info(\"!! FALTA DE INFORMACION !! : @\");", "final_static_string": "public final static String ", "find": "findViewById(R.@);", "findviewbyid": "@1Class @var=(@1Class)this.findViewById(R.id.@Id);", "firma": "/**\n * @author dmolina\n * @date ~/06/2015\n */", "for_each": "for(@class @element:@list){\n    @   \n}", "fori": "for(int i=0;i<@n;i++){\n    @\n}", "fromhtml": "Html.fromHtml(\"&lt;@\")", "gerror": "Logger.getLogger(TreeApplicationBean.class.getName()).log(Level.SEVERE, \"@\", ex);", "getRawResource": "Resources res=this.getResources();\nInputStream is=res.openRawResource(R.raw.test);\nString myText = convertStreamToString(is);", "get_assets_file": "AssetManager am=this.getAssets();\nInputStream is=am.open(\"carta.txt\");\nString s=convertStreamToString(is);", "get_color_drawable": "ColorDrawable @redDrawable=(ColorDrawable)res.getDrawable(R.drawable.@red_rectangle);", "get_raw_resource": "Resources res=this.getResources();\nInputStream is=res.openRawResource(R.raw.test);\nString myText = convertStreamToString(is);", "get_resources": "Resources res=this.getResources();", "getcontextparam()": "ServletContext servletContext=(ServletContext)FacesContext.getCurrentInstance().getExternalContext().getContext();\nservletContext.getInitParameter(\"miparametro\");\nreturn servletContext.getInitParameter(\"miparametro\");", "getmsg": "Utils.getMsg(\"@\")", "getstring": "getString(R.string.@)", "grid_view": "GridView gridView1=(GridView)findViewById(R.id.gridView1);\nArrayAdapter<String> listAdapter=new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, new String[]{\"Daniel\", \"Alejandro\", \"Molina\", \"Yepes\", \"De la mancha\", \"jose\", \"maria\"});\ngridView1.setAdapter(listAdapter);", "hibernate.connection.pool_size": "mapConexion.put(\"hibernate.connection.pool_size\", \"100\");", "htpu_bean": "package com.co.hptu.acreditacion.business.ejb;\n\nimport javax.ejb.Local;\n\n/**\n *\n * @author dmolina\n * @date 16/06/2015\n */\n\n@Local\npublic interface ~2Entity {\n    List<~1entityDTO> buscar~2Entity();\n    boolean crear~2Entity(~1entityDTO responsablePaciente);\n    boolean modificar~2Entity(~1entityDTO responsablePaciente);\n    boolean eliminar~2Entity(Long id);\n}", "htpu_dao": "package com.co.hptu.acreditacion.business.dao;\n\n/**\n * @author dmolina\n * @date 16/06/2015\n */\n\npublic interface ~1Entity{\n    List<~1Entity> buscar~1Entity();\n    boolean crear~1Entity(~1Entity ~2EntityVar);\n    boolean modificar~1Entity(~1Entity ~2EntityVar);\n    boolean eliminar~1Entity(Long id);\n}", "htpu_daoimpl": "package com.co.hptu.acreditacion.business.dao.impl;\n\nimport com.co.hptu.acreditacion.business.dao.~1;\nimport javax.persistence.EntityManager;\n\npublic class ~1Impl implements ~1{\n    private EntityManager em;\n    \n    public ~1Impl(EntityManager em) {\n        this.em = em;\n    }\n\n    ~\n}", "htpu_dao}": "package com.co.hptu.acreditacion.business.dao;\n\n/**\n * @author dmolina\n * @date 16/06/2015\n */\n\npublic interface @1Entity{\n    List<@1Entity> buscar@1Entity();\n    boolean crear@1Entity(@1Entity @2EntityVar);\n    boolean modificar@1Entity(@1Entity @2EntityVar);\n    boolean eliminar@1Entity(Long id);\n}", "htpu_dto": "package com.co.hptu.acreditacion.cross.dto;\nimport java.io.Serializable;\n\n//@Dto{id Long, @}", "htpu_entity": "package com.co.hptu.acreditacion.data.entities;\nimport java.io.Serializable;\n\nimport java.util.Date;\nimport javax.persistence.Basic;\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.NamedQueries;\nimport javax.persistence.NamedQuery;\nimport javax.persistence.Table;\nimport javax.xml.bind.annotation.XmlRootElement;\n\n/**\n *\n * @author dmolina\n * @date 16/06/2015\n */\n\n@Entity\n@Table(name = \"~TableName\")\n@XmlRootElement\n@NamedQueries({\n    @NamedQuery(name = \"~1Entity.findAll\", query = \"SELECT v FROM ~1Entity v\")\n})\n//~1Entity{id Long, ~}", "htpu_error_sistema": "FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, GestorMensajes.getMessage(Constants.MESSAGES_BUNDLE, \"global_error\"), \"\" ));", "htpu_ibean": "package com.co.hptu.acreditacion.business.integration.ejb.impl;\n\nimport javax.annotation.PostConstruct;\nimport javax.persistence.PersistenceContext;\nimport javax.persistence.EntityManager;\n\nimport com.co.hptu.acreditacion.business.dao.RolDao;\nimport com.co.hptu.acreditacion.business.dao.impl.RolDaoImpl;\nimport com.co.hptu.acreditacion.business.ejb.RolBean;\nimport com.co.hptu.acreditacion.business.integration.facade.DTOToEntity;\nimport com.co.hptu.acreditacion.business.integration.facade.EntityToDTO;\nimport com.co.hptu.acreditacion.business.util.Constants;\nimport com.co.hptu.acreditacion.cross.dto.CronJobDTO;\nimport com.co.hptu.acreditacion.cross.exception.AcreditacionException;\nimport com.co.hptu.acreditacion.data.entities.Rol;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.log4j.Logger;\nimport javax.ejb.Stateless;\n\n/**\n *\n * @author dmolina\n * @date 04/06/2015\n */\n@Stateless\npublic class IRolBean implements RolBean {\n\n    private static Logger LOG = Logger.getLogger(Constants.LOGGER_NAME);\n\n    @PersistenceContext(unitName = Constants.PERSISTENCE_UNIT_NAME)\n    private EntityManager em;\n    private RolDao rolDao;\n\n    @PostConstruct\n    public void init(){\n        rolDao=new RolDaoImpl(em);\n    }\n}\n", "htpu_logger": "private static Logger LOG = Logger.getLogger(Constants.LOGGER_NAME);", "htpuerrorsistema": "FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, GestorMensajes.getMessage(Constants.MESSAGES_BUNDLE, \"global_error\"), \"\" ));", "if": "if(@)\n{\n  @\n}", "if_not_null_value": "if(@.getValue()!=null){\n    @\n}", "if_short": "@?@:@", "ifs": "@?@:@", "ifsstring": "@1!=null?@1:\"\";", "iii": "objeto[i++]", "indice_nulo": "Constants.INDICE_NULO", "inject_bean": "@EJB\n~Class ~name;", "intent_invoke_web_browser": "Intent intent = new Intent(Intent.ACTION_VIEW);\nintent.setData(Uri.parse(\"http://www.google.com\"));\nactivity.startActivity(intent);", "interface": "interface", "interfaces": "interface", "invalido": "LOG.info(\"!! INVALIDO : !! : @\");", "iserializable": "implements Serializable", "java_ee:_managed_bean": "import javax.faces.bean.ManagedBean;\nimport javax.faces.bean.RequestScoped;\n\n@ManagedBean\n@RequestScoped\n~className{~}\n", "java_ee:_servlet": "import java.io.IOException;\nimport java.io.PrintWriter;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n@WebServlet(urlPatterns = {\"/~1\"})\npublic class ~1 extends HttpServlet \n{\n    protected void processRequest(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n        PrintWriter out = response.getWriter();\n        try {\n            out.println(\"<!DOCTYPE html>\");\n            out.println(\"<html>\");\n            out.println(\"<head>\");\n            out.println(\"<title>Servlet Servlet</title>\");            \n            out.println(\"</head>\");\n            out.println(\"<body>\");\n            out.println(\"<h1>Servlet Servlet at \" + request.getContextPath() + \"</h1>\");\n            out.println(\"</body>\");\n            out.println(\"</html>\");\n        } finally {            \n            out.close();\n        }\n    }\n\n\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        processRequest(request, response);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        processRequest(request, response);\n    }\n\n    @Override\n    public String getServletInfo() {\n        return \"Short description\";\n    }\n}\n", "java_ee:_validator": "import javax.faces.application.FacesMessage;\nimport javax.faces.component.UIComponent;\nimport javax.faces.context.FacesContext;\nimport javax.faces.validator.FacesValidator;\nimport javax.faces.validator.Validator;\nimport javax.faces.validator.ValidatorException;\n@FacesValidator\npublic class ~Name implements Validator\n{\n    @Override\n    public void validate(FacesContext contexto, UIComponent componente, Object valor) throws ValidatorException\n    {\n        throw new ValidatorException(new FacesMessage(\"~\"));\n    }\n}\n", "jsf_getresourcebundled": "ResourceBundle bundle = facesContext.getApplication().getResourceBundle(FacesContext.getCurrentInstance(), \"msg\");", "leer_archivo_texto": "public String leerArchivoText(InputStream in) throws IOException{\n    ByteArrayOutputStream byteStream=new ByteArrayOutputStream();\n    byte[] bytes=new byte[4096];\n    int len=0;\n    int dx=0;\n    while((dx=in.read(bytes))>0){\n        byteStream.write(bytes, len, dx);\n        len+=dx;\n    }\n    return new String(byteStream.toByteArray(), \"UTF8\");\n}", "lerror": "LOG.error(\"@\", e);", "linfo": "LOG.info(\"@\");", "listString": "List<String>", "list_view_check": "listView1=(ListView)findViewById(R.id.listView1);\nlistView1.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);\nlistAdapter=new ArrayAdapter<String>(this, android.R.layout.simple_list_item_checked, new String[]{\"Daniel\", \"Alejandro\", \"Molina\"});\nlistView1.setAdapter(listAdapter);", "list_view_check_single": "listView1=(ListView)findViewById(R.id.listView1);\nlistView1.setChoiceMode(ListView.CHOICE_MODE_SINGLE);\nlistAdapter=new ArrayAdapter<String>(this, android.R.layout.simple_list_item_checked, new String[]{\"Daniel\", \"Alejandro\", \"Molina\"});\nlistView1.setAdapter(listAdapter);", "listener": "public void on@Event\\$@Component(Event event){\n	@	\n}", "lthrow": "LOG.error(\"@\", e);\nthrow e;", "lwarn": "LOG.warn(\"@\");", "manytomany": "@JoinColumn(name = \"CARGO_ID\", referencedColumnName = \"ID\")\n@ManyToOne(fetch = FetchType.LAZY)~", "manytoone": "@JoinColumn(name = \"CARGO_ID\", referencedColumnName = \"ID\")\n@ManyToOne(fetch = FetchType.LAZY)~ ", "menytoone": "@JoinColumn(name = \"CARGO_ID\", referencedColumnName = \"ID\")\n@ManyToOne(fetch = FetchType.LAZY)~", "method": "public void @MethodName(){\n    @\n}", "method_void": "public void @MethodName(){\n    @\n}", "namedqueries": "@NamedQueries({\n	~\n})", "namedquery": "@NamedQuery(name = \"~Entity.~queryName\", query = \"~\")", "new_arraylist": "new ArrayList<@String>();", "new_linearlayoutparams": "LinearLayout.LayoutParams lp=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.FILL_PARENT);", "new_private_array_list": "private List<@1FinanciadorDTO> @listaFinanciador = new ArrayList<@1FinanciadorDTO>();", "newclass": "@1Clase @clase=new @1Clase();", "no_nullable": "nullable=false", "notnull": "@Column(nullable=false)~", "nulito": "Constants.NULO", "nullable": "nullable=false", "on_activity_result": "@Override\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    if(requestCode==~code){\n        if(resultCode==Activity.RESULT_OK){\n            \n        }\n    }\n}", "on_create": "@Override\npublic void onCreate(Bundle savedInstanceState){\n    super.onCreate(savedInstanceState);\n    ~\n}", "onactivityresult": "@Override\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    if(requestCode==~){\n        if(resultCode==~){\n            \n        }\n    }\n}", "onconfigurationchanged": "@Override\npublic void onConfigurationChanged(Configuration conf){\n    if(conf.orientation==Configuration.ORIENTATION_LANDSCAPE){\n        //TODO:~\n    }\n}", "oncreate": "@Override\npublic void onCreate(Bundle savedInstanceState){\n    super.onCreate(savedInstanceState);\n    ~\n}", "ondestroy": "@Override\nprotected void onDestroy() {\n    super.onDestroy();\n    ~\n}", "onetomany": "@OneToMany(cascade = CascadeType.ALL, mappedBy = \"~this\")\nprivate List<~Entity> ~entityList;", "onevent": "public void @MethodName(View view){\n    @\n}", "onnodecollapse": "public void onNodeCollapse(NodeCollapseEvent event) {\n    @\n}", "onnodeexpand": "public void onNodeExpand(NodeExpandEvent event) {\n    @\n}", "onnodeunselect": "public void onNodeUnselect(NodeUnselectEvent event) {\n    @\n}", "onoptionsitemselected": "@Override\npublic boolean onOptionsItemSelected(MenuItem item) {\n    int id = item.getItemId();\n\n    if (id == R.id.action_settings) {\n        return true;\n    }\n    ~\n\n    return super.onOptionsItemSelected(item);\n}", "onpause": "@Override\nprotected void onPause() {\n    super.onPause();\n    ~\n}", "onrestart": "@Override\npublic void onRestart(){\n    super.onRestart();\n    //TODO:~ resume proccess that  update the UI\n}", "onrestoreinstancestate": "@Override\nprotected void onRestoreInstanceState(Bundle savedInstanceState) {\n    super.onRestoreInstanceState(savedInstanceState);\n    //TODO:~ restore state that save before onPause\n}", "onresume": "@Override\nprotected void onResume() {\n    super.onResume();\n    ~\n}", "onsaveinstancestate": "@Override\nprotected void onSaveInstanceState(Bundle outState) {\n    super.onSaveInstanceState(outState);\n    //TODO:~ save state before onPause\n}", "onstart": "@Override\nprotected void onStart() {\n    super.onStart();\n    ~\n}", "onstop": "@Override\nprotected void onStop() {\n    super.onStop();\n    //TODO:~cancel proccess that update the UI\n}", "orderBy": "order by @.nombre ", "paquete": "package co.edu.udea.cmovil.gr8.schedulearning.@;", "param": "«@»", "perror": "CommonConstants.log.error(\"@\", e);", "posconstruct": "@PostConstruct\npublic void init(){\n    ~\n}", "primefaces_info_message": "FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, \"Info\", GestorMensajes.getMessage(Constants.MESSAGES_BUNDLE, \"@\")));", "print": "System.out.println(\"@\");", "printstacktrace": "e.printStackTrace();", "private_int": "private int @name;", "private_long": "private Long @name;", "private_string": "private String @name;", "quartz_dsl": "import static org.quartz.JobBuilder.*;\nimport static org.quartz.SimpleScheduleBuilder.*;\nimport static org.quartz.CronScheduleBuilder.*;\nimport static org.quartz.CalendarIntervalScheduleBuilder.*;\nimport static org.quartz.TriggerBuilder.*;\nimport static org.quartz.DateBuilder.*;", "quqrtz_dsl": "import static org.quartz.JobBuilder.*;\nimport static org.quartz.SimpleScheduleBuilder.*;\nimport static org.quartz.CronScheduleBuilder.*;\nimport static org.quartz.CalendarIntervalScheduleBuilder.*;\nimport static org.quartz.TriggerBuilder.*;\nimport static org.quartz.DateBuilder.*;", "readLine": "System.console().readLine();", "refrescar_jsf": "public void refrescar(){\n    if(!FacesContext.getCurrentInstance().isPostback()){\n        System.out.println(\"esta refrescando\");   \n    }\n}", "regex_find_all": "String input = \"otra cosa<name>daniel</name> y otra cosa\";\n\nPattern p = Pattern.compile(\"<name>([^<]*)</name>\");\nMatcher m = p.matcher(input);\n\nList<String> animals = new ArrayList<String>();\nwhile (m.find()) {\n    System.out.println(\"Found a \" + m.group() + \".\");\n    animals.add(m.group());\n}", "rerror": "Logger.getLogger(UsuarioBean.class.getName()).log(Level.SEVERE, \"@\", e);", "result_cancel": "RESULT_CANCEL", "result_ok": "RESULT_OK", "rinfo": "Logger.getLogger(UsuarioBean.class.getName()).log(Level.INFO, \"^_^ @\");", "rnull": "return null;", "serial": "private static final long serialVersionUID = 1L;", "serializable": "implements Serializable", "setOnCheckedChangeListener": "~checkbox.setOnCheckedChangeListener(\n    new CompoundButton.OnCheckedChangeListener() {\n        @Override\n        public void onCheckedChanged(CompoundButton arg0, boolean isChecked) {\n            ~\n        }   \n    }\n);", "setOnItemClickListener": "setOnItemClickListener(new OnItemClickListener() {\n                    @Override\n                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n                        String itemValue = (String) listView1.getItemAtPosition(position);\n                        Toast.makeText(getApplicationContext(), itemValue, Toast.LENGTH_LONG).show();\n                        ~\n                    }\n                });", "setonclicklistener": "setOnClickListener(new OnClickListener(){\n    public void onClick(View arg){\n        @\n    }\n});", "setsharedpreferences_android": "getSharedPreferences(\"@preferencesName\", Context.MODE_PRIVATE).edit().putString(\"@key\", \"@value\");", "show_google_map": "Intent intent = new Intent(Intent.ACTION_VIEW);\nintent.setData(Uri.parse(\"geo:0,0?z=4&q=business+near+city\"));\nactivity.startActivity(intent);", "showerr": "Messagebox.show(Common.label(\"@\"), Common.label(Constants.WARNING), Messagebox.OK, Messagebox.EXCLAMATION);", "showinfo": "Messagebox.show(Common.label(\"@\"), Common.label(Constants.INFORMATION), Messagebox.OK, Messagebox.INFORMATION);", "showinfoxk": "Messagebox.show(Common.label(\"@\"), Common.label(Constants.INFORMATION), Messagebox.OK, Messagebox.INFORMATION);", "spinner": "spi=(Spinner)this.findViewById(R.id.spi);\nArrayAdapter adapter=ArrayAdapter.createFromResource(this,R.array.string_array, android.R.layout.simple_spinner_item);\nadapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\nspi.setAdapter(adapter);", "spinner_adapter": "spi=(Spinner)this.findViewById(R.id.spi);\nArrayAdapter adapter=ArrayAdapter.createFromResource(this,R.array.string_array, android.R.layout.simple_spinner_item);\nadapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\nspi.setAdapter(adapter);", "startactivity": "startActivity(new Intent(this, @ClassName.class));", "startactivityforresult": "startActivityForResult(@);", "string_method": "public String @name(){\n    @    \n}", "switch": "switch(@){\n    case @:\n}", "test": "LOG.info(\"test ^_^ :\"+\"@\");", "thread": "new Thread(new Runnable(){\n    public void run(){\n        @\n    }\n})", "throw": "throw e;", "throw_acreditacion": "throw new AcreditacionException(Constants.GLOBAL_ERROR, e);", "toast": "Toast.makeText(this, \"@\", Toast.LENGTH_LONG).show();", "todo": "//TODO:", "tostring_method": "@Override\npublic String toString(){\n    ~\n}", "try": "try{\n    @\n}catch(Exception e){\n    LOG.error(\"@\", e);\n    throw e;\n}        ", "try_finally": "try{\n    @3\n}catch(Exception e){\n    @2\n}finally{\n    @1\n}", "update_ok": "mostrarInfo(\"update_ok\");", "validate_string_null": "if(@1var==null || @1var.isEmpty()){\n    return null;\n}", "void": "public void @nombre(){\n    @\n}", "voidBean": "public void @methodNamed(){\n    try{\n        @        \n    }catch(Exception e){\n        lerror(LOG, \"Error al tratar de descargar el archivo\", e);\n    }        \n}", "writefileutf": "PrintWriter writer = new PrintWriter(\"the-file-name.txt\", \"UTF-8\");\nwriter.println(\"The first line\");\nwriter.close();", "zk_create_component": "Executions.createComponents(\"@.zul\", @parent, null);", "zk_newlistcell": "new Listcell(@).setParent(item);", "zk_obtener_parametros_llamada": "if (Executions.getCurrent().getArg().get(Constants.PROJECT) != null) {\n	project = (Project) Executions.getCurrent().getArg().get(Constants.PROJECT);\n}"}