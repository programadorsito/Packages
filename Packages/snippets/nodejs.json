{"aget": "app.get(\"/@\", function(req, resp){\n   @ \n});", "angular_controller": "app.controller(\"@Ctrl\", function(\\$@scope){\n    @        \n});", "angular_run": "app.run(function(\\$rootScope){\n    \\$rootScope.@\n});", "clearinterval": "clearInterval(@);", "cleartimeout": "clearTimeout(@);", "contenido_html": "resp.writeHead(200, {\"Content-type\":\"text/html\"});", "copy_buffer": "buffer.copy(@newbuf, @targetStart, @sourceStart, @sourceEnd);", "dict": "{\"@\":\"@\"}", "dirname": "__dirname", "ej_buffer": "var b=new Buffer(text, \"ascii\");\nconsole.log(b.toString(\"ascii\"));", "ej_cliente_tcp": "var net=require(\"net\");\nvar cliente=net.Socket();\ncliente.setEncoding(\"utf-8\");\ncliente.connect(\"8989\", \"localhost\", function(){\n    console.log(\"se ha conectado de modo exitoso con el servidor\");\n    cliente.write(\"ya podemos hacer comunicacion sin medio del navegador\");\n});\n\ncliente.write(\"yo quiero ser una estrella fugaz\");\ncliente.on(\"data\", function(dato){\n    console.log(\"esto se esta recibiendo del servidor : \"+dato);\n});\n\ncliente.on(\"close\", function(){\n   console.log(\"esta cerrando la conexion\");     \n});", "ej_crear_servidor": "var http=require(\"http\");\nhttp.createServer(\nfunction(req, res){\n    res.writeHead(200, {\"content-type\":\"text/plain\"});\n    res.end(\"Esta es la respuesta que estas recibiendo de este servidor\");\n}\n).listen(3333);", "ej_delete_file": "var fs=require(\"fs\");\nfs.unlink(\"d:/d.txt\", function(){\n    console.log(\"error\");\n});", "ej_express_absolute_path": "var express=require(\"express\");\nvar app=express();\napp.get(\"/\", function(req, resp){\n    resp.sendFile(__dirname+\"/index.html\"); \n});\n\napp.listen(3333, function(){\n   console.log(\"peticion hecha\"); \n});", "ej_express_default_root": "var express=require(\"express\");\nvar app=express();\n\napp.use(express.static(__dirname));\n\napp.listen(3333, function(){\n   console.log(\"peticion hecha\"); \n});", "ej_express_relative_path": "var express=require(\"express\");\nvar app=express();\n\napp.use(express.static(__dirname));\n\napp.get(\"/\", function(req, resp){\n    resp.sendFile(\"index.html\"); \n});\n\napp.listen(3333, function(){\n   console.log(\"peticion hecha\"); \n});", "ej_express_rutas": "var express=require(\"express\");\nvar app=express();\napp.get(\"/\", function(req, resp){\n    resp.send(\"hola mother fucker\"); \n});\n\napp.listen(3333, function(){\n   console.log(\"peticion hecha\"); \n});", "ej_jade": "var express=require(\"express\");\nvar path=require(\"path\");\n\nvar app=express();\n\napp.use(express.static(path.join(__dirname, \"public\")));\n\napp.get(\"/\", function(req, resp){\n    resp.render(\"index.jade\"); \n});\n\napp.listen(3333, function(){\n   console.log(\"peticion hecha\"); \n});", "ej_jade_lista": "var express=require(\"express\");\nvar path=require(\"path\");\n\nvar app=express();\n\nvar objeto={\n    \"camisetas\":[\n        {\n            \"nombre\":\"super camisa\",\n            \"precio\":\"3520\"\n        },\n        {\n            \"nombre\":\"mini camisa\",\n            \"precio\":\"400\"\n        }\n    ]\n};\n\napp.use(express.static(path.join(__dirname, \"public\")));\n\napp.get(\"/\", function(req, resp){\n    resp.render(\"index.jade\", objeto); \n});\n\napp.listen(3333, function(){\n   console.log(\"peticion hecha\"); \n});", "ej_jade_parametros": "var express=require(\"express\");\nvar path=require(\"path\");\n\nvar app=express();\n\nvar objeto={\n    \"titulo\":\"mi pagina de porno\"\n};\n\napp.use(express.static(path.join(__dirname, \"public\")));\n\napp.get(\"/\", function(req, resp){\n    resp.render(\"index.jade\", objeto); \n});\n\napp.listen(3333, function(){\n   console.log(\"peticion hecha\"); \n});", "ej_jade_params": "var express=require(\"express\");\nvar path=require(\"path\");\n\nvar app=express();\n\napp.use(express.static(path.join(__dirname, \"public\")));\n\napp.get(\"/:subruta\", function(req, resp){\n    resp.render(\"index.jade\", {\"titulo\":req.params.subruta});\n});\n\napp.listen(3333, function(){\n   console.log(\"peticion hecha\"); \n});", "ej_jade_variables": "var express=require(\"express\");\nvar path=require(\"path\");\n\nvar app=express();\n\nvar objeto={\n    \"titulo\":\"mi pagina de porno\"\n};\n\napp.use(express.static(path.join(__dirname, \"public\")));\n\napp.get(\"/\", function(req, resp){\n    resp.render(\"index.jade\", objeto); \n});\n\napp.listen(3333, function(){\n   console.log(\"peticion hecha\"); \n});", "ej_model_crud": "var mongoose=require(\"mongoose\");\nvar Schema = mongoose.Schema;\n\n\nvar Pantalones = new Schema({\n    talla:String\n});\n\nmongoose.model(\"pantalones\", Pantalones);", "ej_mongoose_model": "var mongoose=require(\"mongoose\");\n\nvar Pantalones = new mongoose.Schema({\n    talla:String\n});\n\nmongoose.model(\"pantalones\", Pantalones);", "ej_read_file": "fs.readFile(pagina,function(error, data){\n    resp.write(data);\n    resp.end();\n});", "ej_rutas_web_enrutamiento": "var http=require(\"http\");\nvar fs=require(\"fs\");\n\nhttp.createServer(function(req, resp){\n    resp.writeHead(200, {\"Content-type\":\"text/html\"});\n    var pagina=null;\n    \n    switch(req.url){\n        case \"/\":\n            pagina=\"index.html\";\n            break;\n        case \"/dominio\":\n            pagina=\"dominio.html\";\n            break;\n        default:\n            pagina=\"error.html\";\n    }\n\n    req.on(\"close\", function(){\n        console.log(\"error\");\n    });\n\n    fs.readFile(pagina,function(error, data){\n        resp.write(data);\n        resp.end();\n    });\n}).listen(3333);", "ej_servidor_http": "var http=require(\"http\");\nhttp.createServer(function(req, resp){\n    resp.writeHead(200, {\"Content-type\":\"text/plain\"});\n    resp.write(\"Hi\");\n    resp.end();\n}).listen(3333);", "ej_servidor_tcp": "var net=require(\"net\");\nvar sys=require(\"sys\");\nvar server=net.createServer(function(conexion){\n    conexion.on(\"data\", function(dato){\n        sys.puts(\"se recibio el siguiente dato\"+dato);\n        conexion.write(\"dato recibido con exito\");\n    });\n    \n    conexion.on(\"close\", function(){\n        sys.print(\"se esta cerrando la comunicacion\");\n    });\n}).listen(8989);\nsys.puts(\"se llego al fin del programa\");", "ej_stdin": "var stdin=process.stdin;\nstdin.resume();\nstdin.on(\"data\", function(linea){\n    @\n});", "ej_stdout": "var stdout=process.stdout;\nstdout.write(\"@\");", "ej_switch_paginas": "switch(req.url){\n    case \"/\":\n        pagina=\"index.html\";\n        break;\n    case \"/dominio\":\n        pagina=\"dominio.html\";\n        break;\n    default:\n        pagina=\"error.html\";\n}", "eval": "eval(\"@expression\")", "exports": "module.exports.", "filename": "__filename", "for": "for(var i=0; i < @; i++){\n    @\n}", "fori": "for(var i=0;i<@;i++){\n    @\n}", "fun": "function(){\n    @\n}", "func": "function(){\n    @    \n}", "function": "function @name() {\n    \n}", "funr": "function(req, res){\n    @\n}", "get": "router.get(\"/@\", function(req, resp, next){\n    resp.render(\"@\");\n});", "input": "process.stdin.resume();\nprocess.stdin.on(\"data\", function(data) {\n    @\n});", "join": "path.join(\"@\", \"@\");", "json_to_object": "JSON.parse(fs.readFileSync(@path))", "list": "[@]", "new_buffer": "new Buffer(str, \"ascii\")", "new_class": "function @ClassName(){\n    this.@attr=@value;\n    return this;\n}", "objecto_to_json": "JSON.stringify(@)", "output": "process.stdout.write(@);  ", "pop": "pop()", "print": "console.log(\"@\");", "push": "push(@)", "readfile": "fs.readFile(\"@filepath\", function(err,data){\n    @\n});", "render": "resp.render(\"@.jade\");", "require": "require(\"@moduleName\")", "require_local": "var @1module=require(\"./@1module\");", "require_path": "var path=require(\"path\");", "requirem": "var @1package=require(\"@1package\");", "requirep": "var @1package=require(\"@1package\");", "setinterval": "setInterval(@func, @time);", "settimeout": "setTimeout(@func, @time);", "switch": "switch(@var){\n    case @case:\n        @code;\n        break;\n    default:\n        @code;\n}", "time": "console.time(\"@\");", "timeend": "console.timeEnd(\"@\");", "tojsonobject": "JSON.parse(@);", "tojsonstring": "JSON.stringify(@);", "try": "try{\n    @\n}catch(e){\n    @\n}", "try_finally": "try{\n    @\n}catch(e){\n    @\n}finally{\n    @\n}\n", "while": "while(@condition){\n    @body\n}"}