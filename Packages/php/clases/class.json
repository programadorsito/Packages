["__construct( string $cache [, mixed $search = null [, int $format = APC_ITER_ALL [, int $chunk_size = 100 [, int $list = APC_LIST_ACTIVE ]]]])", "current( void)", "getTotalCount( void)", "getTotalHits( void)", "getTotalSize( void)", "key( void)", "next( void)", "rewind( void)", "valid( void)", "append( Iterator $iterator)", "current( void)", "getArrayIterator( void)", "getInnerIterator( void)", "getIteratorIndex( void)", "key( void)", "next( void)", "rewind( void)", "valid( void)", "__construct( Traversable $iterator)", "current( void)", "getInnerIterator( void)", "key( void)", "next( void)", "rewind( void)", "valid( void)", "offsetExists( mixed $offset)", "offsetGet( mixed $offset)", "offsetSet( mixed $offset , mixed $value)", "offsetUnset( mixed $offset)", "append( mixed $value)", "asort( void)", "__construct([ mixed $array = array() [, int $flags = 0 ]])", "count( void)", "current( void)", "getArrayCopy( void)", "getFlags( void)", "key( void)", "ksort( void)", "natcasesort( void)", "natsort( void)", "next( void)", "offsetExists( string $index)", "offsetGet( string $index)", "offsetSet( string $index , string $newval)", "offsetUnset( string $index)", "rewind( void)", "seek( int $position)", "serialize( void)", "setFlags( string $flags)", "uasort( string $cmp_function)", "uksort( string $cmp_function)", "unserialize( string $serialized)", "valid( void)", "append( mixed $value)", "asort( void)", "count( void)", "exchangeArray( mixed $input)", "getArrayCopy( void)", "getFlags( void)", "getIterator( void)", "getIteratorClass( void)", "ksort( void)", "natcasesort( void)", "natsort( void)", "offsetExists( mixed $index)", "offsetGet( mixed $index)", "offsetSet( mixed $index , mixed $newval)", "offsetUnset( mixed $index)", "serialize( void)", "setFlags( int $flags)", "setIteratorClass( string $iterator_class)", "uasort( callable $cmp_function)", "uksort( callable $cmp_function)", "unserialize( string $serialized)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "CALL_TOSTRING ])", "count( void)", "current( void)", "getCache( void)", "getFlags( void)", "getInnerIterator( void)", "hasNext( void)", "key( void)", "next( void)", "offsetExists( string $index)", "offsetGet( string $index)", "offsetSet( string $index , string $newval)", "offsetUnset( string $index)", "rewind( void)", "setFlags( bitmask $flags)", "__toString( void)", "valid( void)", "availableFonts( void)", "availableSurfaces( void)", "statusToString( int $status)", "version( void)", "versionString( void)", "appendPath( CairoPath $path)", "arc( float $x , float $y , float $radius , float $angle1 , float $angle2)", "arcNegative( float $x , float $y , float $radius , float $angle1 , float $angle2)", "clip( void)", "clipExtents( void)", "clipPreserve( void)", "clipRectangleList( void)", "closePath( void)", "__construct( CairoSurface $surface)", "copyPage( void)", "copyPath( void)", "copyPathFlat( void)", "curveTo( float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3)", "deviceToUser( float $x , float $y)", "deviceToUserDistance( float $x , float $y)", "fill( void)", "fillExtents( void)", "fillPreserve( void)", "fontExtents( void)", "getAntialias( void)", "getCurrentPoint( void)", "getDash( void)", "getDashCount( void)", "getFillRule( void)", "getFontFace( void)", "getFontMatrix( void)", "getFontOptions( void)", "getGroupTarget( void)", "getLineCap( void)", "getLineJoin( void)", "getLineWidth( void)", "getMatrix( void)", "getMiterLimit( void)", "getOperator( void)", "getScaledFont( void)", "getSource( void)", "getTarget( void)", "getTolerance( void)", "glyphPath( array $glyphs)", "hasCurrentPoint( void)", "identityMatrix( void)", "inFill( string $x , string $y)", "inStroke( string $x , string $y)", "lineTo( string $x , string $y)", "mask( string $pattern)", "maskSurface( string $surface [, string $x [, string $y ]])", "moveTo( string $x , string $y)", "newPath( void)", "newSubPath( void)", "paint( void)", "paintWithAlpha( string $alpha)", "pathExtents( void)", "popGroup( void)", "popGroupToSource( void)", "pushGroup( void)", "pushGroupWithContent( string $content)", "rectangle( string $x , string $y , string $width , string $height)", "relCurveTo( string $x1 , string $y1 , string $x2 , string $y2 , string $x3 , string $y3)", "relLineTo( string $x , string $y)", "relMoveTo( string $x , string $y)", "resetClip( void)", "restore( void)", "rotate( string $angle)", "save( void)", "scale( string $x , string $y)", "selectFontFace( string $family [, string $slant [, string $weight ]])", "setAntialias([ string $antialias ])", "setDash( string $dashes [, string $offset ])", "setFillRule( string $setting)", "setFontFace( CairoFontFace $fontface)", "setFontMatrix( string $matrix)", "setFontOptions( string $fontoptions)", "setFontSize( string $size)", "setLineCap( string $setting)", "setLineJoin( string $setting)", "setLineWidth( string $width)", "setMatrix( string $matrix)", "setMiterLimit( string $limit)", "setOperator( string $setting)", "setScaledFont( string $scaledfont)", "setSource( string $pattern)", "setSourceRGB( string $red , string $green , string $blue)", "setSourceRGBA( string $red , string $green , string $blue , string $alpha)", "setSourceSurface( string $surface [, string $x [, string $y ]])", "setTolerance( string $tolerance)", "showPage( void)", "showText( string $text)", "status( void)", "stroke( void)", "strokeExtents( void)", "strokePreserve( void)", "textExtents( string $text)", "textPath( string $string)", "transform( string $matrix)", "translate( string $x , string $y)", "userToDevice( string $x , string $y)", "userToDeviceDistance( string $x , string $y)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "__construct( void)", "getType( void)", "status( void)", "__construct( void)", "equal( string $other)", "getAntialias( void)", "getHintMetrics( void)", "getHintStyle( void)", "getSubpixelOrder( void)", "hash( void)", "merge( string $other)", "setAntialias( string $antialias)", "setHintMetrics( string $hint_metrics)", "setHintStyle( string $hint_style)", "setSubpixelOrder( string $subpixel_order)", "status( void)", "strideForWidth( int $format , int $width)", "addColorStopRgb( string $offset , string $red , string $green , string $blue)", "addColorStopRgba( string $offset , string $red , string $green , string $blue , string $alpha)", "getColorStopCount( void)", "getColorStopRgba( string $index)", "getExtend( void)", "setExtend( int $extend)", "__construct( void)", "getMatrix( void)", "getType( void)", "setMatrix( string $matrix)", "status( void)", "__construct( int $format , int $width , int $height)", "createForData( string $data , int $format , int $width , int $height [, int $stride = -1 ])", "createFromPng( string $file)", "getData( void)", "getFormat( void)", "getHeight( void)", "getStride( void)", "getWidth( void)", "__construct( void)", "copyPage( void)", "createSimilar( CairoSurface $other , int $content , string $width , string $height)", "finish( void)", "flush( void)", "getContent( void)", "getDeviceOffset( void)", "getFontOptions( void)", "getType( void)", "markDirty( void)", "markDirtyRectangle( string $x , string $y , string $width , string $height)", "setDeviceOffset( string $x , string $y)", "setFallbackResolution( string $x , string $y)", "showPage( void)", "status( void)", "writeToPng( string $file)", "__construct( float $x0 , float $y0 , float $x1 , float $y1)", "getPoints( void)", "addColorStopRgb( string $offset , string $red , string $green , string $blue)", "addColorStopRgba( string $offset , string $red , string $green , string $blue , string $alpha)", "getColorStopCount( void)", "getColorStopRgba( string $index)", "getExtend( void)", "setExtend( int $extend)", "__construct([ float $xx = 1.0 [, float $yx = 0.0 [, float $xy = 0.0 [, float $yy = 1.0 [, float $x0 = 0.0 [, float $y0 = 0.0 ]]]]]])", "initIdentity( void)", "initRotate( float $radians)", "initScale( float $sx , float $sy)", "initTranslate( float $tx , float $ty)", "invert( void)", "multiply( CairoMatrix $matrix1 , CairoMatrix $matrix2)", "rotate( string $sx , string $sy)", "scale( float $sx , float $sy)", "transformDistance( string $dx , string $dy)", "transformPoint( string $dx , string $dy)", "translate( string $tx , string $ty)", "__construct( void)", "getMatrix( void)", "getType( void)", "setMatrix( string $matrix)", "status( void)", "__construct( string $file , float $width , float $height)", "setSize( string $width , string $height)", "__construct( void)", "copyPage( void)", "createSimilar( CairoSurface $other , int $content , string $width , string $height)", "finish( void)", "flush( void)", "getContent( void)", "getDeviceOffset( void)", "getFontOptions( void)", "getType( void)", "markDirty( void)", "markDirtyRectangle( string $x , string $y , string $width , string $height)", "setDeviceOffset( string $x , string $y)", "setFallbackResolution( string $x , string $y)", "showPage( void)", "status( void)", "writeToPng( string $file)", "__construct( string $file , float $width , float $height)", "dscBeginPageSetup( void)", "dscBeginSetup( void)", "dscComment( string $comment)", "getEps( void)", "getLevels( void)", "levelToString( int $level)", "restrictToLevel( string $level)", "setEps( string $level)", "setSize( string $width , string $height)", "__construct( void)", "copyPage( void)", "createSimilar( CairoSurface $other , int $content , string $width , string $height)", "finish( void)", "flush( void)", "getContent( void)", "getDeviceOffset( void)", "getFontOptions( void)", "getType( void)", "markDirty( void)", "markDirtyRectangle( string $x , string $y , string $width , string $height)", "setDeviceOffset( string $x , string $y)", "setFallbackResolution( string $x , string $y)", "showPage( void)", "status( void)", "writeToPng( string $file)", "__construct( float $x0 , float $y0 , float $r0 , float $x1 , float $y1 , float $r1)", "getCircles( void)", "addColorStopRgb( string $offset , string $red , string $green , string $blue)", "addColorStopRgba( string $offset , string $red , string $green , string $blue , string $alpha)", "getColorStopCount( void)", "getColorStopRgba( string $index)", "getExtend( void)", "setExtend( int $extend)", "__construct( CairoFontFace $font_face , CairoMatrix $matrix , CairoMatrix $ctm , CairoFontOptions $options)", "extents( void)", "getCtm( void)", "getFontFace( void)", "getFontMatrix( void)", "getFontOptions( void)", "getScaleMatrix( void)", "getType( void)", "glyphExtents( string $glyphs)", "status( void)", "textExtents( string $text)", "__construct( float $red , float $green , float $blue [, float $alpha = 0 ])", "getRgba( void)", "__construct( void)", "getMatrix( void)", "getType( void)", "setMatrix( string $matrix)", "status( void)", "__construct( void)", "copyPage( void)", "createSimilar( CairoSurface $other , int $content , string $width , string $height)", "finish( void)", "flush( void)", "getContent( void)", "getDeviceOffset( void)", "getFontOptions( void)", "getType( void)", "markDirty( void)", "markDirtyRectangle( string $x , string $y , string $width , string $height)", "setDeviceOffset( string $x , string $y)", "setFallbackResolution( string $x , string $y)", "showPage( void)", "status( void)", "writeToPng( string $file)", "__construct( CairoSurface $surface)", "getExtend( void)", "getFilter( void)", "getSurface( void)", "setExtend( int $extend)", "setFilter( string $filter)", "__construct( void)", "getMatrix( void)", "getType( void)", "setMatrix( string $matrix)", "status( void)", "__construct( string $file , float $width , float $height)", "getVersions( void)", "restrictToVersion( string $version)", "versionToString( int $version)", "__construct( void)", "copyPage( void)", "createSimilar( CairoSurface $other , int $content , string $width , string $height)", "finish( void)", "flush( void)", "getContent( void)", "getDeviceOffset( void)", "getFontOptions( void)", "getType( void)", "markDirty( void)", "markDirtyRectangle( string $x , string $y , string $width , string $height)", "setDeviceOffset( string $x , string $y)", "setFallbackResolution( string $x , string $y)", "showPage( void)", "status( void)", "writeToPng( string $file)", "accept( void)", "accept( void)", "__construct( Iterator $iterator)", "current( void)", "getInnerIterator( void)", "key( void)", "next( void)", "rewind( void)", "valid( void)", "__construct( string $pathname)", "get( string $key)", "__construct( void)", "bind( Closure $closure , object $newthis [, mixed $newscope = &quot;static&quot; ])", "bindTo( object $newthis [, mixed $newscope = &quot;static&quot; ])", "asort( array &$arr [, int $sort_flag ])", "compare( string $str1 , string $str2)", "create( string $locale)", "getAttribute( int $attr)", "getErrorCode( void)", "getErrorMessage( void)", "getLocale( int $type)", "getSortKey( string $str)", "getStrength( void)", "setAttribute( int $attr , int $val)", "setStrength( int $strength)", "sortWithSortKeys( array &$arr)", "sort( array &$arr [, int $sort_flag ])", "isGarbage( void)", "setGarbage( void)", "chunk( integer $size , boolean $preserve)", "count( void)", "extend( string $class)", "from( Closure $run [, Closure $construct [, array $args ]])", "getTerminationInfo( void)", "isRunning( void)", "isTerminated( void)", "isWaiting( void)", "lock( void)", "merge( mixed $from [, mixed $overwrite ])", "notify( void)", "pop( void)", "run( void)", "shift( void)", "synchronized( Closure $block [, mixed $... ])", "unlock( void)", "wait([ integer $timeout ])", "COM( string $module_name [, mixed $server_name [, int $codepage [, string $typelib ]]])", "broadcast( long $condition)", "create( void)", "destroy( long $condition)", "signal( long $condition)", "wait( long $condition , long $mutex [, long $timeout ])", "count([ int $mode = COUNT_NORMAL ])", "__construct( string $filename [, string $mimetype [, string $postname ]])", "getFilename( void)", "getMimeType( void)", "getPostFilename( void)", "setMimeType( string $mime)", "setPostFilename( string $postname)", "__wakeup( void)", "createFromDateString( string $time)", "format( string $format)", "add( DateInterval $interval)", "createFromFormat( string $format , string $time [, DateTimeZone $timezone ])", "getLastErrors( void)", "modify( string $modify)", "__set_state( array $array)", "setDate( int $year , int $month , int $day)", "setISODate( int $year , int $week [, int $day = 1 ])", "setTime( int $hour , int $minute [, int $second = 0 ])", "setTimestamp( int $unixtimestamp)", "setTimezone( DateTimeZone $timezone)", "sub( DateInterval $interval)", "diff( DateTimeInterface $datetime2 [, bool $absolute = false ])", "format( string $format)", "getOffset( void)", "getTimestamp( void)", "getTimezone( void)", "__wakeup( void)", "add( DateInterval $interval)", "createFromFormat( string $format , string $time [, DateTimeZone $timezone ])", "createFromMutable( DateTime $datetime)", "getLastErrors( void)", "modify( string $modify)", "__set_state( array $array)", "setDate( int $year , int $month , int $day)", "setISODate( int $year , int $week [, int $day = 1 ])", "setTime( int $hour , int $minute [, int $second = 0 ])", "setTimestamp( int $unixtimestamp)", "setTimezone( DateTimeZone $timezone)", "sub( DateInterval $interval)", "diff( DateTimeInterface $datetime2 [, bool $absolute = false ])", "format( string $format)", "getOffset( void)", "getTimestamp( void)", "getTimezone( void)", "__wakeup( void)", "diff( DateTimeInterface $datetime2 [, bool $absolute = false ])", "format( string $format)", "getOffset( void)", "getTimestamp( void)", "getTimezone( void)", "__wakeup( void)", "getLocation( void)", "getName( void)", "getOffset( DateTime $datetime)", "getTransitions([ int $timestamp_begin [, int $timestamp_end ]])", "listAbbreviations( void)", "ALL [, string $country = NULL ]])", "close([ resource $dir_handle ])", "read([ resource $dir_handle ])", "rewind([ resource $dir_handle ])", "current( void)", "getATime( void)", "getBasename([ string $suffix ])", "getCTime( void)", "getExtension( void)", "getFilename( void)", "getGroup( void)", "getInode( void)", "getMTime( void)", "getOwner( void)", "getPath( void)", "getPathname( void)", "getPerms( void)", "getSize( void)", "getType( void)", "isDir( void)", "isDot( void)", "isExecutable( void)", "isFile( void)", "isLink( void)", "isReadable( void)", "isWritable( void)", "key( void)", "next( void)", "rewind( void)", "seek( int $position)", "__toString( void)", "valid( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "__construct( string $name [, string $value ])", "isId( void)", "appendChild( DOMNode $newnode)", "C14N([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "C14NFile( string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "cloneNode([ bool $deep ])", "getLineNo( void)", "getNodePath( void)", "hasAttributes( void)", "hasChildNodes( void)", "insertBefore( DOMNode $newnode [, DOMNode $refnode ])", "isDefaultNamespace( string $namespaceURI)", "isSameNode( DOMNode $node)", "isSupported( string $feature , string $version)", "lookupNamespaceURI( string $prefix)", "lookupPrefix( string $namespaceURI)", "normalize( void)", "removeChild( DOMNode $oldnode)", "replaceChild( DOMNode $newnode , DOMNode $oldnode)", "isWhitespaceInElementContent( void)", "splitText( int $offset)", "appendData( string $data)", "deleteData( int $offset , int $count)", "insertData( int $offset , string $data)", "replaceData( int $offset , int $count , string $data)", "substringData( int $offset , int $count)", "appendChild( DOMNode $newnode)", "C14N([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "C14NFile( string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "cloneNode([ bool $deep ])", "getLineNo( void)", "getNodePath( void)", "hasAttributes( void)", "hasChildNodes( void)", "insertBefore( DOMNode $newnode [, DOMNode $refnode ])", "isDefaultNamespace( string $namespaceURI)", "isSameNode( DOMNode $node)", "isSupported( string $feature , string $version)", "lookupNamespaceURI( string $prefix)", "lookupPrefix( string $namespaceURI)", "normalize( void)", "removeChild( DOMNode $oldnode)", "replaceChild( DOMNode $newnode , DOMNode $oldnode)", "__construct([ string $value ])", "appendData( string $data)", "deleteData( int $offset , int $count)", "insertData( int $offset , string $data)", "replaceData( int $offset , int $count , string $data)", "substringData( int $offset , int $count)", "appendChild( DOMNode $newnode)", "C14N([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "C14NFile( string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "cloneNode([ bool $deep ])", "getLineNo( void)", "getNodePath( void)", "hasAttributes( void)", "hasChildNodes( void)", "insertBefore( DOMNode $newnode [, DOMNode $refnode ])", "isDefaultNamespace( string $namespaceURI)", "isSameNode( DOMNode $node)", "isSupported( string $feature , string $version)", "lookupNamespaceURI( string $prefix)", "lookupPrefix( string $namespaceURI)", "normalize( void)", "removeChild( DOMNode $oldnode)", "replaceChild( DOMNode $newnode , DOMNode $oldnode)", "__construct([ string $version [, string $encoding ]])", "createAttribute( string $name)", "createAttributeNS( string $namespaceURI , string $qualifiedName)", "createCDATASection( string $data)", "createComment( string $data)", "createDocumentFragment( void)", "createElement( string $name [, string $value ])", "createElementNS( string $namespaceURI , string $qualifiedName [, string $value ])", "createEntityReference( string $name)", "createProcessingInstruction( string $target [, string $data ])", "createTextNode( string $content)", "getElementById( string $elementId)", "getElementsByTagName( string $name)", "getElementsByTagNameNS( string $namespaceURI , string $localName)", "importNode( DOMNode $importedNode [, bool $deep ])", "load( string $filename [, int $options = 0 ])", "loadHTML( string $source [, int $options = 0 ])", "loadHTMLFile( string $filename [, int $options = 0 ])", "loadXML( string $source [, int $options = 0 ])", "normalizeDocument( void)", "registerNodeClass( string $baseclass , string $extendedclass)", "relaxNGValidate( string $filename)", "relaxNGValidateSource( string $source)", "save( string $filename [, int $options ])", "saveHTML([ DOMNode $node = NULL ])", "saveHTMLFile( string $filename)", "saveXML([ DOMNode $node [, int $options ]])", "schemaValidate( string $filename [, int $flags ])", "schemaValidateSource( string $source [, int $flags ])", "validate( void)", "xinclude([ int $options ])", "appendChild( DOMNode $newnode)", "C14N([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "C14NFile( string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "cloneNode([ bool $deep ])", "getLineNo( void)", "getNodePath( void)", "hasAttributes( void)", "hasChildNodes( void)", "insertBefore( DOMNode $newnode [, DOMNode $refnode ])", "isDefaultNamespace( string $namespaceURI)", "isSameNode( DOMNode $node)", "isSupported( string $feature , string $version)", "lookupNamespaceURI( string $prefix)", "lookupPrefix( string $namespaceURI)", "normalize( void)", "removeChild( DOMNode $oldnode)", "replaceChild( DOMNode $newnode , DOMNode $oldnode)", "appendXML( string $data)", "appendChild( DOMNode $newnode)", "C14N([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "C14NFile( string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "cloneNode([ bool $deep ])", "getLineNo( void)", "getNodePath( void)", "hasAttributes( void)", "hasChildNodes( void)", "insertBefore( DOMNode $newnode [, DOMNode $refnode ])", "isDefaultNamespace( string $namespaceURI)", "isSameNode( DOMNode $node)", "isSupported( string $feature , string $version)", "lookupNamespaceURI( string $prefix)", "lookupPrefix( string $namespaceURI)", "normalize( void)", "removeChild( DOMNode $oldnode)", "replaceChild( DOMNode $newnode , DOMNode $oldnode)", "appendChild( DOMNode $newnode)", "C14N([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "C14NFile( string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "cloneNode([ bool $deep ])", "getLineNo( void)", "getNodePath( void)", "hasAttributes( void)", "hasChildNodes( void)", "insertBefore( DOMNode $newnode [, DOMNode $refnode ])", "isDefaultNamespace( string $namespaceURI)", "isSameNode( DOMNode $node)", "isSupported( string $feature , string $version)", "lookupNamespaceURI( string $prefix)", "lookupPrefix( string $namespaceURI)", "normalize( void)", "removeChild( DOMNode $oldnode)", "replaceChild( DOMNode $newnode , DOMNode $oldnode)", "__construct( string $name [, string $value [, string $namespaceURI ]])", "getAttribute( string $name)", "getAttributeNode( string $name)", "getAttributeNodeNS( string $namespaceURI , string $localName)", "getAttributeNS( string $namespaceURI , string $localName)", "getElementsByTagName( string $name)", "getElementsByTagNameNS( string $namespaceURI , string $localName)", "hasAttribute( string $name)", "hasAttributeNS( string $namespaceURI , string $localName)", "removeAttribute( string $name)", "removeAttributeNode( DOMAttr $oldnode)", "removeAttributeNS( string $namespaceURI , string $localName)", "setAttribute( string $name , string $value)", "setAttributeNode( DOMAttr $attr)", "setAttributeNodeNS( DOMAttr $attr)", "setAttributeNS( string $namespaceURI , string $qualifiedName , string $value)", "setIdAttribute( string $name , bool $isId)", "setIdAttributeNode( DOMAttr $attr , bool $isId)", "setIdAttributeNS( string $namespaceURI , string $localName , bool $isId)", "appendChild( DOMNode $newnode)", "C14N([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "C14NFile( string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "cloneNode([ bool $deep ])", "getLineNo( void)", "getNodePath( void)", "hasAttributes( void)", "hasChildNodes( void)", "insertBefore( DOMNode $newnode [, DOMNode $refnode ])", "isDefaultNamespace( string $namespaceURI)", "isSameNode( DOMNode $node)", "isSupported( string $feature , string $version)", "lookupNamespaceURI( string $prefix)", "lookupPrefix( string $namespaceURI)", "normalize( void)", "removeChild( DOMNode $oldnode)", "replaceChild( DOMNode $newnode , DOMNode $oldnode)", "appendChild( DOMNode $newnode)", "C14N([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "C14NFile( string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "cloneNode([ bool $deep ])", "getLineNo( void)", "getNodePath( void)", "hasAttributes( void)", "hasChildNodes( void)", "insertBefore( DOMNode $newnode [, DOMNode $refnode ])", "isDefaultNamespace( string $namespaceURI)", "isSameNode( DOMNode $node)", "isSupported( string $feature , string $version)", "lookupNamespaceURI( string $prefix)", "lookupPrefix( string $namespaceURI)", "normalize( void)", "removeChild( DOMNode $oldnode)", "replaceChild( DOMNode $newnode , DOMNode $oldnode)", "__construct( string $name)", "appendChild( DOMNode $newnode)", "C14N([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "C14NFile( string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "cloneNode([ bool $deep ])", "getLineNo( void)", "getNodePath( void)", "hasAttributes( void)", "hasChildNodes( void)", "insertBefore( DOMNode $newnode [, DOMNode $refnode ])", "isDefaultNamespace( string $namespaceURI)", "isSameNode( DOMNode $node)", "isSupported( string $feature , string $version)", "lookupNamespaceURI( string $prefix)", "lookupPrefix( string $namespaceURI)", "normalize( void)", "removeChild( DOMNode $oldnode)", "replaceChild( DOMNode $newnode , DOMNode $oldnode)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "__construct( void)", "createDocument([ string $namespaceURI = NULL [, string $qualifiedName = NULL [, DOMDocumentType $doctype = NULL ]]])", "createDocumentType([ string $qualifiedName = NULL [, string $publicId = NULL [, string $systemId = NULL ]]])", "hasFeature( string $feature , string $version)", "getNamedItem( string $name)", "getNamedItemNS( string $namespaceURI , string $localName)", "item( int $index)", "appendChild( DOMNode $newnode)", "C14N([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "C14NFile( string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "cloneNode([ bool $deep ])", "getLineNo( void)", "getNodePath( void)", "hasAttributes( void)", "hasChildNodes( void)", "insertBefore( DOMNode $newnode [, DOMNode $refnode ])", "isDefaultNamespace( string $namespaceURI)", "isSameNode( DOMNode $node)", "isSupported( string $feature , string $version)", "lookupNamespaceURI( string $prefix)", "lookupPrefix( string $namespaceURI)", "normalize( void)", "removeChild( DOMNode $oldnode)", "replaceChild( DOMNode $newnode , DOMNode $oldnode)", "item( int $index)", "appendChild( DOMNode $newnode)", "C14N([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "C14NFile( string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "cloneNode([ bool $deep ])", "getLineNo( void)", "getNodePath( void)", "hasAttributes( void)", "hasChildNodes( void)", "insertBefore( DOMNode $newnode [, DOMNode $refnode ])", "isDefaultNamespace( string $namespaceURI)", "isSameNode( DOMNode $node)", "isSupported( string $feature , string $version)", "lookupNamespaceURI( string $prefix)", "lookupPrefix( string $namespaceURI)", "normalize( void)", "removeChild( DOMNode $oldnode)", "replaceChild( DOMNode $newnode , DOMNode $oldnode)", "__construct( string $name [, string $value ])", "appendChild( DOMNode $newnode)", "C14N([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "C14NFile( string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "cloneNode([ bool $deep ])", "getLineNo( void)", "getNodePath( void)", "hasAttributes( void)", "hasChildNodes( void)", "insertBefore( DOMNode $newnode [, DOMNode $refnode ])", "isDefaultNamespace( string $namespaceURI)", "isSameNode( DOMNode $node)", "isSupported( string $feature , string $version)", "lookupNamespaceURI( string $prefix)", "lookupPrefix( string $namespaceURI)", "normalize( void)", "removeChild( DOMNode $oldnode)", "replaceChild( DOMNode $newnode , DOMNode $oldnode)", "isWhitespaceInElementContent( void)", "splitText( int $offset)", "appendChild( DOMNode $newnode)", "C14N([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "C14NFile( string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]])", "cloneNode([ bool $deep ])", "getLineNo( void)", "getNodePath( void)", "hasAttributes( void)", "hasChildNodes( void)", "insertBefore( DOMNode $newnode [, DOMNode $refnode ])", "isDefaultNamespace( string $namespaceURI)", "isSameNode( DOMNode $node)", "isSupported( string $feature , string $version)", "lookupNamespaceURI( string $prefix)", "lookupPrefix( string $namespaceURI)", "normalize( void)", "removeChild( DOMNode $oldnode)", "replaceChild( DOMNode $newnode , DOMNode $oldnode)", "__construct( DOMDocument $doc)", "evaluate( string $expression [, DOMNode $contextnode [, bool $registerNodeNS = true ]])", "query( string $expression [, DOMNode $contextnode [, bool $registerNodeNS = true ]])", "registerNamespace( string $prefix , string $namespaceURI)", "registerPhpFunctions([ mixed $restrict ])", "DOTNET( string $assembly_name , string $class_name [, int $codepage ])", "current( void)", "key( void)", "next( void)", "rewind( void)", "valid( void)", "getSeverity( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "backend( void)", "depth( void)", "embeddableBackends( void)", "feedSignal( int $signum)", "feedSignalEvent( int $signum)", "iteration( void)", "now( void)", "nowUpdate( void)", "recommendedBackends( void)", "resume( void)", "run([ int $flags ])", "sleep( double $seconds)", "stop([ int $how ])", "supportedBackends( void)", "suspend( void)", "time( void)", "verify( void)", "__construct( callable $callback [, mixed $data [, int $priority ]])", "createStopped( string $callback [, string $data [, string $priority ]])", "clear( void)", "__construct( void)", "feed( int $revents)", "getLoop( void)", "invoke( int $revents)", "keepalive([ bool $value ])", "setCallback( callable $callback)", "start( void)", "stop( void)", "__construct( int $pid , bool $trace , callable $callback [, mixed $data = NULL [, int $priority = 0 ]])", "createStopped( int $pid , bool $trace , callable $callback [, mixed $data [, int $priority ]])", "set( int $pid , bool $trace)", "clear( void)", "__construct( void)", "feed( int $revents)", "getLoop( void)", "invoke( int $revents)", "keepalive([ bool $value ])", "setCallback( callable $callback)", "start( void)", "stop( void)", "__construct( object $other [, callable $callback [, mixed $data [, int $priority ]]])", "createStopped( object $other [, callable $callback [, mixed $data [, int $priority ]]])", "set( object $other)", "sweep( void)", "clear( void)", "__construct( void)", "feed( int $revents)", "getLoop( void)", "invoke( int $revents)", "keepalive([ bool $value ])", "setCallback( callable $callback)", "start( void)", "stop( void)", "add([ double $timeout ])", "addSignal([ double $timeout ])", "addTimer([ double $timeout ])", "__construct( EventBase $base , mixed $fd , int $what , callable $cb [, mixed $arg = NULL ])", "del( void)", "delSignal( void)", "delTimer( void)", "free( void)", "getSupportedMethods( void)", "pending( int $flags)", "set( EventBase $base , mixed $fd [, int $what [, callable $cb [, mixed $arg ]]])", "setPriority( int $priority)", "setTimer( EventBase $base , callable $cb [, mixed $arg ])", "signal( EventBase $base , int $signum , callable $cb [, mixed $arg ])", "timer( EventBase $base , callable $cb [, mixed $arg ])", "__construct([ EventConfig $cfg ])", "dispatch( void)", "exit([ double $timeout ])", "getFeatures( void)", "getMethod([ EventConfig $cfg ])", "getTimeOfDayCached( void)", "gotExit( void)", "gotStop( void)", "loop([ int $flags ])", "priorityInit( int $n_priorities)", "reInit( void)", "stop( void)", "add( string $data)", "addBuffer( EventBuffer $buf)", "appendFrom( EventBuffer $buf , int $len)", "__construct( void)", "copyout( string &$data , int $max_bytes)", "drain( int $len)", "enableLocking( void)", "expand( int $len)", "freeze( bool $at_front)", "lock( void)", "prepend( string $data)", "prependBuffer( EventBuffer $buf)", "pullup( int $size)", "read( int $max_bytes)", "read( mixed $fd , int $howmuch)", "readLine( int $eol_style)", "search( string $what [, int $start = -1 [, int $end = -1 ]])", "EOL_ANY ]])", "substr( int $start [, int $length ])", "unfreeze( bool $at_front)", "unlock( void)", "write( mixed $fd [, int $howmuch ])", "connect( string $addr)", "AF_UNSPEC ])", "__construct( EventBase $base [, mixed $socket = NULL [, int $options = 0 [, callable $readcb = NULL [, callable $writecb = NULL [, callable $eventcb = NULL ]]]]])", "createPair( EventBase $base [, int $options = 0 ])", "disable( int $events)", "enable( int $events)", "free( void)", "getDnsErrorString( void)", "getEnabled( void)", "getInput( void)", "getOutput( void)", "read( int $size)", "readBuffer( EventBuffer $buf)", "setCallbacks( callable $readcb , callable $writecb , callable $eventcb [, string $arg ])", "setPriority( int $priority)", "setTimeouts( float $timeout_read , float $timeout_write)", "setWatermark( int $events , int $lowmark , int $highmark)", "sslError( void)", "sslFilter( EventBase $base , EventBufferEvent $underlying , EventSslContext $ctx , int $state [, int $options = 0 ])", "sslRenegotiate( void)", "sslSocket( EventBase $base , mixed $socket , EventSslContext $ctx , int $state [, int $options ])", "write( string $data)", "writeBuffer( EventBuffer $buf)", "avoidMethod( int $method)", "__construct( void)", "requireFeatures( int $feature)", "setMaxDispatchInterval( int $max_interval , int $max_callbacks , int $min_priority)", "addNameserverIp( string $ip)", "addSearch( string $domain)", "clearSearch( void)", "__construct( EventBase $base , bool $initialize)", "countNameservers( void)", "loadHosts( string $hosts)", "parseResolvConf( int $flags , string $filename)", "setOption( string $option , string $value)", "setSearchNdots( int $ndots)", "accept( mixed $socket)", "addServerAlias( string $alias)", "bind( string $address , int $port)", "__construct( EventBase $base [, EventSslContext $ctx = NULL ])", "removeServerAlias( string $alias)", "setAllowedMethods( int $methods)", "setCallback( string $path , string $cb [, string $arg ])", "setDefaultCallback( string $cb [, string $arg ])", "setMaxBodySize( int $value)", "setMaxHeadersSize( int $value)", "setTimeout( int $value)", "__construct( EventBase $base , EventDnsBase $dns_base , string $address , int $port [, EventSslContext $ctx = NULL ])", "getBase( void)", "getPeer( string &$address , int &$port)", "makeRequest( EventHttpRequest $req , int $type , string $uri)", "setCloseCallback( callable $callback [, mixed $data ])", "setLocalAddress( string $address)", "setLocalPort( int $port)", "setMaxBodySize( string $max_size)", "setMaxHeadersSize( string $max_size)", "setRetries( int $retries)", "setTimeout( int $timeout)", "addHeader( string $key , string $value , int $type)", "cancel( void)", "clearHeaders( void)", "closeConnection( void)", "__construct( callable $callback [, mixed $data = NULL ])", "findHeader( string $key , string $type)", "free( void)", "closeConnection( void)", "getCommand( void)", "closeConnection( void)", "getHost( void)", "getInputBuffer( void)", "getInputHeaders( void)", "getOutputBuffer( void)", "getOutputHeaders( void)", "getResponseCode( void)", "getUri( void)", "removeHeader( string $key , string $type)", "sendError( int $error [, string $reason = NULL ])", "sendReply( int $code , string $reason [, EventBuffer $buf ])", "sendReplyChunk( EventBuffer $buf)", "sendReplyEnd( void)", "sendReplyStart( int $code , string $reason)", "__construct( EventBase $base , callable $cb , mixed $data , int $flags , int $backlog , mixed $target)", "disable( void)", "enable( void)", "getBase( void)", "getSocketName( string &$address [, mixed &$port ])", "setCallback( callable $cb [, mixed $arg = NULL ])", "setErrorCallback( string $cb)", "__construct( string $method , string $options)", "__construct( void)", "getLastSocketErrno([ mixed $socket = NULL ])", "getLastSocketError([ mixed $socket ])", "getSocketFd( mixed $socket)", "getSocketName( mixed $socket , string &$address [, mixed &$port ])", "setSocketOption( mixed $socket , int $level , int $optname , mixed $optval)", "sslRandPoll( void)", "__construct( callable $callback [, mixed $data = NULL [, int $priority = 0 ]])", "createStopped( string $callback [, string $data [, string $priority ]])", "clear( void)", "__construct( void)", "feed( int $revents)", "getLoop( void)", "invoke( int $revents)", "keepalive([ bool $value ])", "setCallback( callable $callback)", "start( void)", "stop( void)", "__construct( callable $callback [, mixed $data [, int $priority ]])", "createStopped( string $callback [, mixed $data [, int $priority ]])", "clear( void)", "__construct( void)", "feed( int $revents)", "getLoop( void)", "invoke( int $revents)", "keepalive([ bool $value ])", "setCallback( callable $callback)", "start( void)", "stop( void)", "__construct( mixed $fd , int $events , callable $callback [, mixed $data [, int $priority ]])", "createStopped( mixed $fd , int $events , callable $callback [, mixed $data = NULL [, int $priority = 0 ]])", "set( mixed $fd , int $events)", "clear( void)", "__construct( void)", "feed( int $revents)", "getLoop( void)", "invoke( int $revents)", "keepalive([ bool $value ])", "setCallback( callable $callback)", "start( void)", "stop( void)", "backend( void)", "check( string $callback [, string $data [, string $priority ]])", "child( string $pid , string $trace , string $callback [, string $data [, string $priority ]])", "__construct([ int $flags [, mixed $data = NULL [, double $io_interval = 0.0 [, double $timeout_interval = 0.0 ]]]])", "FLAG_AUTO [, mixed $data = NULL [, double $io_interval = 0. [, double $timeout_interval = 0. ]]]])", "embed( string $other [, string $callback [, string $data [, string $priority ]]])", "fork( callable $callback [, mixed $data = NULL [, int $priority = 0 ]])", "idle( callable $callback [, mixed $data = NULL [, int $priority = 0 ]])", "invokePending( void)", "io( mixed $fd , int $events , callable $callback [, mixed $data = NULL [, int $priority = 0 ]])", "loopFork( void)", "now( void)", "nowUpdate( void)", "periodic( double $offset , double $interval , callable $callback [, mixed $data = NULL [, int $priority = 0 ]])", "prepare( callable $callback [, mixed $data = NULL [, int $priority = 0 ]])", "resume( void)", "run([ int $flags = 0 ])", "signal( int $signum , callable $callback [, mixed $data = NULL [, int $priority = 0 ]])", "stat( string $path , double $interval , callable $callback [, mixed $data = NULL [, int $priority = 0 ]])", "stop([ int $how ])", "suspend( void)", "timer( double $after , double $repeat , callable $callback [, mixed $data = NULL [, int $priority = 0 ]])", "verify( void)", "again( void)", "at( void)", "__construct( double $offset , string $interval , callable $reschedule_cb , callable $callback [, mixed $data = NULL [, int $priority = 0 ]])", "createStopped( double $offset , double $interval , callable $reschedule_cb , callable $callback [, mixed $data = NULL [, int $priority = 0 ]])", "set( double $offset , double $interval)", "clear( void)", "__construct( void)", "feed( int $revents)", "getLoop( void)", "invoke( int $revents)", "keepalive([ bool $value ])", "setCallback( callable $callback)", "start( void)", "stop( void)", "__construct( string $callback [, string $data [, string $priority ]])", "createStopped( callable $callback [, mixed $data = NULL [, int $priority = 0 ]])", "clear( void)", "__construct( void)", "feed( int $revents)", "getLoop( void)", "invoke( int $revents)", "keepalive([ bool $value ])", "setCallback( callable $callback)", "start( void)", "stop( void)", "__construct( int $signum , callable $callback [, mixed $data = NULL [, int $priority = 0 ]])", "createStopped( int $signum , callable $callback [, mixed $data = NULL [, int $priority = 0 ]])", "set( int $signum)", "clear( void)", "__construct( void)", "feed( int $revents)", "getLoop( void)", "invoke( int $revents)", "keepalive([ bool $value ])", "setCallback( callable $callback)", "start( void)", "stop( void)", "attr( void)", "__construct( string $path , double $interval , callable $callback [, mixed $data = NULL [, int $priority = 0 ]])", "createStopped( string $path , double $interval , callable $callback [, mixed $data = NULL [, int $priority = 0 ]])", "prev( void)", "set( string $path , double $interval)", "stat( void)", "clear( void)", "__construct( void)", "feed( int $revents)", "getLoop( void)", "invoke( int $revents)", "keepalive([ bool $value ])", "setCallback( callable $callback)", "start( void)", "stop( void)", "again( void)", "__construct( double $after , double $repeat , callable $callback [, mixed $data = NULL [, int $priority = 0 ]])", "createStopped( double $after , double $repeat , callable $callback [, mixed $data = NULL [, int $priority = 0 ]])", "set( double $after , double $repeat)", "clear( void)", "__construct( void)", "feed( int $revents)", "getLoop( void)", "invoke( int $revents)", "keepalive([ bool $value ])", "setCallback( callable $callback)", "start( void)", "stop( void)", "clear( void)", "__construct( void)", "feed( int $revents)", "getLoop( void)", "invoke( int $revents)", "keepalive([ bool $value ])", "setCallback( callable $callback)", "start( void)", "stop( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "__construct( int $from_neuron , int $to_neuron , float $weight)", "getFromNeuron( void)", "getToNeuron( void)", "getWeight( void)", "setWeight( float $weight)", "KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS ])", "current( void)", "getFlags( void)", "key( void)", "next( void)", "rewind( void)", "setFlags([ int $flags ])", "current( void)", "getATime( void)", "getBasename([ string $suffix ])", "getCTime( void)", "getExtension( void)", "getFilename( void)", "getGroup( void)", "getInode( void)", "getMTime( void)", "getOwner( void)", "getPath( void)", "getPathname( void)", "getPerms( void)", "getSize( void)", "getType( void)", "isDir( void)", "isDot( void)", "isExecutable( void)", "isFile( void)", "isLink( void)", "isReadable( void)", "isWritable( void)", "key( void)", "next( void)", "rewind( void)", "seek( int $position)", "__toString( void)", "valid( void)", "accept( void)", "__construct( Iterator $iterator)", "current( void)", "getInnerIterator( void)", "key( void)", "next( void)", "rewind( void)", "valid( void)", "addOptions( int $options)", "addServer([ string $host = 127.0.0.1 [, int $port = 4730 ]])", "addServers([ string $servers = 127.0.0.1:4730 ])", "addTask( string $function_name , string $workload [, mixed &$context [, string $unique ]])", "addTaskBackground( string $function_name , string $workload [, mixed &$context [, string $unique ]])", "addTaskHigh( string $function_name , string $workload [, mixed &$context [, string $unique ]])", "addTaskHighBackground( string $function_name , string $workload [, mixed &$context [, string $unique ]])", "addTaskLow( string $function_name , string $workload [, mixed &$context [, string $unique ]])", "addTaskLowBackground( string $function_name , string $workload [, mixed &$context [, string $unique ]])", "addTaskStatus( string $job_handle [, string &$context ])", "clearCallbacks( void)", "clone( void)", "__construct( void)", "context( void)", "data( void)", "do( string $function_name , string $workload [, string $unique ])", "doBackground( string $function_name , string $workload [, string $unique ])", "doHigh( string $function_name , string $workload [, string $unique ])", "doHighBackground( string $function_name , string $workload [, string $unique ])", "doJobHandle( void)", "doLow( string $function_name , string $workload [, string $unique ])", "doLowBackground( string $function_name , string $workload [, string $unique ])", "doNormal( string $function_name , string $workload [, string $unique ])", "doStatus( void)", "echo( string $workload)", "error( void)", "getErrno( void)", "jobStatus( string $job_handle)", "ping( string $workload)", "removeOptions( int $options)", "returnCode( void)", "runTasks( void)", "setClientCallback( callable $callback)", "setCompleteCallback( callable $callback)", "setContext( string $context)", "setCreatedCallback( string $callback)", "setData( string $data)", "setDataCallback( callable $callback)", "setExceptionCallback( callable $callback)", "setFailCallback( callable $callback)", "setOptions( int $options)", "setStatusCallback( callable $callback)", "setTimeout( int $timeout)", "setWarningCallback( callable $callback)", "setWorkloadCallback( callable $callback)", "timeout( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "complete( string $result)", "__construct( void)", "data( string $data)", "exception( string $exception)", "fail( void)", "functionName( void)", "handle( void)", "returnCode( void)", "sendComplete( string $result)", "sendData( string $data)", "sendException( string $exception)", "sendFail( void)", "sendStatus( int $numerator , int $denominator)", "sendWarning( string $warning)", "setReturn( int $gearman_return_t)", "status( int $numerator , int $denominator)", "unique( void)", "warning( string $warning)", "workload( void)", "workloadSize( void)", "__construct( void)", "create( void)", "data( void)", "dataSize( void)", "function( void)", "functionName( void)", "isKnown( void)", "isRunning( void)", "jobHandle( void)", "recvData( int $data_len)", "returnCode( void)", "sendData( string $data)", "sendWorkload( string $data)", "taskDenominator( void)", "taskNumerator( void)", "unique( void)", "uuid( void)", "addFunction( string $function_name , callable $function [, mixed &$context [, int $timeout ]])", "addOptions( int $option)", "addServer([ string $host = 127.0.0.1 [, int $port = 4730 ]])", "addServers( string $servers = 127.0.0.1:4730)", "clone( void)", "__construct( void)", "echo( string $workload)", "error( void)", "getErrno( void)", "options( void)", "register( string $function_name [, int $timeout ])", "removeOptions( int $option)", "returnCode( void)", "setId( string $id)", "setOptions( int $option)", "setTimeout( int $timeout)", "timeout( void)", "unregister( string $function_name)", "unregisterAll( void)", "wait( void)", "work( void)", "connect( string $dsn)", "__construct([ string $dsn ])", "country( integer $country)", "get( string $name [, integer $country ])", "isNick( string $name0 , string $name1 [, integer $country ])", "similarNames( string $name [, integer $country ])", "current( void)", "key( void)", "next( void)", "rewind( void)", "send( mixed $value)", "throw( Exception $exception)", "valid( void)", "__wakeup( void)", "KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ])", "count( void)", "__construct( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS ])", "current( void)", "getFlags( void)", "key( void)", "next( void)", "rewind( void)", "setFlags([ int $flags ])", "addimage( Gmagick $Gmagick)", "addnoiseimage( int $NOISE)", "annotateimage( GmagickDraw $GmagickDraw , float $x , float $y , float $angle , string $text)", "blurimage( float $radius , float $sigma [, int $channel ])", "borderimage( GmagickPixel $color , int $width , int $height)", "charcoalimage( float $radius , float $sigma)", "chopimage( int $width , int $height , int $x , int $y)", "clear( void)", "commentimage( string $comment)", "compositeimage( Gmagick $source , int $COMPOSE , int $x , int $y)", "__construct([ string $filename ])", "cropimage( int $width , int $height , int $x , int $y)", "cropthumbnailimage( int $width , int $height)", "current( void)", "cyclecolormapimage( int $displace)", "deconstructimages( void)", "despeckleimage( void)", "destroy( void)", "drawimage( GmagickDraw $GmagickDraw)", "edgeimage( float $radius)", "embossimage( float $radius , float $sigma)", "enhanceimage( void)", "equalizeimage( void)", "flipimage( void)", "flopimage( void)", "frameimage( GmagickPixel $color , int $width , int $height , int $inner_bevel , int $outer_bevel)", "gammaimage( float $gamma)", "getcopyright( void)", "getfilename( void)", "getimagebackgroundcolor( void)", "getimageblueprimary( void)", "getimagebordercolor( void)", "getimagechanneldepth( int $channel_type)", "getimagecolors( void)", "getimagecolorspace( void)", "getimagecompose( void)", "getimagedelay( void)", "getimagedepth( void)", "getimagedispose( void)", "getimageextrema( void)", "getimagefilename( void)", "getimageformat( void)", "getimagegamma( void)", "getimagegreenprimary( void)", "getimageheight( void)", "getimagehistogram( void)", "getimageindex( void)", "getimageinterlacescheme( void)", "getimageiterations( void)", "getimagematte( void)", "getimagemattecolor( void)", "getimageprofile( string $name)", "getimageredprimary( void)", "getimagerenderingintent( void)", "getimageresolution( void)", "getimagescene( void)", "getimagesignature( void)", "getimagetype( void)", "getimageunits( void)", "getimagewhitepoint( void)", "getimagewidth( void)", "getpackagename( void)", "getquantumdepth( void)", "getreleasedate( void)", "getsamplingfactors( void)", "getsize( void)", "getversion( void)", "hasnextimage( void)", "haspreviousimage( void)", "implodeimage( float $radius)", "labelimage( string $label)", "CHANNEL_DEFAULT ])", "magnifyimage( void)", "mapimage( gmagick $gmagick , bool $dither)", "medianfilterimage( float $radius)", "minifyimage( void)", "modulateimage( float $brightness , float $saturation , float $hue)", "motionblurimage( float $radius , float $sigma , float $angle)", "newimage( int $width , int $height , string $background [, string $format ])", "nextimage( void)", "normalizeimage([ int $channel ])", "oilpaintimage( float $radius)", "previousimage( void)", "profileimage( string $name , string $profile)", "quantizeimage( int $numColors , int $colorspace , int $treeDepth , bool $dither , bool $measureError)", "quantizeimages( int $numColors , int $colorspace , int $treeDepth , bool $dither , bool $measureError)", "queryfontmetrics( GmagickDraw $draw , string $text)", "queryfonts([ string $pattern = &quot;*&quot; ])", "queryformats([ string $pattern = &quot;*&quot; ])", "CHANNEL_DEFAULT ])", "raiseimage( int $width , int $height , int $x , int $y , bool $raise)", "read( string $filename)", "readimage( string $filename)", "readimageblob( string $imageContents [, string $filename ])", "readimagefile( resource $fp [, string $filename ])", "reducenoiseimage( float $radius)", "removeimage( void)", "removeimageprofile( string $name)", "resampleimage( float $xResolution , float $yResolution , int $filter , float $blur)", "resizeimage( int $width , int $height , int $filter , float $blur [, bool $fit = false ])", "rollimage( int $x , int $y)", "rotateimage( mixed $color , float $degrees)", "scaleimage( int $width , int $height [, bool $fit = false ])", "separateimagechannel( int $channel)", "setfilename( string $filename)", "setimagebackgroundcolor( GmagickPixel $color)", "setimageblueprimary( float $x , float $y)", "setimagebordercolor( GmagickPixel $color)", "setimagechanneldepth( int $channel , int $depth)", "setimagecolorspace( int $colorspace)", "setimagecompose( int $composite)", "setimagedelay( int $delay)", "setimagedepth( int $depth)", "setimagedispose( int $disposeType)", "setimagefilename( string $filename)", "setimageformat( string $imageFormat)", "setimagegamma( float $gamma)", "setimagegreenprimary( float $x , float $y)", "setimageindex( int $index)", "setimageinterlacescheme( int $interlace)", "setimageiterations( int $iterations)", "setimageprofile( string $name , string $profile)", "setimageredprimary( float $x , float $y)", "setimagerenderingintent( int $rendering_intent)", "setimageresolution( float $xResolution , float $yResolution)", "setimagescene( int $scene)", "setimagetype( int $imgType)", "setimageunits( int $resolution)", "setimagewhitepoint( float $x , float $y)", "setsamplingfactors( array $factors)", "setsize( int $columns , int $rows)", "shearimage( mixed $color , float $xShear , float $yShear)", "solarizeimage( int $threshold)", "spreadimage( float $radius)", "stripimage( void)", "swirlimage( float $degrees)", "thumbnailimage( int $width , int $height [, bool $fit = false ])", "trimimage( float $fuzz)", "write( string $filename)", "writeimage( string $filename [, bool $all_frames = false ])", "annotate( float $x , float $y , string $text)", "arc( float $sx , float $sy , float $ex , float $ey , float $sd , float $ed)", "bezier( array $coordinate_array)", "ellipse( float $ox , float $oy , float $rx , float $ry , float $start , float $end)", "getfillcolor( void)", "getfillopacity( void)", "getfont( void)", "getfontsize( void)", "getfontstyle( void)", "getfontweight( void)", "getstrokecolor( void)", "getstrokeopacity( void)", "getstrokewidth( void)", "gettextdecoration( void)", "gettextencoding( void)", "line( float $sx , float $sy , float $ex , float $ey)", "point( float $x , float $y)", "polygon( array $coordinates)", "polyline( array $coordinate_array)", "rectangle( float $x1 , float $y1 , float $x2 , float $y2)", "rotate( float $degrees)", "roundrectangle( float $x1 , float $y1 , float $x2 , float $y2 , float $rx , float $ry)", "scale( float $x , float $y)", "setfillcolor( string $color)", "setfillopacity( float $fill_opacity)", "setfont( string $font)", "setfontsize( float $pointsize)", "setfontstyle( int $style)", "setfontweight( int $weight)", "setstrokecolor( GmagickPixel $color)", "setstrokeopacity( float $stroke_opacity)", "setstrokewidth( float $width)", "settextdecoration( int $decoration)", "settextencoding( string $encoding)", "__construct([ string $color ])", "getcolor([ bool $as_array [, bool $normalize_array ]])", "getcolorcount( void)", "getcolorvalue( int $color)", "setcolor( string $color)", "setcolorvalue( int $color , float $value)", "setBorderStyle( float $width , int $dash_on , int $dash_off)", "setHighlightMode( int $mode)", "setIcon( int $icon)", "setOpened( bool $opened)", "setFit( void)", "setFitB( void)", "setFitBH( float $top)", "setFitBV( float $left)", "setFitH( float $top)", "setFitR( float $left , float $bottom , float $right , float $top)", "setFitV( float $left)", "setXYZ( float $left , float $top , float $zoom)", "addPage( void)", "addPageLabel( int $first_page , int $style , int $first_num [, string $prefix = &quot;&quot; ])", "__construct( void)", "createOutline( string $title [, object $parent_outline [, object $encoder ]])", "getCurrentEncoder( void)", "getCurrentPage( void)", "getEncoder( string $encoding)", "getFont( string $fontname [, string $encoding ])", "getInfoAttr( int $type)", "getPageLayout( void)", "getPageMode( void)", "getStreamSize( void)", "insertPage( object $page)", "loadJPEG( string $filename)", "loadPNG( string $filename [, bool $deferred = false ])", "loadRaw( string $filename , int $width , int $height , int $color_space)", "loadTTC( string $fontfile , int $index [, bool $embed = false ])", "loadTTF( string $fontfile [, bool $embed = false ])", "loadType1( string $afmfile [, string $pfmfile ])", "output( void)", "readFromStream( int $bytes)", "resetError( void)", "resetStream( void)", "save( string $file)", "saveToStream( void)", "setCompressionMode( int $mode)", "setCurrentEncoder( string $encoding)", "setEncryptionMode( int $mode [, int $key_len = 5 ])", "setInfoAttr( int $type , string $info)", "setInfoDateAttr( int $type , int $year , int $month , int $day , int $hour , int $min , int $sec , string $ind , int $off_hour , int $off_min)", "setOpenAction( object $destination)", "setPageLayout( int $layout)", "setPageMode( int $mode)", "setPagesConfiguration( int $page_per_pages)", "setPassword( string $owner_password , string $user_password)", "setPermission( int $permission)", "useCNSEncodings( void)", "useCNSFonts( void)", "useCNTEncodings( void)", "useCNTFonts( void)", "useJPEncodings( void)", "useJPFonts( void)", "useKREncodings( void)", "useKRFonts( void)", "getByteType( string $text , int $index)", "getType( void)", "getUnicode( int $character)", "getWritingMode( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "getAscent( void)", "getCapHeight( void)", "getDescent( void)", "getEncodingName( void)", "getFontName( void)", "getTextWidth( string $text)", "getUnicodeWidth( int $character)", "getXHeight( void)", "measureText( string $text , float $width , float $font_size , float $char_space , float $word_space [, bool $word_wrap = false ])", "getBitsPerComponent( void)", "getColorSpace( void)", "getHeight( void)", "getSize( void)", "getWidth( void)", "setColorMask( int $rmin , int $rmax , int $gmin , int $gmax , int $bmin , int $bmax)", "setMaskImage( object $mask_image)", "setDestination( object $destination)", "setOpened( bool $opened)", "arc( float $x , float $y , float $ray , float $ang1 , float $ang2)", "beginText( void)", "circle( float $x , float $y , float $ray)", "closePath( void)", "concat( float $a , float $b , float $c , float $d , float $x , float $y)", "createDestination( void)", "createLinkAnnotation( array $rectangle , object $destination)", "createTextAnnotation( array $rectangle , string $text [, object $encoder ])", "createURLAnnotation( array $rectangle , string $url)", "curveTo2( float $x2 , float $y2 , float $x3 , float $y3)", "curveTo3( float $x1 , float $y1 , float $x3 , float $y3)", "curveTo( float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3)", "drawImage( object $image , float $x , float $y , float $width , float $height)", "ellipse( float $x , float $y , float $xray , float $yray)", "endPath( void)", "endText( void)", "eofill( void)", "eoFillStroke([ bool $close_path = false ])", "fill( void)", "fillStroke([ bool $close_path = false ])", "getCharSpace( void)", "getCMYKFill( void)", "getCMYKStroke( void)", "getCurrentFont( void)", "getCurrentFontSize( void)", "getCurrentPos( void)", "getCurrentTextPos( void)", "getDash( void)", "getFillingColorSpace( void)", "getFlatness( void)", "getGMode( void)", "getGrayFill( void)", "getGrayStroke( void)", "getHeight( void)", "getHorizontalScaling( void)", "getLineCap( void)", "getLineJoin( void)", "getLineWidth( void)", "getMiterLimit( void)", "getRGBFill( void)", "getRGBStroke( void)", "getStrokingColorSpace( void)", "getTextLeading( void)", "getTextMatrix( void)", "getTextRenderingMode( void)", "getTextRise( void)", "getTextWidth( string $text)", "getTransMatrix( void)", "getWidth( void)", "getWordSpace( void)", "lineTo( float $x , float $y)", "measureText( string $text , float $width [, bool $wordwrap = false ])", "moveTextPos( float $x , float $y [, bool $set_leading = false ])", "moveTo( float $x , float $y)", "moveToNextLine( void)", "rectangle( float $x , float $y , float $width , float $height)", "setCharSpace( float $char_space)", "setCMYKFill( float $c , float $m , float $y , float $k)", "setCMYKStroke( float $c , float $m , float $y , float $k)", "setDash( array $pattern , int $phase)", "setFlatness( float $flatness)", "setFontAndSize( object $font , float $size)", "setGrayFill( float $value)", "setGrayStroke( float $value)", "setHeight( float $height)", "setHorizontalScaling( float $scaling)", "setLineCap( int $cap)", "setLineJoin( int $join)", "setLineWidth( float $width)", "setMiterLimit( float $limit)", "setRGBFill( float $r , float $g , float $b)", "setRGBStroke( float $r , float $g , float $b)", "setRotate( int $angle)", "setSize( int $size , int $direction)", "setSlideShow( int $type , float $disp_time , float $trans_time)", "setTextLeading( float $text_leading)", "setTextMatrix( float $a , float $b , float $c , float $d , float $x , float $y)", "setTextRenderingMode( int $mode)", "setTextRise( float $rise)", "setWidth( float $width)", "setWordSpace( float $word_space)", "showText( string $text)", "showTextNextLine( string $text [, float $word_space = 0 [, float $char_space = 0 ]])", "stroke([ bool $close_path = false ])", "textOut( float $x , float $y , string $text)", "TALIGN_LEFT ])", "getElapsedTicks( void)", "getFrequency( void)", "getLastElapsedTicks( void)", "isRunning( void)", "start( void)", "stop( void)", "getElapsedTime([ integer $unit ])", "getLastElapsedTime([ integer $unit ])", "getElapsedTicks( void)", "getFrequency( void)", "getLastElapsedTicks( void)", "isRunning( void)", "start( void)", "stop( void)", "__construct([ int $flags = 0 ])", "factory([ int $flags = 0 [, string $class_name = &quot;HttpDeflateStream&quot; ]])", "finish([ string $data ])", "flush([ string $data ])", "update( string $data)", "__construct([ int $flags = 0 ])", "factory([ int $flags = 0 [, string $class_name = &quot;HttpInflateStream&quot; ]])", "finish([ string $data ])", "flush([ string $data ])", "update( string $data)", "addHeaders( array $headers [, bool $append = false ])", "__construct([ string $message ])", "detach( void)", "factory([ string $raw_message [, string $class_name = &quot;HttpMessage&quot; ]])", "fromEnv( int $message_type [, string $class_name = &quot;HttpMessage&quot; ])", "fromString([ string $raw_message [, string $class_name = &quot;HttpMessage&quot; ]])", "getBody( void)", "getHeader( string $header)", "getHeaders( void)", "getHttpVersion( void)", "getParentMessage( void)", "getRequestMethod( void)", "getRequestUrl( void)", "getResponseCode( void)", "getResponseStatus( void)", "getType( void)", "guessContentType( string $magic_file [, int $magic_mode = MAGIC_MIME ])", "prepend( HttpMessage $message [, bool $top = true ])", "reverse( void)", "send( void)", "setBody( string $body)", "setHeaders( array $headers)", "setHttpVersion( string $version)", "setRequestMethod( string $method)", "setRequestUrl( string $url)", "setResponseCode( int $code)", "setResponseStatus( string $status)", "setType( int $type)", "toMessageTypeObject( void)", "toString([ bool $include_parent = false ])", "__construct([ bool $global = true [, mixed $add ]])", "get([ string $key [, mixed $type = 0 [, mixed $defval = NULL [, bool $delete = false ]]]])", "mod( mixed $params)", "set( mixed $params)", "singleton([ bool $global = true ])", "toArray( void)", "toString( void)", "xlate( string $ie , string $oe)", "addCookies( array $cookies)", "addHeaders( array $headers)", "addPostFields( array $post_data)", "addPostFile( string $name , string $file [, string $content_type = &quot;application/x-octetstream&quot; ])", "addPutData( string $put_data)", "addQueryData( array $query_params)", "addRawPostData( string $raw_post_data)", "addSslOptions( array $options)", "clearHistory( void)", "__construct([ string $url [, int $request_method = HTTP_METH_GET [, array $options ]]])", "enableCookies( void)", "getContentType( void)", "getCookies( void)", "getHeaders( void)", "getHistory( void)", "getMethod( void)", "getOptions( void)", "getPostFields( void)", "getPostFiles( void)", "getPutData( void)", "getPutFile( void)", "getQueryData( void)", "getRawPostData( void)", "getRawRequestMessage( void)", "getRawResponseMessage( void)", "getRequestMessage( void)", "getResponseBody( void)", "getResponseCode( void)", "getResponseCookies([ int $flags = 0 [, array $allowed_extras ]])", "getResponseData( void)", "getResponseHeader([ string $name ])", "getResponseInfo([ string $name ])", "getResponseMessage( void)", "getResponseStatus( void)", "getSslOptions( void)", "getUrl( void)", "resetCookies([ bool $session_only = false ])", "send( void)", "setBody([ string $request_body_data ])", "setContentType( string $content_type)", "setCookies([ array $cookies ])", "setHeaders([ array $headers ])", "setMethod( int $request_method)", "setOptions([ array $options ])", "setPostFields( array $post_data)", "setPostFiles( array $post_files)", "setPutData([ string $put_data ])", "setPutFile([ string $file = &quot;&quot; ])", "setQueryData( mixed $query_data)", "setRawPostData([ string $raw_post_data ])", "setSslOptions([ array $options ])", "setUrl( string $url)", "attach( HttpRequest $request)", "__construct([ HttpRequest $request [, HttpRequest $... ]])", "__destruct( void)", "detach( HttpRequest $request)", "getAttachedRequests( void)", "getFinishedRequests( void)", "reset( void)", "send( void)", "socketPerform( void)", "socketSelect([ float $timeout = 0 ])", "capture( void)", "getBufferSize( void)", "getCache( void)", "getCacheControl( void)", "getContentDisposition( void)", "getContentType( void)", "getData( void)", "getETag( void)", "getFile( void)", "getGzip( void)", "getHeader([ string $name ])", "getLastModified( void)", "getRequestBody( void)", "getRequestBodyStream( void)", "getRequestHeaders( void)", "getStream( void)", "getThrottleDelay( void)", "guessContentType( string $magic_file [, int $magic_mode = MAGIC_MIME ])", "redirect([ string $url [, array $params [, bool $session = false [, int $status ]]]])", "send([ bool $clean_ob = true ])", "setBufferSize( int $bytes)", "setCache( bool $cache)", "setCacheControl( string $control [, int $max_age = 0 [, bool $must_revalidate = true ]])", "setContentDisposition( string $filename [, bool $inline = false ])", "setContentType( string $content_type)", "setData( mixed $data)", "setETag( string $etag)", "setFile( string $file)", "setGzip( bool $gzip)", "setHeader( string $name [, mixed $value [, bool $replace = true ]])", "setLastModified( int $timestamp)", "setStream( resource $stream)", "setThrottleDelay( float $seconds)", "status( int $status)", "CHANNEL_DEFAULT ])", "adaptiveResizeImage( int $columns , int $rows [, bool $bestfit = false ])", "CHANNEL_DEFAULT ])", "adaptiveThresholdImage( int $width , int $height , int $offset)", "addImage( Imagick $source)", "CHANNEL_DEFAULT ])", "affineTransformImage( ImagickDraw $matrix)", "animateImages( string $x_server)", "annotateImage( ImagickDraw $draw_settings , float $x , float $y , float $angle , string $text)", "appendImages( bool $stack = false)", "averageImages( void)", "blackThresholdImage( mixed $threshold)", "blurImage( float $radius , float $sigma [, int $channel ])", "borderImage( mixed $bordercolor , int $width , int $height)", "charcoalImage( float $radius , float $sigma)", "chopImage( int $width , int $height , int $x , int $y)", "clear( void)", "clipImage( void)", "clipPathImage( string $pathname , bool $inside)", "clone( void)", "CHANNEL_DEFAULT ])", "coalesceImages( void)", "colorFloodfillImage( mixed $fill , float $fuzz , mixed $bordercolor , int $x , int $y)", "colorizeImage( mixed $colorize , mixed $opacity)", "combineImages( int $channelType)", "commentImage( string $comment)", "compareImageChannels( Imagick $image , int $channelType , int $metricType)", "compareImageLayers( int $method)", "compareImages( Imagick $compare , int $metric)", "CHANNEL_ALL ])", "__construct( mixed $files)", "contrastImage( bool $sharpen)", "CHANNEL_ALL ])", "CHANNEL_ALL ])", "cropImage( int $width , int $height , int $x , int $y)", "cropThumbnailImage( int $width , int $height)", "current( void)", "cycleColormapImage( int $displace)", "decipherImage( string $passphrase)", "deconstructImages( void)", "deleteImageArtifact( string $artifact)", "deskewImage( float $threshold)", "despeckleImage( void)", "destroy( void)", "displayImage( string $servername)", "displayImages( string $servername)", "distortImage( int $method , array $arguments , bool $bestfit)", "drawImage( ImagickDraw $draw)", "edgeImage( float $radius)", "embossImage( float $radius , float $sigma)", "encipherImage( string $passphrase)", "enhanceImage( void)", "equalizeImage( void)", "CHANNEL_ALL ])", "exportImagePixels( int $x , int $y , int $width , int $height , string $map , int $STORAGE)", "extentImage( int $width , int $height , int $x , int $y)", "flattenImages( void)", "flipImage( void)", "CHANNEL_DEFAULT ])", "flopImage( void)", "frameImage( mixed $matte_color , int $width , int $height , int $inner_bevel , int $outer_bevel)", "CHANNEL_DEFAULT ])", "CHANNEL_ALL ])", "CHANNEL_ALL ])", "CHANNEL_ALL ])", "getColorspace( void)", "getCompression( void)", "getCompressionQuality( void)", "getCopyright( void)", "getFilename( void)", "getFont( void)", "getFormat( void)", "getGravity( void)", "getHomeURL( void)", "getImage( void)", "getImageAlphaChannel( void)", "getImageArtifact( string $artifact)", "getImageBackgroundColor( void)", "getImageBlob( void)", "getImageBluePrimary( void)", "getImageBorderColor( void)", "getImageChannelDepth( int $channel)", "getImageChannelDistortion( Imagick $reference , int $channel , int $metric)", "CHANNEL_DEFAULT ])", "getImageChannelExtrema( int $channel)", "CHANNEL_DEFAULT ])", "getImageChannelMean( int $channel)", "getImageChannelRange( int $channel)", "getImageChannelStatistics( void)", "getImageClipMask( void)", "getImageColormapColor( int $index)", "getImageColors( void)", "getImageColorspace( void)", "getImageCompose( void)", "getImageCompression( void)", "getImageCompressionQuality( void)", "getImageDelay( void)", "getImageDepth( void)", "getImageDispose( void)", "getImageDistortion( MagickWand $reference , int $metric)", "getImageExtrema( void)", "getImageFilename( void)", "getImageFormat( void)", "getImageGamma( void)", "getImageGeometry( void)", "getImageGravity( void)", "getImageGreenPrimary( void)", "getImageHeight( void)", "getImageHistogram( void)", "getImageIndex( void)", "getImageInterlaceScheme( void)", "getImageInterpolateMethod( void)", "getImageIterations( void)", "getImageLength( void)", "getImageMagickLicense( void)", "getImageMatte( void)", "getImageMatteColor( void)", "getImageOrientation( void)", "getImagePage( void)", "getImagePixelColor( int $x , int $y)", "getImageProfile( string $name)", "getImageProfiles([ string $pattern = &quot;*&quot; [, bool $only_names = true ]])", "getImageProperties([ string $pattern = &quot;*&quot; [, bool $only_names = true ]])", "getImageProperty( string $name)", "getImageRedPrimary( void)", "getImageRegion( int $width , int $height , int $x , int $y)", "getImageRenderingIntent( void)", "getImageResolution( void)", "getImagesBlob( void)", "getImageScene( void)", "getImageSignature( void)", "getImageSize( void)", "getImageTicksPerSecond( void)", "getImageTotalInkDensity( void)", "getImageType( void)", "getImageUnits( void)", "getImageVirtualPixelMethod( void)", "getImageWhitePoint( void)", "getImageWidth( void)", "getInterlaceScheme( void)", "getIteratorIndex( void)", "getNumberImages( void)", "getOption( string $key)", "getPackageName( void)", "getPage( void)", "getPixelIterator( void)", "getPixelRegionIterator( int $x , int $y , int $columns , int $rows)", "getPointSize( void)", "getQuantumDepth( void)", "getQuantumRange( void)", "getReleaseDate( void)", "getResource( int $type)", "getResourceLimit( int $type)", "getSamplingFactors( void)", "getSize( void)", "getSizeOffset( void)", "getVersion( void)", "CHANNEL_DEFAULT ])", "hasNextImage( void)", "hasPreviousImage( void)", "identifyImage([ bool $appendRawOutput = false ])", "implodeImage( float $radius)", "importImagePixels( int $x , int $y , int $width , int $height , string $map , int $storage , array $pixels)", "labelImage( string $label)", "CHANNEL_ALL ])", "linearStretchImage( float $blackPoint , float $whitePoint)", "liquidRescaleImage( int $width , int $height , float $delta_x , float $rigidity)", "magnifyImage( void)", "mapImage( Imagick $map , bool $dither)", "matteFloodfillImage( float $alpha , float $fuzz , mixed $bordercolor , int $x , int $y)", "medianFilterImage( float $radius)", "mergeImageLayers( int $layer_method)", "minifyImage( void)", "modulateImage( float $brightness , float $saturation , float $hue)", "montageImage( ImagickDraw $draw , string $tile_geometry , string $thumbnail_geometry , int $mode , string $frame)", "morphImages( int $number_frames)", "mosaicImages( void)", "CHANNEL_DEFAULT ])", "CHANNEL_ALL ])", "newImage( int $cols , int $rows , mixed $background [, string $format ])", "newPseudoImage( int $columns , int $rows , string $pseudoString)", "nextImage( void)", "CHANNEL_ALL ])", "oilPaintImage( float $radius)", "CHANNEL_DEFAULT ])", "optimizeImageLayers( void)", "CHANNEL_ALL ])", "CHANNEL_ALL ])", "CHANNEL_ALL ])", "paintTransparentImage( mixed $target , float $alpha , float $fuzz)", "pingImage( string $filename)", "pingImageBlob( string $image)", "pingImageFile( resource $filehandle [, string $fileName ])", "polaroidImage( ImagickDraw $properties , float $angle)", "posterizeImage( int $levels , bool $dither)", "previewImages( int $preview)", "previousImage( void)", "profileImage( string $name , string $profile)", "quantizeImage( int $numberColors , int $colorspace , int $treedepth , bool $dither , bool $measureError)", "quantizeImages( int $numberColors , int $colorspace , int $treedepth , bool $dither , bool $measureError)", "queryFontMetrics( ImagickDraw $properties , string $text [, bool $multiline ])", "queryFonts([ string $pattern = &quot;*&quot; ])", "queryFormats([ string $pattern = &quot;*&quot; ])", "CHANNEL_ALL ])", "raiseImage( int $width , int $height , int $x , int $y , bool $raise)", "CHANNEL_ALL ])", "readImage( string $filename)", "readImageBlob( string $image [, string $filename ])", "readImageFile( resource $filehandle [, string $fileName = null ])", "recolorImage( array $matrix)", "reduceNoiseImage( float $radius)", "remapImage( Imagick $replacement , int $DITHER)", "removeImage( void)", "removeImageProfile( string $name)", "render( void)", "resampleImage( float $x_resolution , float $y_resolution , int $filter , float $blur)", "resetImagePage( string $page)", "resizeImage( int $columns , int $rows , int $filter , float $blur [, bool $bestfit = false ])", "rollImage( int $x , int $y)", "rotateImage( mixed $background , float $degrees)", "roundCorners( float $x_rounding , float $y_rounding [, float $stroke_width = 10 [, float $displace = 5 [, float $size_correction = -6 ]]])", "sampleImage( int $columns , int $rows)", "scaleImage( int $cols , int $rows [, bool $bestfit = false ])", "segmentImage( int $COLORSPACE , float $cluster_threshold , float $smooth_threshold [, bool $verbose = false ])", "separateImageChannel( int $channel)", "sepiaToneImage( float $threshold)", "setBackgroundColor( mixed $background)", "setColorspace( int $COLORSPACE)", "setCompression( int $compression)", "setCompressionQuality( int $quality)", "setFilename( string $filename)", "setFirstIterator( void)", "setFont( string $font)", "setFormat( string $format)", "setGravity( int $gravity)", "setImage( Imagick $replace)", "setImageAlphaChannel( int $mode)", "setImageArtifact( string $artifact , string $value)", "setImageBackgroundColor( mixed $background)", "setImageBias( float $bias)", "setImageBluePrimary( float $x , float $y)", "setImageBorderColor( mixed $border)", "setImageChannelDepth( int $channel , int $depth)", "setImageClipMask( Imagick $clip_mask)", "setImageColormapColor( int $index , ImagickPixel $color)", "setImageColorspace( int $colorspace)", "setImageCompose( int $compose)", "setImageCompression( int $compression)", "setImageCompressionQuality( int $quality)", "setImageDelay( int $delay)", "setImageDepth( int $depth)", "setImageDispose( int $dispose)", "setImageExtent( int $columns , int $rows)", "setImageFilename( string $filename)", "setImageFormat( string $format)", "setImageGamma( float $gamma)", "setImageGravity( int $gravity)", "setImageGreenPrimary( float $x , float $y)", "setImageIndex( int $index)", "setImageInterlaceScheme( int $interlace_scheme)", "setImageInterpolateMethod( int $method)", "setImageIterations( int $iterations)", "setImageMatte( bool $matte)", "setImageMatteColor( mixed $matte)", "setImageOpacity( float $opacity)", "setImageOrientation( int $orientation)", "setImagePage( int $width , int $height , int $x , int $y)", "setImageProfile( string $name , string $profile)", "setImageProperty( string $name , string $value)", "setImageRedPrimary( float $x , float $y)", "setImageRenderingIntent( int $rendering_intent)", "setImageResolution( float $x_resolution , float $y_resolution)", "setImageScene( int $scene)", "setImageTicksPerSecond( int $ticks_per_second)", "setImageType( int $image_type)", "setImageUnits( int $units)", "setImageVirtualPixelMethod( int $method)", "setImageWhitePoint( float $x , float $y)", "setInterlaceScheme( int $interlace_scheme)", "setIteratorIndex( int $index)", "setLastIterator( void)", "setOption( string $key , string $value)", "setPage( int $width , int $height , int $x , int $y)", "setPointSize( float $point_size)", "setResolution( float $x_resolution , float $y_resolution)", "setResourceLimit( int $type , int $limit)", "setSamplingFactors( array $factors)", "setSize( int $columns , int $rows)", "setSizeOffset( int $columns , int $rows , int $offset)", "setType( int $image_type)", "shadeImage( bool $gray , float $azimuth , float $elevation)", "shadowImage( float $opacity , float $sigma , int $x , int $y)", "CHANNEL_ALL ])", "shaveImage( int $columns , int $rows)", "shearImage( mixed $background , float $x_shear , float $y_shear)", "CHANNEL_ALL ])", "sketchImage( float $radius , float $sigma , float $angle)", "solarizeImage( int $threshold)", "CHANNEL_DEFAULT ])", "spliceImage( int $width , int $height , int $x , int $y)", "spreadImage( float $radius)", "steganoImage( Imagick $watermark_wand , int $offset)", "stereoImage( Imagick $offset_wand)", "stripImage( void)", "swirlImage( float $degrees)", "textureImage( Imagick $texture_wand)", "CHANNEL_ALL ])", "thumbnailImage( int $columns , int $rows [, bool $bestfit = false [, bool $fill = false ]])", "tintImage( mixed $tint , mixed $opacity)", "transformImage( string $crop , string $geometry)", "transparentPaintImage( mixed $target , float $alpha , float $fuzz , bool $invert)", "transposeImage( void)", "transverseImage( void)", "trimImage( float $fuzz)", "uniqueImageColors( void)", "CHANNEL_ALL ])", "valid( void)", "vignetteImage( float $blackPoint , float $whitePoint , int $x , int $y)", "waveImage( float $amplitude , float $length)", "whiteThresholdImage( mixed $threshold)", "writeImage([ string $filename = NULL ])", "writeImageFile( resource $filehandle)", "writeImages( string $filename , bool $adjoin)", "writeImagesFile( resource $filehandle)", "affine( array $affine)", "annotation( float $x , float $y , string $text)", "arc( float $sx , float $sy , float $ex , float $ey , float $sd , float $ed)", "bezier( array $coordinates)", "circle( float $ox , float $oy , float $px , float $py)", "clear( void)", "clone( void)", "color( float $x , float $y , int $paintMethod)", "comment( string $comment)", "composite( int $compose , float $x , float $y , float $width , float $height , Imagick $compositeWand)", "__construct( void)", "destroy( void)", "ellipse( float $ox , float $oy , float $rx , float $ry , float $start , float $end)", "getClipPath( void)", "getClipRule( void)", "getClipUnits( void)", "getFillColor( void)", "getFillOpacity( void)", "getFillRule( void)", "getFont( void)", "getFontFamily( void)", "getFontSize( void)", "getFontStyle( void)", "getFontWeight( void)", "getGravity( void)", "getStrokeAntialias( void)", "getStrokeColor( void)", "getStrokeDashArray( void)", "getStrokeDashOffset( void)", "getStrokeLineCap( void)", "getStrokeLineJoin( void)", "getStrokeMiterLimit( void)", "getStrokeOpacity( void)", "getStrokeWidth( void)", "getTextAlignment( void)", "getTextAntialias( void)", "getTextDecoration( void)", "getTextEncoding( void)", "getTextUnderColor( void)", "getVectorGraphics( void)", "line( float $sx , float $sy , float $ex , float $ey)", "matte( float $x , float $y , int $paintMethod)", "pathClose( void)", "pathCurveToAbsolute( float $x1 , float $y1 , float $x2 , float $y2 , float $x , float $y)", "pathCurveToQuadraticBezierAbsolute( float $x1 , float $y1 , float $x , float $y)", "pathCurveToQuadraticBezierRelative( float $x1 , float $y1 , float $x , float $y)", "pathCurveToQuadraticBezierSmoothAbsolute( float $x , float $y)", "pathCurveToQuadraticBezierSmoothRelative( float $x , float $y)", "pathCurveToRelative( float $x1 , float $y1 , float $x2 , float $y2 , float $x , float $y)", "pathCurveToSmoothAbsolute( float $x2 , float $y2 , float $x , float $y)", "pathCurveToSmoothRelative( float $x2 , float $y2 , float $x , float $y)", "pathEllipticArcAbsolute( float $rx , float $ry , float $x_axis_rotation , bool $large_arc_flag , bool $sweep_flag , float $x , float $y)", "pathEllipticArcRelative( float $rx , float $ry , float $x_axis_rotation , bool $large_arc_flag , bool $sweep_flag , float $x , float $y)", "pathFinish( void)", "pathLineToAbsolute( float $x , float $y)", "pathLineToHorizontalAbsolute( float $x)", "pathLineToHorizontalRelative( float $x)", "pathLineToRelative( float $x , float $y)", "pathLineToVerticalAbsolute( float $y)", "pathLineToVerticalRelative( float $y)", "pathMoveToAbsolute( float $x , float $y)", "pathMoveToRelative( float $x , float $y)", "pathStart( void)", "point( float $x , float $y)", "polygon( array $coordinates)", "polyline( array $coordinates)", "pop( void)", "popClipPath( void)", "popDefs( void)", "popPattern( void)", "push( void)", "pushClipPath( string $clip_mask_id)", "pushDefs( void)", "pushPattern( string $pattern_id , float $x , float $y , float $width , float $height)", "rectangle( float $x1 , float $y1 , float $x2 , float $y2)", "render( void)", "rotate( float $degrees)", "roundRectangle( float $x1 , float $y1 , float $x2 , float $y2 , float $rx , float $ry)", "scale( float $x , float $y)", "setClipPath( string $clip_mask)", "setClipRule( int $fill_rule)", "setClipUnits( int $clip_units)", "setFillAlpha( float $opacity)", "setFillColor( ImagickPixel $fill_pixel)", "setFillOpacity( float $fillOpacity)", "setFillPatternURL( string $fill_url)", "setFillRule( int $fill_rule)", "setFont( string $font_name)", "setFontFamily( string $font_family)", "setFontSize( float $pointsize)", "setFontStretch( int $fontStretch)", "setFontStyle( int $style)", "setFontWeight( int $font_weight)", "setGravity( int $gravity)", "setStrokeAlpha( float $opacity)", "setStrokeAntialias( bool $stroke_antialias)", "setStrokeColor( ImagickPixel $stroke_pixel)", "setStrokeDashArray( array $dashArray)", "setStrokeDashOffset( float $dash_offset)", "setStrokeLineCap( int $linecap)", "setStrokeLineJoin( int $linejoin)", "setStrokeMiterLimit( int $miterlimit)", "setStrokeOpacity( float $stroke_opacity)", "setStrokePatternURL( string $stroke_url)", "setStrokeWidth( float $stroke_width)", "setTextAlignment( int $alignment)", "setTextAntialias( bool $antiAlias)", "setTextDecoration( int $decoration)", "setTextEncoding( string $encoding)", "setTextUnderColor( ImagickPixel $under_color)", "setVectorGraphics( string $xml)", "setViewbox( int $x1 , int $y1 , int $x2 , int $y2)", "skewX( float $degrees)", "skewY( float $degrees)", "translate( float $x , float $y)", "clear( void)", "__construct([ string $color ])", "destroy( void)", "getColor([ bool $normalized = false ])", "getColorAsString( void)", "getColorCount( void)", "getColorValue( int $color)", "getHSL( void)", "isPixelSimilar( ImagickPixel $color , float $fuzz)", "isSimilar( ImagickPixel $color , float $fuzz)", "setColor( string $color)", "setColorValue( int $color , float $value)", "setHSL( float $hue , float $saturation , float $luminosity)", "clear( void)", "__construct( Imagick $wand)", "destroy( void)", "getCurrentIteratorRow( void)", "getIteratorRow( void)", "getNextIteratorRow( void)", "getPreviousIteratorRow( void)", "newPixelIterator( Imagick $wand)", "newPixelRegionIterator( Imagick $wand , int $x , int $y , int $columns , int $rows)", "resetIterator( void)", "setIteratorFirstRow( void)", "setIteratorLastRow( void)", "setIteratorRow( int $row)", "syncIterator( void)", "__construct( Iterator $iterator)", "next( void)", "__construct( Traversable $iterator)", "current( void)", "getInnerIterator( void)", "key( void)", "next( void)", "rewind( void)", "valid( void)", "__construct( void)", "createCharacterInstance([ string $&quot;locale&quot; ])", "createCodePointInstance( void)", "createLineInstance([ string $&quot;locale&quot; ])", "createSentenceInstance([ string $&quot;locale&quot; ])", "createTitleInstance([ string $&quot;locale&quot; ])", "createWordInstance([ string $&quot;locale&quot; ])", "current( void)", "first( void)", "following( string $&quot;offset&quot;)", "getErrorCode( void)", "intl_get_error_code( void)", "getErrorMessage( void)", "intl_get_error_message( void)", "getLocale( string $&quot;locale_type&quot;)", "getPartsIterator([ string $&quot;key_type&quot; ])", "getText( void)", "isBoundary( string $&quot;offset&quot;)", "last( void)", "next([ string $&quot;offset&quot; ])", "preceding( string $&quot;offset&quot;)", "previous( void)", "setText( string $&quot;text&quot;)", "add( int $field , int $amount)", "intlcal_add( IntlCalendar $cal , int $field , int $amount)", "after( IntlCalendar $other)", "intlcal_after( IntlCalendar $cal , IntlCalendar $other)", "before( IntlCalendar $other)", "intlcal_before( IntlCalendar $cal , IntlCalendar $other)", "clear([ int $field = NULL ])", "intlcal_clear( IntlCalendar $cal [, int $field = NULL ])", "__construct( void)", "createInstance([ mixed $timeZone = NULL [, string $locale = &quot;&quot; ]])", "intlcal_create_instance([ mixed $timeZone = NULL [, string $locale = &quot;&quot; ]])", "equals( IntlCalendar $other)", "intlcal_equals( IntlCalendar $cal , IntlCalendar $other)", "fieldDifference( float $when , int $field)", "intlcal_field_difference( IntlCalendar $cal , float $when , int $field)", "fromDateTime( mixed $dateTime)", "intlcal_from_date_time( mixed $dateTime)", "get( int $field)", "intlcal_get( \">IntlCalendar> $cal , int $field)", "getActualMaximum( int $field)", "intlcal_get_actual_maximum( IntlCalendar $cal , int $field)", "getActualMinimum( int $field)", "intlcal_get_actual_minimum( IntlCalendar $cal , int $field)", "getAvailableLocales( void)", "intlcal_get_available_locales( void)", "getDayOfWeekType( int $dayOfWeek)", "intlcal_get_day_of_week_type( IntlCalendar $cal , int $dayOfWeek)", "getErrorCode( void)", "getErrorMessage( void)", "getFirstDayOfWeek( void)", "intlcal_get_first_day_of_week( IntlCalendar $cal)", "getGreatestMinimum( int $field)", "intlcal_get_greatest_minimum( IntlCalendar $cal , int $field)", "getKeywordValuesForLocale( string $key , string $locale , boolean $commonlyUsed)", "intlcal_get_keyword_values_for_locale( string $key , string $locale , boolean $commonlyUsed)", "getLeastMaximum( int $field)", "intlcal_get_least_maximum( IntlCalendar $cal , int $field)", "getLocale( int $localeType)", "intlcal_get_locale( IntlCalendar $cal , int $localeType)", "getMaximum( int $field)", "intlcal_get_maximum( IntlCalendar $cal , int $field)", "getMinimalDaysInFirstWeek( void)", "intlcal_get_minimal_days_in_first_week( IntlCalendar $cal)", "getMinimum( int $field)", "intlcal_get_minimum( IntlCalendar $cal , int $field)", "getNow( void)", "intlcal_get_now( void)", "getRepeatedWallTimeOption( void)", "intlcal_get_repeated_wall_time_option( IntlCalendar $cal)", "getSkippedWallTimeOption( void)", "intlcal_get_skipped_wall_time_option( IntlCalendar $cal)", "getTime( void)", "intlcal_get_time( IntlCalendar $cal)", "getTimeZone( void)", "intlcal_get_time_zone( IntlCalendar $cal)", "getType( void)", "intlcal_get_type( IntlCalendar $cal)", "getWeekendTransition( string $dayOfWeek)", "intlcal_get_weekend_transition( IntlCalendar $cal , string $dayOfWeek)", "inDaylightTime( void)", "intlcal_in_daylight_time( IntlCalendar $cal)", "isEquivalentTo( IntlCalendar $other)", "intlcal_is_equivalent_to( IntlCalendar $cal , IntlCalendar $other)", "isLenient( void)", "intlcal_is_lenient( IntlCalendar $cal)", "isSet( int $field)", "intlcal_is_set( IntlCalendar $cal , int $field)", "isWeekend([ float $date = NULL ])", "intlcal_is_weekend( IntlCalendar $cal [, float $date = NULL ])", "roll( int $field , mixed $amountOrUpOrDown)", "intlcal_roll( IntlCalendar $cal , int $field , mixed $amountOrUpOrDown)", "set( int $field , int $value)", "set( int $year , int $month [, int $dayOfMonth = NULL [, int $hour = NULL [, int $minute = NULL [, int $second = NULL ]]]])", "intlcal_set( IntlCalendar $cal , int $field , int $value)", "intlcal_set( IntlCalendar $cal , int $year , int $month [, int $dayOfMonth = NULL [, int $hour = NULL [, int $minute = NULL [, int $second = NULL ]]]])", "setFirstDayOfWeek( int $dayOfWeek)", "intlcal_set_first_day_of_week( IntlCalendar $cal , int $dayOfWeek)", "setLenient( string $isLenient)", "intlcal_set_lenient( IntlCalendar $cal , string $isLenient)", "setMinimalDaysInFirstWeek( int $minimalDays)", "intlcal_get_minimal_days_in_first_week( IntlCalendar $cal , int $minimalDays)", "setRepeatedWallTimeOption( int $wallTimeOption)", "intlcal_set_repeated_wall_time_option( IntlCalendar $cal , int $wallTimeOption)", "setSkippedWallTimeOption( int $wallTimeOption)", "intlcal_set_skipped_wall_time_option( IntlCalendar $cal , int $wallTimeOption)", "setTime( float $date)", "intlcal_set_time( IntlCalendar $cal , float $date)", "setTimeZone( mixed $timeZone)", "intlcal_set_time_zone( IntlCalendar $cal , mixed $timeZone)", "toDateTime( void)", "intlcal_to_date_time( IntlCalendar $cal)", "getLastCodePoint( void)", "__construct( void)", "createCharacterInstance([ string $&quot;locale&quot; ])", "createCodePointInstance( void)", "createLineInstance([ string $&quot;locale&quot; ])", "createSentenceInstance([ string $&quot;locale&quot; ])", "createTitleInstance([ string $&quot;locale&quot; ])", "createWordInstance([ string $&quot;locale&quot; ])", "current( void)", "first( void)", "following( string $&quot;offset&quot;)", "getErrorCode( void)", "intl_get_error_code( void)", "getErrorMessage( void)", "intl_get_error_message( void)", "getLocale( string $&quot;locale_type&quot;)", "getPartsIterator([ string $&quot;key_type&quot; ])", "getText( void)", "isBoundary( string $&quot;offset&quot;)", "last( void)", "next([ string $&quot;offset&quot; ])", "preceding( string $&quot;offset&quot;)", "previous( void)", "setText( string $&quot;text&quot;)", "create( string $locale , int $datetype , int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = &quot;&quot; ]]])", "format( mixed $value)", "formatObject( object $object [, mixed $format = NULL [, string $locale = NULL ]])", "getCalendar( void)", "getDateType( void)", "getErrorCode( void)", "getErrorMessage( void)", "getLocale([ int $which ])", "getPattern( void)", "getTimeType( void)", "getTimeZoneId( void)", "getCalendarObject( void)", "getTimeZone( void)", "isLenient( void)", "localtime( string $value [, int &$position ])", "parse( string $value [, int &$position ])", "setCalendar( mixed $which)", "setLenient( bool $lenient)", "setPattern( string $pattern)", "setTimeZoneId( string $zone)", "setTimeZone( mixed $zone)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "current( void)", "key( void)", "next( void)", "rewind( void)", "valid( void)", "getBreakIterator( void)", "current( void)", "key( void)", "next( void)", "rewind( void)", "valid( void)", "__construct( string $rules [, string $areCompiled ])", "getBinaryRules( void)", "getRules( void)", "getRuleStatus( void)", "getRuleStatusVec( void)", "__construct( void)", "createCharacterInstance([ string $&quot;locale&quot; ])", "createCodePointInstance( void)", "createLineInstance([ string $&quot;locale&quot; ])", "createSentenceInstance([ string $&quot;locale&quot; ])", "createTitleInstance([ string $&quot;locale&quot; ])", "createWordInstance([ string $&quot;locale&quot; ])", "current( void)", "first( void)", "following( string $&quot;offset&quot;)", "getErrorCode( void)", "intl_get_error_code( void)", "getErrorMessage( void)", "intl_get_error_message( void)", "getLocale( string $&quot;locale_type&quot;)", "getPartsIterator([ string $&quot;key_type&quot; ])", "getText( void)", "isBoundary( string $&quot;offset&quot;)", "last( void)", "next([ string $&quot;offset&quot; ])", "preceding( string $&quot;offset&quot;)", "previous( void)", "setText( string $&quot;text&quot;)", "countEquivalentIDs( string $zoneId)", "createDefault( void)", "createEnumeration([ mixed $countryOrRawOffset ])", "createTimeZone( string $zoneId)", "fromDateTimeZone( DateTimeZone $zoneId)", "getCanonicalID( string $zoneId [, bool &$isSystemID ])", "getDisplayName([ bool $isDaylight [, integer $style [, string $locale ]]])", "getDSTSavings( void)", "getEquivalentID( string $zoneId , integer $index)", "getErrorCode( void)", "getErrorMessage( void)", "getGMT( void)", "getID( void)", "getOffset( float $date , bool $local , integer &$rawOffset , integer &$dstOffset)", "getRawOffset( void)", "getTZDataVersion( void)", "hasSameRules( IntlTimeZone $otherTimeZone)", "toDateTimeZone( void)", "useDaylightTime( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "current( void)", "key( void)", "next( void)", "rewind( void)", "valid( void)", "getIterator( void)", "__construct( Traversable $iterator)", "current( void)", "getInnerIterator( void)", "key( void)", "next( void)", "rewind( void)", "valid( void)", "jsonSerialize( void)", "byCount( int $nth_index)", "__construct( int $judy_type)", "count([ int $index_start = 0 [, int $index_end = -1 ]])", "__destruct( void)", "first([ mixed $index ])", "firstEmpty([ mixed $index = 0 ])", "free( void)", "getType( void)", "last([ string $index ])", "lastEmpty([ int $index = -1 ])", "memoryUsage( void)", "next( mixed $index)", "nextEmpty( int $index)", "offsetExists( mixed $offset)", "offsetGet( mixed $offset)", "offsetSet( mixed $offset , mixed $value)", "offsetUnset( mixed $offset)", "prev( mixed $index)", "prevEmpty( mixed $index)", "size( void)", "getDescription( void)", "getMimeType( void)", "getType( void)", "savePicture( string $filename)", "getMimeType( string $type)", "setPicture( string $filename)", "setType( int $type)", "getSize( void)", "__toString( void)", "getAlbum( void)", "getArtist( void)", "getComment( void)", "getGenre( void)", "getTitle( void)", "getTrack( void)", "getYear( void)", "isEmpty( void)", "getSize( void)", "__toString( void)", "getAlbum( void)", "getArtist( void)", "getComment( void)", "getGenre( void)", "getTitle( void)", "getTrack( void)", "getYear( void)", "isEmpty( void)", "addFrame( KTaglib_ID3v2_Frame $frame)", "getFrameList( void)", "getAlbum( void)", "getArtist( void)", "getComment( void)", "getGenre( void)", "getTitle( void)", "getTrack( void)", "getYear( void)", "isEmpty( void)", "getBitrate( void)", "getChannels( void)", "getLayer( void)", "getLength( void)", "getSampleBitrate( void)", "getVersion( void)", "isCopyrighted( void)", "isOriginal( void)", "isProtectionEnabled( void)", "getAudioProperties( void)", "getID3v1Tag([ bool $create = false ])", "getID3v2Tag([ bool $create = false ])", "getAlbum( void)", "getArtist( void)", "getComment( void)", "getGenre( void)", "getTitle( void)", "getTrack( void)", "getYear( void)", "isEmpty( void)", "eigenValues( array $a [, array $left [, array $right ]])", "identity( int $n)", "leastSquaresByFactorisation( array $a , array $b)", "leastSquaresBySVD( array $a , array $b)", "pseudoInverse( array $a)", "singularValues( array $a)", "solveLinearEquation( array $a , array $b)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "__construct( Iterator $iterator [, int $offset = 0 [, int $count = -1 ]])", "current( void)", "getInnerIterator( void)", "getPosition( void)", "key( void)", "next( void)", "rewind( void)", "seek( int $position)", "valid( void)", "acceptFromHttp( string $header)", "canonicalize( string $locale)", "composeLocale( array $subtags)", "filterMatches( string $langtag , string $locale [, bool $canonicalize = false ])", "getAllVariants( string $locale)", "getDefault( void)", "getDisplayLanguage( string $locale [, string $in_locale ])", "getDisplayName( string $locale [, string $in_locale ])", "getDisplayRegion( string $locale [, string $in_locale ])", "getDisplayScript( string $locale [, string $in_locale ])", "getDisplayVariant( string $locale [, string $in_locale ])", "getKeywords( string $locale)", "getPrimaryLanguage( string $locale)", "getRegion( string $locale)", "getScript( string $locale)", "lookup( array $langtag , string $locale [, bool $canonicalize = false [, string $default ]])", "parseLocale( string $locale)", "setDefault( string $locale)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "assign( string $name , string $value)", "call( callable $lua_func [, array $args [, int $use_self = 0 ]])", "__call( callable $lua_func [, array $args [, int $use_self = 0 ]])", "__construct( string $lua_script_file = NULL)", "eval( string $statements)", "getVersion( void)", "include( string $file)", "registerCallback( string $name , callable $function)", "__invoke( mixed $arg [, mixed $... ])", "add( string $key , mixed $var [, int $flag [, int $expire ]])", "addServer( string $host [, int $port = 11211 [, bool $persistent [, int $weight [, int $timeout [, int $retry_interval [, bool $status [, callable $failure_callback [, int $timeoutms ]]]]]]]])", "close( void)", "connect( string $host [, int $port [, int $timeout ]])", "decrement( string $key [, int $value = 1 ])", "delete( string $key [, int $timeout = 0 ])", "flush( void)", "get( string $key [, int &$flags ])", "getExtendedStats([ string $type [, int $slabid [, int $limit = 100 ]]])", "getServerStatus( string $host [, int $port = 11211 ])", "getStats([ string $type [, int $slabid [, int $limit = 100 ]]])", "getVersion( void)", "increment( string $key [, int $value = 1 ])", "pconnect( string $host [, int $port [, int $timeout ]])", "replace( string $key , mixed $var [, int $flag [, int $expire ]])", "set( string $key , mixed $var [, int $flag [, int $expire ]])", "setCompressThreshold( int $threshold [, float $min_savings ])", "setServerParams( string $host [, int $port = 11211 [, int $timeout [, int $retry_interval = false [, bool $status [, callable $failure_callback ]]]]])", "add( string $key , mixed $value [, int $expiration ])", "addByKey( string $server_key , string $key , mixed $value [, int $expiration ])", "addServer( string $host , int $port [, int $weight = 0 ])", "addServers( array $servers)", "append( string $key , string $value)", "appendByKey( string $server_key , string $key , string $value)", "cas( float $cas_token , string $key , mixed $value [, int $expiration ])", "casByKey( float $cas_token , string $server_key , string $key , mixed $value [, int $expiration ])", "decrement( string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]])", "decrementByKey( string $server_key , string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]])", "delete( string $key [, int $time = 0 ])", "deleteByKey( string $server_key , string $key [, int $time = 0 ])", "deleteMulti( array $keys [, int $time = 0 ])", "deleteMultiByKey( string $server_key , array $keys [, int $time = 0 ])", "fetch( void)", "fetchAll( void)", "flush([ int $delay = 0 ])", "get( string $key [, callable $cache_cb [, float &$cas_token ]])", "getAllKeys( void)", "getByKey( string $server_key , string $key [, callable $cache_cb [, float &$cas_token ]])", "getDelayed( array $keys [, bool $with_cas [, callable $value_cb ]])", "getDelayedByKey( string $server_key , array $keys [, bool $with_cas [, callable $value_cb ]])", "getMulti( array $keys [, array &$cas_tokens [, int $flags ]])", "getMultiByKey( string $server_key , array $keys [, string &$cas_tokens [, int $flags ]])", "getOption( int $option)", "getResultCode( void)", "getResultMessage( void)", "getServerByKey( string $server_key)", "getServerList( void)", "getStats( void)", "getVersion( void)", "increment( string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]])", "incrementByKey( string $server_key , string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]])", "isPersistent( void)", "isPristine( void)", "prepend( string $key , string $value)", "prependByKey( string $server_key , string $key , string $value)", "quit( void)", "replace( string $key , mixed $value [, int $expiration ])", "replaceByKey( string $server_key , string $key , mixed $value [, int $expiration ])", "resetServerList( void)", "set( string $key , mixed $value [, int $expiration ])", "setByKey( string $server_key , string $key , mixed $value [, int $expiration ])", "setMulti( array $items [, int $expiration ])", "setMultiByKey( string $server_key , array $items [, int $expiration ])", "setOption( int $option , mixed $value)", "setOptions( array $options)", "setSaslAuthData( string $username , string $password)", "touch( string $key , int $expiration)", "touchByKey( string $server_key , string $key , int $expiration)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "create( string $locale , string $pattern)", "formatMessage( string $locale , string $pattern , array $args)", "format( array $args)", "getErrorCode( void)", "getErrorMessage( void)", "getLocale( void)", "getPattern( void)", "parseMessage( string $locale , string $pattern , string $source)", "parse( string $value)", "setPattern( string $pattern)", "connectUtil( void)", "getPoolSize( void)", "getSlave( void)", "getSlaveOkay( void)", "poolDebug( void)", "setPoolSize( int $size)", "setSlaveOkay([ bool $ok = true ])", "switchSlave( void)", "close([ boolean|string $connection ])", "connect( void)", "dropDB( mixed $db)", "__get( string $dbname)", "getConnections( void)", "getHosts( void)", "getReadPreference( void)", "getWriteConcern( void)", "killCursor( string $server_hash , int|MongoInt64 $id)", "listDBs( void)", "selectCollection( string $db , string $collection)", "selectDB( string $name)", "setReadPreference( string $read_preference [, array $tags ])", "setWriteConcern( mixed $w [, int $wtimeout ])", "__toString( void)", "__construct( string $data [, int $type = 0 ])", "__toString( void)", "close([ boolean|string $connection ])", "connect( void)", "dropDB( mixed $db)", "__get( string $dbname)", "getConnections( void)", "getHosts( void)", "getReadPreference( void)", "getWriteConcern( void)", "killCursor( string $server_hash , int|MongoInt64 $id)", "listDBs( void)", "selectCollection( string $db , string $collection)", "selectDB( string $name)", "setReadPreference( string $read_preference [, array $tags ])", "setWriteConcern( mixed $w [, int $wtimeout ])", "__toString( void)", "__construct( string $code [, array $scope = array() ])", "__toString( void)", "aggregate( array $pipeline [, array $options ])", "aggregateCursor( array $command [, array $options ])", "batchInsert( array $a [, array $options = array() ])", "__construct( MongoDB $db , string $name)", "count([ array $query = array() [, int $limit = 0 [, int $skip = 0 ]]])", "createDBRef( mixed $document_or_id)", "createIndex( array $keys [, array $options = array() ])", "deleteIndex( string|array $keys)", "deleteIndexes( void)", "distinct( string $key [, array $query ])", "drop( void)", "ensureIndex( string|array $key|keys [, array $options = array() ])", "find([ array $query = array() [, array $fields = array() ]])", "findAndModify( array $query [, array $update [, array $fields [, array $options ]]])", "findOne([ array $query = array() [, array $fields = array() [, array $options = array() ]]])", "__get( string $name)", "getDBRef( array $ref)", "getIndexInfo( void)", "getName( void)", "getReadPreference( void)", "getSlaveOkay( void)", "getWriteConcern( void)", "group( mixed $keys , array $initial , MongoCode $reduce [, array $options = array() ])", "insert( array|object $a [, array $options = array() ])", "public array[MongoCommandCursor] parallelCollectionScan( int $num_cursors)", "remove([ array $criteria = array() [, array $options = array() ]])", "save( array|object $a [, array $options = array() ])", "setReadPreference( string $read_preference [, array $tags ])", "setSlaveOkay([ bool $ok = true ])", "setWriteConcern( mixed $w [, int $wtimeout ])", "toIndexString( mixed $keys)", "__toString( void)", "update( array $criteria , array $new_object [, array $options = array() ])", "validate([ bool $scan_data = FALSE ])", "batchSize( int $batchSize)", "__construct( MongoClient $connection , string $ns [, array $command = array() ])", "createFromDocument( MongoClient $connection , string $hash , array $document)", "current( void)", "dead( void)", "info( void)", "key( void)", "next( void)", "rewind( void)", "valid( void)", "addOption( string $key , mixed $value)", "awaitData([ bool $wait = true ])", "batchSize( int $batchSize)", "__construct( MongoClient $connection , string $ns [, array $query = array() [, array $fields = array() ]])", "count([ bool $foundOnly = FALSE ])", "current( void)", "dead( void)", "doQuery( void)", "explain( void)", "fields( array $f)", "getNext( void)", "getReadPreference( void)", "hasNext( void)", "hint( mixed $index)", "immortal([ bool $liveForever = true ])", "info( void)", "key( void)", "limit( int $num)", "maxTimeMS( int $ms)", "next( void)", "partial([ bool $okay = true ])", "reset( void)", "rewind( void)", "setFlag( int $flag [, bool $set = true ])", "setReadPreference( string $read_preference [, array $tags ])", "skip( int $num)", "slaveOkay([ bool $okay = true ])", "snapshot( void)", "sort( array $fields)", "tailable([ bool $tail = true ])", "timeout( int $ms)", "valid( void)", "__construct([ int $sec = time() [, int $usec = 0 ]])", "__toString( void)", "authenticate( string $username , string $password)", "command( array $command [, array $options = array() ])", "__construct( MongoClient $conn , string $name)", "createCollection( string $name [, array $options ])", "createDBRef( string $collection , mixed $document_or_id)", "drop( void)", "dropCollection( mixed $coll)", "execute( mixed $code [, array $args = array() ])", "forceError( void)", "__get( string $name)", "getCollectionNames([ bool $includeSystemCollections = false ])", "getDBRef( array $ref)", "getGridFS([ string $prefix = &quot;fs&quot; ])", "getProfilingLevel( void)", "getReadPreference( void)", "getSlaveOkay( void)", "getWriteConcern( void)", "lastError( void)", "listCollections([ bool $includeSystemCollections = false ])", "prevError( void)", "repair([ bool $preserve_cloned_files = FALSE [, bool $backup_original_files = FALSE ]])", "resetError( void)", "selectCollection( string $name)", "setProfilingLevel( int $level)", "setReadPreference( string $read_preference [, array $tags ])", "setSlaveOkay([ bool $ok = true ])", "setWriteConcern( mixed $w [, int $wtimeout ])", "__toString( void)", "create( string $collection , mixed $id [, string $database ])", "get( MongoDB $db , array $ref)", "isRef( mixed $ref)", "__construct( MongoCollection $collection [, array $write_options ])", "add( array $item)", "execute( array $write_options)", "getDocument( void)", "__construct( MongoDB $db [, string $prefix = &quot;fs&quot; [, mixed $chunks = &quot;fs&quot; ]])", "delete( mixed $id)", "drop( void)", "find([ array $query = array() [, array $fields = array() ]])", "findOne([ mixed $query = array() [, mixed $fields = array() ]])", "get( mixed $id)", "put( string $filename [, array $metadata = array() [, array $options = array() ]])", "remove([ array $criteria = array() [, array $options = array() ]])", "storeBytes( string $bytes [, array $metadata = array() [, array $options = array() ]])", "storeFile( string $filename [, array $metadata = array() [, array $options = array() ]])", "storeUpload( string $name [, array $metadata ])", "__construct( MongoGridFS $gridfs , resource $connection , string $ns , array $query , array $fields)", "current( void)", "getNext( void)", "key( void)", "__construct( MongoGridFS $gridfs , array $file)", "getBytes( void)", "getFilename( void)", "getResource( void)", "getSize( void)", "write([ string $filename = NULL ])", "__construct([ string $id = NULL ])", "getHostname( void)", "getInc( void)", "getPID( void)", "getTimestamp( void)", "isValid( mixed $value)", "__set_state( array $props)", "__toString( void)", "__construct( MongoCollection $collection [, array $write_options ])", "add( array $item)", "execute( array $write_options)", "__construct( string $value)", "__toString( void)", "__construct( string $value)", "__toString( void)", "getCallback( void)", "getLevel( void)", "getModule( void)", "setCallback( callable $log_function)", "setLevel( int $level)", "setModule( int $module)", "getSize( void)", "info( void)", "setSize( int $size)", "__construct( string $regex)", "__toString( void)", "getDocument( void)", "__construct([ int $sec = time() [, int $inc ]])", "__toString( void)", "__construct( MongoCollection $collection [, array $write_options ])", "add( array $item)", "execute( array $write_options)", "add( array $item)", "execute( array $write_options)", "getDocument( void)", "getHost( void)", "attachIterator( Iterator $iterator [, string $infos ])", "containsIterator( Iterator $iterator)", "countIterators( void)", "current( void)", "detachIterator( Iterator $iterator)", "getFlags( void)", "key( void)", "next( void)", "rewind( void)", "setFlags( int $flags)", "valid( void)", "create([ boolean $lock ])", "destroy( long $mutex)", "lock( long $mutex)", "trylock( long $mutex)", "unlock( long $mutex [, boolean $destroy ])", "embedded_server_end( void)", "embedded_server_start( bool $start , array $arguments , array $groups)", "data_seek( int $offset)", "fetch_all([ int $resulttype = MYSQLI_NUM ])", "fetch_array([ int $resulttype = MYSQLI_BOTH ])", "fetch_assoc( void)", "fetch_field_direct( int $fieldnr)", "fetch_field( void)", "fetch_fields( void)", "fetch_object([ string $class_name = &quot;stdClass&quot; [, array $params ]])", "fetch_row( void)", "field_seek( int $fieldnr)", "free( void)", "attr_get( int $attr)", "attr_set( int $attr , int $mode)", "bind_param( string $types , mixed &$var1 [, mixed &$... ])", "bind_result( mixed &$var1 [, mixed &$... ])", "close( void)", "data_seek( int $offset)", "execute( void)", "fetch( void)", "free_result( void)", "get_result( void)", "get_warnings( mysqli_stmt $stmt)", "prepare( string $query)", "reset( void)", "result_metadata( void)", "send_long_data( int $param_nr , string $data)", "store_result( void)", "__construct( void)", "next( void)", "autocommit( bool $mode)", "change_user( string $user , string $password , string $database)", "character_set_name( void)", "close( void)", "commit([ int $flags [, string $name ]])", "debug( string $message)", "dump_debug_info( void)", "get_charset( void)", "get_client_info( void)", "get_connection_stats( void)", "get_warnings( void)", "init( void)", "kill( int $processid)", "more_results( void)", "multi_query( string $query)", "next_result( void)", "options( int $option , mixed $value)", "ping( void)", "poll( array &$read , array &$error , array &$reject , int $sec [, int $usec ])", "prepare( string $query)", "query( string $query [, int $resultmode = MYSQLI_STORE_RESULT ])", "real_connect([ string $host [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket [, int $flags ]]]]]]])", "escape_string( string $escapestr)", "real_query( string $query)", "reap_async_query( void)", "refresh( int $options)", "rollback([ int $flags [, string $name ]])", "rpl_query_type( string $query)", "select_db( string $dbname)", "send_query( string $query)", "set_charset( string $charset)", "set_local_infile_handler( mysqli $link , callable $read_func)", "ssl_set( string $key , string $cert , string $ca , string $capath , string $cipher)", "stat( void)", "stmt_init( void)", "store_result([ int $option ])", "use_result( void)", "changeUser( mysqlnd_connection $connection , string $user , string $password , string $database , bool $silent , int $passwd_len)", "charsetName( mysqlnd_connection $connection)", "close( mysqlnd_connection $connection , int $close_type)", "connect( mysqlnd_connection $connection , string $host , string $use&quot; , string $password , string $database , int $port , string $socket , int $mysql_flags)", "__construct( void)", "endPSession( mysqlnd_connection $connection)", "escapeString( mysqlnd_connection $connection , string $escape_string)", "getAffectedRows( mysqlnd_connection $connection)", "getErrorNumber( mysqlnd_connection $connection)", "getErrorString( mysqlnd_connection $connection)", "getFieldCount( mysqlnd_connection $connection)", "getHostInformation( mysqlnd_connection $connection)", "getLastInsertId( mysqlnd_connection $connection)", "getLastMessage( mysqlnd_connection $connection)", "getProtocolInformation( mysqlnd_connection $connection)", "getServerInformation( mysqlnd_connection $connection)", "getServerStatistics( mysqlnd_connection $connection)", "getServerVersion( mysqlnd_connection $connection)", "getSqlstate( mysqlnd_connection $connection)", "getStatistics( mysqlnd_connection $connection)", "getThreadId( mysqlnd_connection $connection)", "getWarningCount( mysqlnd_connection $connection)", "init( mysqlnd_connection $connection)", "killConnection( mysqlnd_connection $connection , int $pid)", "listFields( mysqlnd_connection $connection , string $table , string $achtung_wild)", "listMethod( mysqlnd_connection $connection , string $query , string $achtung_wild , string $par1)", "moreResults( mysqlnd_connection $connection)", "nextResult( mysqlnd_connection $connection)", "ping( mysqlnd_connection $connection)", "query( mysqlnd_connection $connection , string $query)", "queryReadResultsetHeader( mysqlnd_connection $connection , mysqlnd_statement $mysqlnd_stmt)", "reapQuery( mysqlnd_connection $connection)", "refreshServer( mysqlnd_connection $connection , int $options)", "restartPSession( mysqlnd_connection $connection)", "selectDb( mysqlnd_connection $connection , string $database)", "sendClose( mysqlnd_connection $connection)", "sendQuery( mysqlnd_connection $connection , string $query)", "serverDumpDebugInformation( mysqlnd_connection $connection)", "setAutocommit( mysqlnd_connection $connection , int $mode)", "setCharset( mysqlnd_connection $connection , string $charset)", "setClientOption( mysqlnd_connection $connection , int $option , int $value)", "setServerOption( mysqlnd_connection $connection , int $option)", "shutdownServer( string $MYSQLND_UH_RES_MYSQLND_NAME , string $&quot;level&quot;)", "simpleCommand( mysqlnd_connection $connection , int $command , string $arg , int $ok_packet , bool $silent , bool $ignore_upsert_status)", "simpleCommandHandleResponse( mysqlnd_connection $connection , int $ok_packet , bool $silent , int $command , bool $ignore_upsert_status)", "sslSet( mysqlnd_connection $connection , string $key , string $cert , string $ca , string $capath , string $cipher)", "stmtInit( mysqlnd_connection $connection)", "storeResult( mysqlnd_connection $connection)", "txCommit( mysqlnd_connection $connection)", "txRollback( mysqlnd_connection $connection)", "useResult( mysqlnd_connection $connection)", "__construct( void)", "execute( mysqlnd_prepared_statement $statement)", "prepare( mysqlnd_prepared_statement $statement , string $query)", "__construct( Iterator $iterator)", "current( void)", "getInnerIterator( void)", "key( void)", "next( void)", "rewind( void)", "valid( void)", "__construct( Traversable $iterator)", "current( void)", "getInnerIterator( void)", "key( void)", "next( void)", "rewind( void)", "valid( void)", "FORM_C ])", "FORM_C ])", "create( string $locale , int $style [, string $pattern ])", "formatCurrency( float $value , string $currency)", "format( number $value [, int $type ])", "getAttribute( int $attr)", "getErrorCode( void)", "getErrorMessage( void)", "getLocale([ int $type ])", "getPattern( void)", "getSymbol( int $attr)", "getTextAttribute( int $attr)", "parseCurrency( string $value , string &$currency [, int &$position ])", "parse( string $value [, int $type [, int &$position ]])", "setAttribute( int $attr , int $value)", "setPattern( string $pattern)", "setSymbol( int $attr , string $value)", "setTextAttribute( int $attr , string $value)", "__construct( string $consumer_key , string $consumer_secret [, string $signature_method = OAUTH_SIG_METHOD_HMACSHA1 [, int $auth_type = 0 ]])", "__destruct( void)", "disableDebug( void)", "disableRedirects( void)", "disableSSLChecks( void)", "enableDebug( void)", "enableRedirects( void)", "enableSSLChecks( void)", "fetch( string $protected_resource_url [, array $extra_parameters [, string $http_method [, array $http_headers ]]])", "generateSignature( string $http_method , string $url [, mixed $extra_parameters ])", "getAccessToken( string $access_token_url [, string $auth_session_handle [, string $verifier_token ]])", "getCAPath( void)", "getLastResponse( void)", "getLastResponseHeaders( void)", "getLastResponseInfo( void)", "getRequestHeader( string $http_method , string $url [, mixed $extra_parameters ])", "getRequestToken( string $request_token_url [, string $callback_url ])", "setAuthType( int $auth_type)", "setCAPath([ string $ca_path [, string $ca_info ]])", "setNonce( string $nonce)", "setRequestEngine( int $reqengine)", "setRSACertificate( string $cert)", "setSSLChecks( int $sslcheck)", "setTimestamp( string $timestamp)", "setToken( string $token , string $token_secret)", "setVersion( string $version)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "addRequiredParameter( string $req_params)", "callconsumerHandler( void)", "callTimestampNonceHandler( void)", "calltokenHandler( void)", "checkOAuthRequest([ string $uri [, string $method ]])", "__construct([ array $params_array ])", "consumerHandler( callable $callback_function)", "generateToken( int $size [, bool $strong = false ])", "is2LeggedEndpoint( mixed $params_array)", "isRequestTokenEndpoint( bool $will_issue_request_token)", "removeRequiredParameter( string $req_params)", "reportProblem( string $oauthexception [, bool $send_headers = true ])", "setParam( string $param_key [, mixed $param_val ])", "setRequestTokenPath( string $path)", "timestampNonceHandler( callable $callback_function)", "tokenHandler( callable $callback_function)", "append( mixed $value)", "assign( OCI-Collection $from)", "assignElem( int $index , mixed $value)", "free( void)", "getElem( int $index)", "max( void)", "size( void)", "trim( int $num)", "append( OCI-Lob $lob_from)", "close( void)", "eof( void)", "erase([ int $offset [, int $length ]])", "export( string $filename [, int $start [, int $length ]])", "flush([ int $flag ])", "free( void)", "getBuffering( void)", "import( string $filename)", "load( void)", "rewind( void)", "save( string $data [, int $offset ])", "seek( int $offset [, int $whence = OCI_SEEK_SET ])", "setBuffering( bool $on_off)", "size( void)", "tell( void)", "truncate([ int $length = 0 ])", "write( string $data [, int $length ])", "writeTemporary( string $data [, int $lob_type = OCI_TEMP_CLOB ])", "getInnerIterator( void)", "current( void)", "key( void)", "next( void)", "rewind( void)", "valid( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "accept( void)", "__construct( RecursiveIterator $iterator)", "getChildren( void)", "hasChildren( void)", "next( void)", "rewind( void)", "beginTransaction( void)", "commit( void)", "errorCode( void)", "errorInfo( void)", "exec( string $statement)", "getAttribute( int $attribute)", "getAvailableDrivers( void)", "inTransaction( void)", "lastInsertId([ string $name = NULL ])", "prepare( string $statement [, array $driver_options = array() ])", "query( string $statement)", "PARAM_STR ])", "rollBack( void)", "setAttribute( int $attribute , mixed $value)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "bindColumn( mixed $column , mixed &$param [, int $type [, int $maxlen [, mixed $driverdata ]]])", "PARAM_STR [, int $length [, mixed $driver_options ]]])", "PARAM_STR ])", "closeCursor( void)", "columnCount( void)", "debugDumpParams( void)", "errorCode( void)", "errorInfo( void)", "execute([ array $input_parameters ])", "FETCH_ORI_NEXT [, int $cursor_offset = 0 ]]])", "fetchAll([ int $fetch_style [, mixed $fetch_argument [, array $ctor_args = array() ]]])", "fetchColumn([ int $column_number = 0 ])", "fetchObject([ string $class_name = &quot;stdClass&quot; [, array $ctor_args ]])", "getAttribute( int $attribute)", "getColumnMeta( int $column)", "nextRowset( void)", "rowCount( void)", "setAttribute( int $attribute , mixed $value)", "setFetchMode( int $mode)", "addEmptyDir( string $dirname)", "addFile( string $file [, string $localname ])", "addFromString( string $localname , string $contents)", "apiVersion( void)", "buildFromDirectory( string $base_dir [, string $regex ])", "buildFromIterator( Iterator $iter [, string $base_directory ])", "canCompress([ int $type = 0 ])", "canWrite( void)", "compress( int $compression [, string $extension ])", "compressAllFilesBZIP2( void)", "compressAllFilesGZ( void)", "compressFiles( int $compression)", "__construct( string $fname [, int $flags [, string $alias ]])", "convertToData([ int $format = 9021976 [, int $compression = 9021976 [, string $extension ]]])", "convertToExecutable([ int $format = 9021976 [, int $compression = 9021976 [, string $extension ]]])", "copy( string $oldfile , string $newfile)", "count( void)", "createDefaultStub([ string $indexfile [, string $webindexfile ]])", "decompress([ string $extension ])", "decompressFiles( void)", "delMetadata( void)", "delete( string $entry)", "extractTo( string $pathto [, string|array $files [, bool $overwrite = false ]])", "getMetadata( void)", "getModified( void)", "getSignature( void)", "getStub( void)", "getSupportedCompression( void)", "getSupportedSignatures( void)", "getVersion( void)", "hasMetadata( void)", "interceptFileFuncs( void)", "isBuffering( void)", "isCompressed( void)", "isFileFormat( int $format)", "isValidPharFilename( string $filename [, bool $executable = true ])", "isWritable( void)", "loadPhar( string $filename [, string $alias ])", "mapPhar([ string $alias [, int $dataoffset = 0 ]])", "mount( string $pharpath , string $externalpath)", "mungServer( array $munglist)", "offsetExists( string $offset)", "offsetGet( string $offset)", "offsetSet( string $offset , string $value)", "offsetUnset( string $offset)", "running([ bool $retphar = true ])", "setAlias( string $alias)", "setDefaultStub([ string $index [, string $webindex ]])", "setMetadata( mixed $metadata)", "setSignatureAlgorithm( int $sigtype [, string $privatekey ])", "setStub( string $stub [, int $len = -1 ])", "startBuffering( void)", "stopBuffering( void)", "uncompressAllFiles( void)", "unlinkArchive( string $archive)", "webPhar([ string $alias [, string $index = &quot;index.php&quot; [, string $f404 [, array $mimetypes [, callable $rewrites ]]]]])", "addEmptyDir( string $dirname)", "addFile( string $file [, string $localname ])", "addFromString( string $localname , string $contents)", "buildFromDirectory( string $base_dir [, string $regex ])", "buildFromIterator( Iterator $iter [, string $base_directory ])", "compress( int $compression [, string $extension ])", "compressFiles( int $compression)", "TAR ]]])", "convertToData([ int $format [, int $compression [, string $extension ]]])", "convertToExecutable([ int $format [, int $compression [, string $extension ]]])", "copy( string $oldfile , string $newfile)", "decompress([ string $extension ])", "decompressFiles( void)", "delMetadata( void)", "delete( string $entry)", "extractTo( string $pathto [, string|array $files [, bool $overwrite = false ]])", "isWritable( void)", "offsetSet( string $offset , string $value)", "offsetUnset( string $offset)", "setAlias( string $alias)", "setDefaultStub([ string $index [, string $webindex ]])", "setMetadata( mixed $metadata)", "setSignatureAlgorithm( int $sigtype)", "setStub( string $stub [, int $len = -1 ])", "addEmptyDir( string $dirname)", "addFile( string $file [, string $localname ])", "addFromString( string $localname , string $contents)", "apiVersion( void)", "buildFromDirectory( string $base_dir [, string $regex ])", "buildFromIterator( Iterator $iter [, string $base_directory ])", "canCompress([ int $type = 0 ])", "canWrite( void)", "compress( int $compression [, string $extension ])", "compressAllFilesBZIP2( void)", "compressAllFilesGZ( void)", "compressFiles( int $compression)", "__construct( string $fname [, int $flags [, string $alias ]])", "convertToData([ int $format = 9021976 [, int $compression = 9021976 [, string $extension ]]])", "convertToExecutable([ int $format = 9021976 [, int $compression = 9021976 [, string $extension ]]])", "copy( string $oldfile , string $newfile)", "count( void)", "createDefaultStub([ string $indexfile [, string $webindexfile ]])", "decompress([ string $extension ])", "decompressFiles( void)", "delMetadata( void)", "delete( string $entry)", "extractTo( string $pathto [, string|array $files [, bool $overwrite = false ]])", "getMetadata( void)", "getModified( void)", "getSignature( void)", "getStub( void)", "getSupportedCompression( void)", "getSupportedSignatures( void)", "getVersion( void)", "hasMetadata( void)", "interceptFileFuncs( void)", "isBuffering( void)", "isCompressed( void)", "isFileFormat( int $format)", "isValidPharFilename( string $filename [, bool $executable = true ])", "isWritable( void)", "loadPhar( string $filename [, string $alias ])", "mapPhar([ string $alias [, int $dataoffset = 0 ]])", "mount( string $pharpath , string $externalpath)", "mungServer( array $munglist)", "offsetExists( string $offset)", "offsetGet( string $offset)", "offsetSet( string $offset , string $value)", "offsetUnset( string $offset)", "running([ bool $retphar = true ])", "setAlias( string $alias)", "setDefaultStub([ string $index [, string $webindex ]])", "setMetadata( mixed $metadata)", "setSignatureAlgorithm( int $sigtype [, string $privatekey ])", "setStub( string $stub [, int $len = -1 ])", "startBuffering( void)", "stopBuffering( void)", "uncompressAllFiles( void)", "unlinkArchive( string $archive)", "webPhar([ string $alias [, string $index = &quot;index.php&quot; [, string $f404 [, array $mimetypes [, callable $rewrites ]]]]])", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "chmod( int $permissions)", "compress( int $compression)", "__construct( string $entry)", "decompress( void)", "delMetadata( void)", "getCRC32( void)", "getCompressedSize( void)", "getMetadata( void)", "getPharFlags( void)", "hasMetadata( void)", "isCRCChecked( void)", "isCompressed([ int $compression_type = 9021976 ])", "isCompressedBZIP2( void)", "isCompressedGZ( void)", "setCompressedBZIP2( void)", "setCompressedGZ( void)", "setMetadata( mixed $metadata)", "setUncompressed( void)", "filter( resource $in , resource $out , int &$consumed , bool $closing)", "onClose( void)", "onCreate( void)", "collect( Callable $collector)", "__construct( integer $size , string $class [, array $ctor ])", "resize( integer $size)", "shutdown( void)", "submit( Threaded $task)", "submitTo( integer $worker , Threaded $task)", "add( int $key [, int $value ])", "__construct( int $size [, int $options ])", "delete( int $key)", "exists( int $key)", "get( int $key)", "getSize( void)", "loadFromFile( string $filename [, int $options ])", "loadFromString( string $contents [, int $options ])", "saveToFile( string $filename)", "saveToString( void)", "set( int $key , int $value)", "update( int $key , int $value)", "add( int $key)", "__construct( int $size [, int $options ])", "delete( int $key)", "exists( int $key)", "getSize( void)", "loadFromFile( string $filename [, int $size [, int $options ]])", "loadFromString( string $contents [, int $size [, int $options ]])", "saveToFile( string $filename)", "saveToString( void)", "add( int $key , string $value)", "__construct( int $size [, int $options = 0 ])", "delete( int $key)", "exists( int $key)", "get( int $key)", "getSize( void)", "loadFromFile( string $filename [, int $size = 0 [, int $options = 0 ]])", "loadFromString( string $contents [, int $size = 0 [, int $options = 0 ]])", "saveToFile( string $filename)", "saveToString( void)", "set( int $key , string $value)", "update( int $key , string $value)", "add( string $key , int $value)", "__construct( int $size [, int $options = 0 ])", "delete( string $key)", "exists( string $key)", "get( string $key)", "getSize( void)", "loadFromFile( string $filename [, int $size = 0 [, int $options = 0 ]])", "loadFromString( string $contents [, int $size = 0 [, int $options = 0 ]])", "saveToFile( string $filename)", "saveToString( void)", "set( string $key , int $value)", "update( string $key , int $value)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "close( void)", "getComment( void)", "getEntries( void)", "getEntry( string $entryname)", "isBroken( void)", "isSolid( void)", "open( string $filename [, string $password = NULL [, callable $volume_callback = NULL ]])", "setAllowBroken( bool $allow_broken)", "__toString( void)", "extract( string $dir [, string $filepath = &quot;&quot; [, string $password = NULL [, bool $extended_data = false ]]])", "getAttr( void)", "getCrc( void)", "getFileTime( void)", "getHostOs( void)", "getMethod( void)", "getName( void)", "getPackedSize( void)", "getStream([ string $password ])", "getUnpackedSize( void)", "getVersion( void)", "isDirectory( void)", "isEncrypted( void)", "__toString( void)", "isUsingExceptions( void)", "setUsingExceptions( bool $using_exceptions)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "getChildren( void)", "hasChildren( void)", "append( mixed $value)", "asort( void)", "__construct([ mixed $array = array() [, int $flags = 0 ]])", "count( void)", "current( void)", "getArrayCopy( void)", "getFlags( void)", "key( void)", "ksort( void)", "natcasesort( void)", "natsort( void)", "next( void)", "offsetExists( string $index)", "offsetGet( string $index)", "offsetSet( string $index , string $newval)", "offsetUnset( string $index)", "rewind( void)", "seek( int $position)", "serialize( void)", "setFlags( string $flags)", "uasort( string $cmp_function)", "uksort( string $cmp_function)", "unserialize( string $serialized)", "valid( void)", "CALL_TOSTRING ])", "getChildren( void)", "hasChildren( void)", "__construct( Iterator $iterator [, string $flags = self::CALL_TOSTRING ])", "count( void)", "current( void)", "getCache( void)", "getFlags( void)", "getInnerIterator( void)", "hasNext( void)", "key( void)", "next( void)", "offsetExists( string $index)", "offsetGet( string $index)", "offsetSet( string $index , string $newval)", "offsetUnset( string $index)", "rewind( void)", "setFlags( bitmask $flags)", "__toString( void)", "valid( void)", "getChildren( void)", "hasChildren( void)", "accept( void)", "KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ])", "getChildren( void)", "getSubPath( void)", "getSubPathname( void)", "hasChildren([ bool $allow_links = false ])", "key( void)", "next( void)", "rewind( void)", "__construct( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS ])", "current( void)", "getFlags( void)", "key( void)", "next( void)", "rewind( void)", "setFlags([ int $flags ])", "__construct( RecursiveIterator $iterator)", "getChildren( void)", "hasChildren( void)", "accept( void)", "__construct( Iterator $iterator)", "current( void)", "getInnerIterator( void)", "key( void)", "next( void)", "rewind( void)", "valid( void)", "getChildren( void)", "hasChildren( void)", "current( void)", "key( void)", "next( void)", "rewind( void)", "valid( void)", "beginChildren( void)", "beginIteration( void)", "callGetChildren( void)", "callHasChildren( void)", "LEAVES_ONLY [, int $flags = 0 ]])", "current( void)", "endChildren( void)", "endIteration( void)", "getDepth( void)", "getInnerIterator( void)", "getMaxDepth( void)", "getSubIterator([ int $level ])", "key( void)", "next( void)", "nextElement( void)", "rewind( void)", "setMaxDepth([ string $max_depth = -1 ])", "valid( void)", "getInnerIterator( void)", "getChildren( void)", "hasChildren( void)", "getChildren( void)", "hasChildren( void)", "accept( void)", "getFlags( void)", "getMode( void)", "getPregFlags( void)", "getRegex( void)", "setFlags( int $flags)", "setMode( int $mode)", "setPregFlags( int $preg_flags)", "beginChildren( void)", "beginIteration( void)", "callGetChildren( void)", "callHasChildren( void)", "BYPASS_KEY [, int $cit_flags = CachingIterator::CATCH_GET_CHILD [, int $mode = RecursiveIteratorIterator::SELF_FIRST ]]])", "current( void)", "endChildren( void)", "endIteration( void)", "getEntry( void)", "getPostfix( void)", "getPrefix( void)", "key( void)", "next( void)", "nextElement( void)", "rewind( void)", "setPrefixPart( int $part , string $value)", "valid( void)", "beginChildren( void)", "beginIteration( void)", "callGetChildren( void)", "callHasChildren( void)", "__construct( Traversable $iterator [, int $mode = RecursiveIteratorIterator::LEAVES_ONLY [, int $flags = 0 ]])", "current( void)", "endChildren( void)", "endIteration( void)", "getDepth( void)", "getInnerIterator( void)", "getMaxDepth( void)", "getSubIterator([ int $level ])", "key( void)", "next( void)", "nextElement( void)", "rewind( void)", "setMaxDepth([ string $max_depth = -1 ])", "valid( void)", "export( Reflector $reflector [, bool $return = false ])", "getModifierNames( int $modifiers)", "__construct( mixed $argument)", "export( mixed $argument [, bool $return = false ])", "getConstant( string $name)", "getConstants( void)", "getConstructor( void)", "getDefaultProperties( void)", "getDocComment( void)", "getEndLine( void)", "getExtension( void)", "getExtensionName( void)", "getFileName( void)", "getInterfaceNames( void)", "getInterfaces( void)", "getMethod( string $name)", "getMethods([ int $filter ])", "getModifiers( void)", "getName( void)", "getNamespaceName( void)", "getParentClass( void)", "getProperties([ int $filter ])", "getProperty( string $name)", "getShortName( void)", "getStartLine( void)", "getStaticProperties( void)", "getStaticPropertyValue( string $name [, mixed &$def_value ])", "getTraitAliases( void)", "getTraitNames( void)", "getTraits( void)", "hasConstant( string $name)", "hasMethod( string $name)", "hasProperty( string $name)", "implementsInterface( string $interface)", "inNamespace( void)", "isAbstract( void)", "isCloneable( void)", "isFinal( void)", "isInstance( object $object)", "isInstantiable( void)", "isInterface( void)", "isInternal( void)", "isIterateable( void)", "isSubclassOf( string $class)", "isTrait( void)", "isUserDefined( void)", "newInstance( mixed $args [, mixed $... ])", "newInstanceArgs([ array $args ])", "newInstanceWithoutConstructor( void)", "setStaticPropertyValue( string $name , string $value)", "__toString( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "__clone( void)", "__construct( string $name)", "export( string $name [, string $return = false ])", "getClasses( void)", "getClassNames( void)", "getConstants( void)", "getDependencies( void)", "getFunctions( void)", "getINIEntries( void)", "getName( void)", "getVersion( void)", "info( void)", "isPersistent( void)", "isTemporary( void)", "__toString( void)", "__construct( mixed $name)", "export( string $name [, string $return ])", "getClosure( void)", "invoke([ mixed $parameter [, mixed $... ]])", "invokeArgs( array $args)", "isDisabled( void)", "__toString( void)", "__clone( void)", "getClosureScopeClass( void)", "getClosureThis( void)", "getDocComment( void)", "getEndLine( void)", "getExtension( void)", "getExtensionName( void)", "getFileName( void)", "getName( void)", "getNamespaceName( void)", "getNumberOfParameters( void)", "getNumberOfRequiredParameters( void)", "getParameters( void)", "getShortName( void)", "getStartLine( void)", "getStaticVariables( void)", "inNamespace( void)", "isClosure( void)", "isDeprecated( void)", "isGenerator( void)", "isInternal( void)", "isUserDefined( void)", "returnsReference( void)", "__toString( void)", "__clone( void)", "getClosureScopeClass( void)", "getClosureThis( void)", "getDocComment( void)", "getEndLine( void)", "getExtension( void)", "getExtensionName( void)", "getFileName( void)", "getName( void)", "getNamespaceName( void)", "getNumberOfParameters( void)", "getNumberOfRequiredParameters( void)", "getParameters( void)", "getShortName( void)", "getStartLine( void)", "getStaticVariables( void)", "inNamespace( void)", "isClosure( void)", "isDeprecated( void)", "isGenerator( void)", "isInternal( void)", "isUserDefined( void)", "returnsReference( void)", "__toString( void)", "__construct( mixed $class , string $name)", "export( string $class , string $name [, bool $return = false ])", "getClosure( object $object)", "getDeclaringClass( void)", "getModifiers( void)", "getPrototype( void)", "invoke( object $object [, mixed $parameter [, mixed $... ]])", "invokeArgs( object $object , array $args)", "isAbstract( void)", "isConstructor( void)", "isDestructor( void)", "isFinal( void)", "isPrivate( void)", "isProtected( void)", "isPublic( void)", "isStatic( void)", "setAccessible( bool $accessible)", "__toString( void)", "__clone( void)", "getClosureScopeClass( void)", "getClosureThis( void)", "getDocComment( void)", "getEndLine( void)", "getExtension( void)", "getExtensionName( void)", "getFileName( void)", "getName( void)", "getNamespaceName( void)", "getNumberOfParameters( void)", "getNumberOfRequiredParameters( void)", "getParameters( void)", "getShortName( void)", "getStartLine( void)", "getStaticVariables( void)", "inNamespace( void)", "isClosure( void)", "isDeprecated( void)", "isGenerator( void)", "isInternal( void)", "isUserDefined( void)", "returnsReference( void)", "__toString( void)", "__construct( object $argument)", "export( string $argument [, bool $return ])", "__construct( mixed $argument)", "export( mixed $argument [, bool $return = false ])", "getConstant( string $name)", "getConstants( void)", "getConstructor( void)", "getDefaultProperties( void)", "getDocComment( void)", "getEndLine( void)", "getExtension( void)", "getExtensionName( void)", "getFileName( void)", "getInterfaceNames( void)", "getInterfaces( void)", "getMethod( string $name)", "getMethods([ int $filter ])", "getModifiers( void)", "getName( void)", "getNamespaceName( void)", "getParentClass( void)", "getProperties([ int $filter ])", "getProperty( string $name)", "getShortName( void)", "getStartLine( void)", "getStaticProperties( void)", "getStaticPropertyValue( string $name [, mixed &$def_value ])", "getTraitAliases( void)", "getTraitNames( void)", "getTraits( void)", "hasConstant( string $name)", "hasMethod( string $name)", "hasProperty( string $name)", "implementsInterface( string $interface)", "inNamespace( void)", "isAbstract( void)", "isCloneable( void)", "isFinal( void)", "isInstance( object $object)", "isInstantiable( void)", "isInterface( void)", "isInternal( void)", "isIterateable( void)", "isSubclassOf( string $class)", "isTrait( void)", "isUserDefined( void)", "newInstance( mixed $args [, mixed $... ])", "newInstanceArgs([ array $args ])", "newInstanceWithoutConstructor( void)", "setStaticPropertyValue( string $name , string $value)", "__toString( void)", "allowsNull( void)", "canBePassedByValue( void)", "__clone( void)", "__construct( string $function , string $parameter)", "export( string $function , string $parameter [, bool $return ])", "getClass( void)", "getDeclaringClass( void)", "getDeclaringFunction( void)", "getDefaultValue( void)", "getDefaultValueConstantName( void)", "getName( void)", "getPosition( void)", "isArray( void)", "isCallable( void)", "isDefaultValueAvailable( void)", "isDefaultValueConstant( void)", "isOptional( void)", "isPassedByReference( void)", "__toString( void)", "__clone( void)", "__construct( mixed $class , string $name)", "export( mixed $class , string $name [, bool $return ])", "getDeclaringClass( void)", "getDocComment( void)", "getModifiers( void)", "getName( void)", "getValue([ object $object ])", "isDefault( void)", "isPrivate( void)", "isProtected( void)", "isPublic( void)", "isStatic( void)", "setAccessible( bool $accessible)", "setValue( object $object , mixed $value)", "__toString( void)", "__clone( void)", "__construct( string $name)", "export( string $name [, string $return ])", "getAuthor( void)", "getCopyright( void)", "getName( void)", "getURL( void)", "getVersion( void)", "__toString( void)", "export( void)", "__toString( void)", "accept( void)", "getFlags( void)", "getMode( void)", "getPregFlags( void)", "getRegex( void)", "setFlags( int $flags)", "setMode( int $mode)", "setPregFlags( int $preg_flags)", "accept( void)", "__construct( Iterator $iterator)", "current( void)", "getInnerIterator( void)", "key( void)", "next( void)", "rewind( void)", "valid( void)", "count( void)", "create( string $locale , string $bundlename [, bool $fallback ])", "getErrorCode( void)", "getErrorMessage( void)", "get( string|int $index)", "getLocales( string $bundlename)", "addArchive( string $description)", "addDataSource( string $description)", "__construct( string $path [, string $startTime [, int $step = 0 ]])", "save( void)", "__construct( string $path)", "save( void)", "saveVerbose( void)", "setOptions( array $options)", "__construct( string $path)", "update( array $values [, string $time = time() ])", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "seek( int $position)", "current( void)", "key( void)", "next( void)", "rewind( void)", "valid( void)", "serialize( void)", "unserialize( string $serialized)", "close( void)", "create_sid( void)", "destroy( string $session_id)", "gc( int $maxlifetime)", "open( string $save_path , string $session_id)", "read( string $session_id)", "write( string $session_id , string $session_data)", "close( void)", "destroy( string $session_id)", "gc( string $maxlifetime)", "open( string $save_path , string $name)", "read( string $session_id)", "write( string $session_id , string $session_data)", "addAttribute( string $name [, string $value [, string $namespace ]])", "addChild( string $name [, string $value [, string $namespace ]])", "asXML([ string $filename ])", "attributes([ string $ns = NULL [, bool $is_prefix = false ]])", "children([ string $ns [, bool $is_prefix = false ]])", "count( void)", "getDocNamespaces([ bool $recursive = false [, bool $from_root = true ]])", "getName( void)", "getNamespaces([ bool $recursive = false ])", "registerXPathNamespace( string $prefix , string $ns)", "__toString( void)", "xpath( string $path)", "current( void)", "getChildren( void)", "hasChildren( void)", "key( void)", "next( void)", "rewind( void)", "valid( void)", "addAttribute( string $name [, string $value [, string $namespace ]])", "addChild( string $name [, string $value [, string $namespace ]])", "asXML([ string $filename ])", "attributes([ string $ns = NULL [, bool $is_prefix = false ]])", "children([ string $ns [, bool $is_prefix = false ]])", "count( void)", "getDocNamespaces([ bool $recursive = false [, bool $from_root = true ]])", "getName( void)", "getNamespaces([ bool $recursive = false ])", "registerXPathNamespace( string $prefix , string $ns)", "__toString( void)", "xpath( string $path)", "close( void)", "get( mixed $object_id [, bool $preserve_keys = false ])", "getErrno( void)", "getError( void)", "getnext( mixed $object_id)", "set( mixed $object_id , mixed $type , mixed $value)", "setSecurity( string $sec_level [, string $auth_protocol = [, string $auth_passphrase = [, string $priv_protocol = [, string $priv_passphrase = [, string $contextName = [, string $contextEngineID = ]]]]]])", "walk( string $object_id [, bool $suffix_as_key = FALSE [, int $max_repetitions [, int $non_repeaters ]]])", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "__call( string $function_name , string $arguments)", "SoapClient( mixed $wsdl [, array $options ])", "__doRequest( string $request , string $location , string $action , int $version [, int $one_way = 0 ])", "__getFunctions( void)", "__getLastRequest( void)", "__getLastRequestHeaders( void)", "__getLastResponse( void)", "__getLastResponseHeaders( void)", "__getTypes( void)", "__setCookie( string $name [, string $value ])", "__setLocation([ string $new_location ])", "__setSoapHeaders([ mixed $soapheaders ])", "__soapCall( string $function_name , array $arguments [, array $options [, mixed $input_headers [, array &$output_headers ]]])", "SoapClient( mixed $wsdl [, array $options ])", "__construct( string $faultcode , string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault ]]]])", "SoapFault( string $faultcode , string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault ]]]])", "__toString( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "__construct( string $namespace , string $name [, mixed $data [, bool $mustunderstand [, string $actor ]]])", "SoapHeader( string $namespace , string $name [, mixed $data [, bool $mustunderstand = false [, string $actor ]]])", "__construct( mixed $data , string $name)", "SoapParam( mixed $data , string $name)", "addFunction( mixed $functions)", "addSoapHeader( SoapHeader $object)", "__construct( mixed $wsdl [, array $options ])", "fault( string $code , string $string [, string $actor [, string $details [, string $name ]]])", "getFunctions( void)", "handle([ string $soap_request ])", "setClass( string $class_name [, mixed $args [, mixed $... ]])", "setObject( object $object)", "setPersistence( int $mode)", "SoapServer( mixed $wsdl [, array $options ])", "__construct( string $data , string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace ]]]])", "SoapVar( mixed $data , string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace ]]]])", "addDocument( SolrInputDocument $doc [, bool $overwrite = true [, int $commitWithin = 0 ]])", "addDocuments( array $docs [, bool $overwrite = true [, int $commitWithin = 0 ]])", "commit([ bool $softCommit = false [, bool $waitSearcher = true [, bool $expungeDeletes = false ]]])", "__construct( array $clientOptions)", "deleteById( string $id)", "deleteByIds( array $ids)", "deleteByQueries( array $queries)", "deleteByQuery( string $query)", "__destruct( void)", "getDebug( void)", "getOptions( void)", "optimize([ int $maxSegments = 1 [, bool $softCommit = true [, bool $waitSearcher = true ]]])", "ping( void)", "query( SolrParams $query)", "request( string $raw_request)", "rollback( void)", "setResponseWriter( string $responseWriter)", "setServlet( int $type , string $value)", "threads( void)", "getInternalInfo( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "getInternalInfo( void)", "addField( string $fieldName , string $fieldValue)", "clear( void)", "__clone( void)", "__construct( void)", "current( void)", "deleteField( string $fieldName)", "__destruct( void)", "fieldExists( string $fieldName)", "__get( string $fieldName)", "getField( string $fieldName)", "getFieldCount( void)", "getFieldNames( void)", "getInputDocument( void)", "__isset( string $fieldName)", "key( void)", "merge( SolrDocument $sourceDoc [, bool $overwrite = true ])", "next( void)", "offsetExists( string $fieldName)", "offsetGet( string $fieldName)", "offsetSet( string $fieldName , string $fieldValue)", "offsetUnset( string $fieldName)", "reset( void)", "rewind( void)", "serialize( void)", "__set( string $fieldName , string $fieldValue)", "SORT_ASC ])", "toArray( void)", "unserialize( string $serialized)", "__unset( string $fieldName)", "valid( void)", "__construct( void)", "__destruct( void)", "getInternalInfo( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "__construct( void)", "__destruct( void)", "getDigestedResponse( void)", "getHttpStatus( void)", "getHttpStatusMessage( void)", "getRawRequest( void)", "getRawRequestHeaders( void)", "getRawResponse( void)", "getRawResponseHeaders( void)", "getRequestUrl( void)", "getResponse( void)", "setParseMode([ int $parser_mode = 0 ])", "success( void)", "getInternalInfo( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "getInternalInfo( void)", "getInternalInfo( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "getInternalInfo( void)", "addField( string $fieldName , string $fieldValue [, float $fieldBoostValue = 0.0 ])", "clear( void)", "__clone( void)", "__construct( void)", "deleteField( string $fieldName)", "__destruct( void)", "fieldExists( string $fieldName)", "getBoost( void)", "getField( string $fieldName)", "getFieldBoost( string $fieldName)", "getFieldCount( void)", "getFieldNames( void)", "merge( SolrInputDocument $sourceDoc [, bool $overwrite = true ])", "reset( void)", "setBoost( float $documentBoostValue)", "setFieldBoost( string $fieldName , float $fieldBoostValue)", "SORT_ASC ])", "toArray( void)", "__construct( void)", "__destruct( void)", "add( string $name , string $value)", "addParam( string $name , string $value)", "get( string $param_name)", "getParam([ string $param_name ])", "getParams( void)", "getPreparedParams( void)", "serialize( void)", "set( string $name , string $value)", "setParam( string $name , string $value)", "toString([ bool $url_encode = false ])", "unserialize( string $serialized)", "__construct( void)", "__destruct( void)", "getPropertyNames( void)", "offsetExists( string $property_name)", "offsetGet( string $property_name)", "offsetSet( string $property_name , string $property_value)", "offsetUnset( string $property_name)", "add( string $name , string $value)", "addParam( string $name , string $value)", "get( string $param_name)", "getParam([ string $param_name ])", "getParams( void)", "getPreparedParams( void)", "serialize( void)", "set( string $name , string $value)", "setParam( string $name , string $value)", "toString([ bool $url_encode = false ])", "unserialize( string $serialized)", "__construct( void)", "__destruct( void)", "getResponse( void)", "getDigestedResponse( void)", "getHttpStatus( void)", "getHttpStatusMessage( void)", "getRawRequest( void)", "getRawRequestHeaders( void)", "getRawResponse( void)", "getRawResponseHeaders( void)", "getRequestUrl( void)", "getResponse( void)", "setParseMode([ int $parser_mode = 0 ])", "success( void)", "addFacetDateField( string $dateField)", "addFacetDateOther( string $value [, string $field_override ])", "addFacetField( string $field)", "addFacetQuery( string $facetQuery)", "addField( string $field)", "addFilterQuery( string $fq)", "addHighlightField( string $field)", "addMltField( string $field)", "addMltQueryField( string $field , float $boost)", "ORDER_DESC ])", "addStatsFacet( string $field)", "addStatsField( string $field)", "__construct([ string $q ])", "__destruct( void)", "getFacet( void)", "getFacetDateEnd([ string $field_override ])", "getFacetDateFields( void)", "getFacetDateGap([ string $field_override ])", "getFacetDateHardEnd([ string $field_override ])", "getFacetDateOther([ string $field_override ])", "getFacetDateStart([ string $field_override ])", "getFacetFields( void)", "getFacetLimit([ string $field_override ])", "getFacetMethod([ string $field_override ])", "getFacetMinCount([ string $field_override ])", "getFacetMissing([ string $field_override ])", "getFacetOffset([ string $field_override ])", "getFacetPrefix([ string $field_override ])", "getFacetQueries( void)", "getFacetSort([ string $field_override ])", "getFields( void)", "getFilterQueries( void)", "getHighlight( void)", "getHighlightAlternateField([ string $field_override ])", "getHighlightFields( void)", "getHighlightFormatter([ string $field_override ])", "getHighlightFragmenter([ string $field_override ])", "getHighlightFragsize([ string $field_override ])", "getHighlightHighlightMultiTerm( void)", "getHighlightMaxAlternateFieldLength([ string $field_override ])", "getHighlightMaxAnalyzedChars( void)", "getHighlightMergeContiguous([ string $field_override ])", "getHighlightRegexMaxAnalyzedChars( void)", "getHighlightRegexPattern( void)", "getHighlightRegexSlop( void)", "getHighlightRequireFieldMatch( void)", "getHighlightSimplePost([ string $field_override ])", "getHighlightSimplePre([ string $field_override ])", "getHighlightSnippets([ string $field_override ])", "getHighlightUsePhraseHighlighter( void)", "getMlt( void)", "getMltBoost( void)", "getMltCount( void)", "getMltFields( void)", "getMltMaxNumQueryTerms( void)", "getMltMaxNumTokens( void)", "getMltMaxWordLength( void)", "getMltMinDocFrequency( void)", "getMltMinTermFrequency( void)", "getMltMinWordLength( void)", "getMltQueryFields( void)", "getQuery( void)", "getRows( void)", "getSortFields( void)", "getStart( void)", "getStats( void)", "getStatsFacets( void)", "getStatsFields( void)", "getTerms( void)", "getTermsField( void)", "getTermsIncludeLowerBound( void)", "getTermsIncludeUpperBound( void)", "getTermsLimit( void)", "getTermsLowerBound( void)", "getTermsMaxCount( void)", "getTermsMinCount( void)", "getTermsPrefix( void)", "getTermsReturnRaw( void)", "getTermsSort( void)", "getTermsUpperBound( void)", "getTimeAllowed( void)", "removeFacetDateField( string $field)", "removeFacetDateOther( string $value [, string $field_override ])", "removeFacetField( string $field)", "removeFacetQuery( string $value)", "removeField( string $field)", "removeFilterQuery( string $fq)", "removeHighlightField( string $field)", "removeMltField( string $field)", "removeMltQueryField( string $queryField)", "removeSortField( string $field)", "removeStatsFacet( string $value)", "removeStatsField( string $field)", "setEchoHandler( bool $flag)", "setEchoParams( string $type)", "setExplainOther( string $query)", "setFacet( bool $flag)", "setFacetDateEnd( string $value [, string $field_override ])", "setFacetDateGap( string $value [, string $field_override ])", "setFacetDateHardEnd( bool $value [, string $field_override ])", "setFacetDateStart( string $value [, string $field_override ])", "setFacetEnumCacheMinDefaultFrequency( int $frequency [, string $field_override ])", "setFacetLimit( int $limit [, string $field_override ])", "setFacetMethod( string $method [, string $field_override ])", "setFacetMinCount( int $mincount [, string $field_override ])", "setFacetMissing( bool $flag [, string $field_override ])", "setFacetOffset( int $offset [, string $field_override ])", "setFacetPrefix( string $prefix [, string $field_override ])", "setFacetSort( int $facetSort [, string $field_override ])", "setHighlight( bool $flag)", "setHighlightAlternateField( string $field [, string $field_override ])", "setHighlightFormatter( string $formatter [, string $field_override ])", "setHighlightFragmenter( string $fragmenter [, string $field_override ])", "setHighlightFragsize( int $size [, string $field_override ])", "setHighlightHighlightMultiTerm( bool $flag)", "setHighlightMaxAlternateFieldLength( int $fieldLength [, string $field_override ])", "setHighlightMaxAnalyzedChars( int $value)", "setHighlightMergeContiguous( bool $flag [, string $field_override ])", "setHighlightRegexMaxAnalyzedChars( int $maxAnalyzedChars)", "setHighlightRegexPattern( string $value)", "setHighlightRegexSlop( float $factor)", "setHighlightRequireFieldMatch( bool $flag)", "setHighlightSimplePost( string $simplePost [, string $field_override ])", "setHighlightSimplePre( string $simplePre [, string $field_override ])", "setHighlightSnippets( int $value [, string $field_override ])", "setHighlightUsePhraseHighlighter( bool $flag)", "setMlt( bool $flag)", "setMltBoost( bool $flag)", "setMltCount( int $count)", "setMltMaxNumQueryTerms( int $value)", "setMltMaxNumTokens( int $value)", "setMltMaxWordLength( int $maxWordLength)", "setMltMinDocFrequency( int $minDocFrequency)", "setMltMinTermFrequency( int $minTermFrequency)", "setMltMinWordLength( int $minWordLength)", "setOmitHeader( bool $flag)", "setQuery( string $query)", "setRows( int $rows)", "setShowDebugInfo( bool $flag)", "setStart( int $start)", "setStats( bool $flag)", "setTerms( bool $flag)", "setTermsField( string $fieldname)", "setTermsIncludeLowerBound( bool $flag)", "setTermsIncludeUpperBound( bool $flag)", "setTermsLimit( int $limit)", "setTermsLowerBound( string $lowerBound)", "setTermsMaxCount( int $frequency)", "setTermsMinCount( int $frequency)", "setTermsPrefix( string $prefix)", "setTermsReturnRaw( bool $flag)", "setTermsSort( int $sortType)", "setTermsUpperBound( string $upperBound)", "setTimeAllowed( int $timeAllowed)", "__construct( void)", "__destruct( void)", "__construct( void)", "__destruct( void)", "getDigestedResponse( void)", "getHttpStatus( void)", "getHttpStatusMessage( void)", "getRawRequest( void)", "getRawRequestHeaders( void)", "getRawResponse( void)", "getRawResponseHeaders( void)", "getRequestUrl( void)", "getResponse( void)", "setParseMode([ int $parser_mode = 0 ])", "success( void)", "getDigestedResponse( void)", "getHttpStatus( void)", "getHttpStatusMessage( void)", "getRawRequest( void)", "getRawRequestHeaders( void)", "getRawResponse( void)", "getRawResponseHeaders( void)", "getRequestUrl( void)", "getResponse( void)", "setParseMode([ int $parser_mode = 0 ])", "success( void)", "getInternalInfo( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "getInternalInfo( void)", "__construct( void)", "__destruct( void)", "getDigestedResponse( void)", "getHttpStatus( void)", "getHttpStatusMessage( void)", "getRawRequest( void)", "getRawRequestHeaders( void)", "getRawResponse( void)", "getRawResponseHeaders( void)", "getRequestUrl( void)", "getResponse( void)", "setParseMode([ int $parser_mode = 0 ])", "success( void)", "digestXmlResponse( string $xmlresponse [, int $parse_mode = 0 ])", "escapeQueryChars( string $str)", "getSolrVersion( void)", "queryPhrase( string $str)", "addQuery( string $query [, string $index = &quot;*&quot; [, string $comment = &quot;&quot; ]])", "buildExcerpts( array $docs , string $index , string $words [, array $opts ])", "buildKeywords( string $query , string $index , bool $hits)", "close( void)", "__construct( void)", "escapeString( string $string)", "getLastError( void)", "getLastWarning( void)", "open( void)", "query( string $query [, string $index = &quot;*&quot; [, string $comment = &quot;&quot; ]])", "resetFilters( void)", "resetGroupBy( void)", "runQueries( void)", "setArrayResult( bool $array_result = false)", "setConnectTimeout( float $timeout)", "setFieldWeights( array $weights)", "setFilter( string $attribute , array $values [, bool $exclude = false ])", "setFilterFloatRange( string $attribute , float $min , float $max [, bool $exclude = false ])", "setFilterRange( string $attribute , int $min , int $max [, bool $exclude = false ])", "setGeoAnchor( string $attrlat , string $attrlong , float $latitude , float $longitude)", "setGroupBy( string $attribute , int $func [, string $groupsort = &quot;@group desc&quot; ])", "setGroupDistinct( string $attribute)", "setIDRange( int $min , int $max)", "setIndexWeights( array $weights)", "setLimits( int $offset , int $limit [, int $max_matches = 0 [, int $cutoff = 0 ]])", "setMatchMode( int $mode)", "setMaxQueryTime( int $qtime)", "setOverride( string $attribute , int $type , array $values)", "setRankingMode( int $ranker)", "setRetries( int $count [, int $delay = 0 ])", "setSelect( string $clause)", "setServer( string $server , int $port)", "setSortMode( int $mode [, string $sortby ])", "status( void)", "updateAttributes( string $index , array $attributes , array $values [, bool $mva = false ])", "getConstList([ bool $include_default = false ])", "add( mixed $index , mixed $newval)", "bottom( void)", "count( void)", "current( void)", "getIteratorMode( void)", "isEmpty( void)", "key( void)", "next( void)", "offsetExists( mixed $index)", "offsetGet( mixed $index)", "offsetSet( mixed $index , mixed $newval)", "offsetUnset( mixed $index)", "pop( void)", "prev( void)", "push( mixed $value)", "rewind( void)", "serialize( void)", "setIteratorMode( int $mode)", "shift( void)", "top( void)", "unserialize( string $serialized)", "unshift( mixed $value)", "valid( void)", "getConstList([ bool $include_default = false ])", "__construct([ mixed $initial_value [, bool $strict ]])", "__construct( string $file_name)", "getATime( void)", "getBasename([ string $suffix ])", "getCTime( void)", "getExtension( void)", "getFileInfo([ string $class_name ])", "getFilename( void)", "getGroup( void)", "getInode( void)", "getLinkTarget( void)", "getMTime( void)", "getOwner( void)", "getPath( void)", "getPathInfo([ string $class_name ])", "getPathname( void)", "getPerms( void)", "getRealPath( void)", "getSize( void)", "getType( void)", "isDir( void)", "isExecutable( void)", "isFile( void)", "isLink( void)", "isReadable( void)", "isWritable( void)", "openFile([ string $open_mode = &quot;r&quot; [, bool $use_include_path = false [, resource $context = NULL ]]])", "setFileClass([ string $class_name ])", "setInfoClass([ string $class_name ])", "__toString( void)", "__construct( string $filename [, string $open_mode = &quot;r&quot; [, bool $use_include_path = false [, resource $context ]]])", "current( void)", "eof( void)", "fflush( void)", "fgetc( void)", "fgetcsv([ string $delimiter = &quot;,&quot; [, string $enclosure = &quot;\\&quot;&quot; [, string $escape = &quot;\\\\&quot; ]]])", "fgets( void)", "fgetss([ string $allowable_tags ])", "flock( int $operation [, int &$wouldblock ])", "fpassthru( void)", "fputcsv( array $fields [, string $delimiter = &quot;,&quot; [, string $enclosure = &#039;&quot;&#039; ]])", "fread( int $length)", "fscanf( string $format [, mixed &$... ])", "fseek( int $offset [, int $whence = SEEK_SET ])", "fstat( void)", "ftell( void)", "ftruncate( int $size)", "fwrite( string $str [, int $length ])", "getChildren( void)", "getCsvControl( void)", "getFlags( void)", "getMaxLineLen( void)", "hasChildren( void)", "key( void)", "next( void)", "rewind( void)", "seek( int $line_pos)", "setCsvControl([ string $delimiter = &quot;,&quot; [, string $enclosure = &quot;\\&quot;&quot; [, string $escape = &quot;\\\\&quot; ]]])", "setFlags( int $flags)", "setMaxLineLen( int $max_len)", "__toString( void)", "valid( void)", "__construct( string $file_name)", "getATime( void)", "getBasename([ string $suffix ])", "getCTime( void)", "getExtension( void)", "getFileInfo([ string $class_name ])", "getFilename( void)", "getGroup( void)", "getInode( void)", "getLinkTarget( void)", "getMTime( void)", "getOwner( void)", "getPath( void)", "getPathInfo([ string $class_name ])", "getPathname( void)", "getPerms( void)", "getRealPath( void)", "getSize( void)", "getType( void)", "isDir( void)", "isExecutable( void)", "isFile( void)", "isLink( void)", "isReadable( void)", "isWritable( void)", "openFile([ string $open_mode = &quot;r&quot; [, bool $use_include_path = false [, resource $context = NULL ]]])", "setFileClass([ string $class_name ])", "setInfoClass([ string $class_name ])", "__toString( void)", "count( void)", "current( void)", "fromArray( array $array [, bool $save_indexes = true ])", "getSize( void)", "key( void)", "next( void)", "offsetExists( int $index)", "offsetGet( int $index)", "offsetSet( int $index , mixed $newval)", "offsetUnset( int $index)", "rewind( void)", "setSize( int $size)", "toArray( void)", "valid( void)", "__wakeup( void)", "__construct([ mixed $initial_value [, bool $strict ]])", "compare( mixed $value1 , mixed $value2)", "count( void)", "current( void)", "extract( void)", "insert( mixed $value)", "isEmpty( void)", "key( void)", "next( void)", "recoverFromCorruption( void)", "rewind( void)", "top( void)", "valid( void)", "__construct([ mixed $initial_value [, bool $strict ]])", "compare( mixed $value1 , mixed $value2)", "compare( mixed $value1 , mixed $value2)", "count( void)", "current( void)", "extract( void)", "insert( mixed $value)", "isEmpty( void)", "key( void)", "next( void)", "recoverFromCorruption( void)", "rewind( void)", "top( void)", "valid( void)", "compare( mixed $value1 , mixed $value2)", "compare( mixed $value1 , mixed $value2)", "count( void)", "current( void)", "extract( void)", "insert( mixed $value)", "isEmpty( void)", "key( void)", "next( void)", "recoverFromCorruption( void)", "rewind( void)", "top( void)", "valid( void)", "addAll( SplObjectStorage $storage)", "attach( object $object [, mixed $data = NULL ])", "contains( object $object)", "count( void)", "current( void)", "detach( object $object)", "getHash( object $object)", "getInfo( void)", "key( void)", "next( void)", "offsetExists( object $object)", "offsetGet( object $object)", "offsetSet( object $object [, mixed $data = NULL ])", "offsetUnset( object $object)", "removeAll( SplObjectStorage $storage)", "removeAllExcept( SplObjectStorage $storage)", "rewind( void)", "serialize( void)", "setInfo( mixed $data)", "unserialize( string $serialized)", "valid( void)", "update( SplSubject $subject)", "compare( mixed $priority1 , mixed $priority2)", "count( void)", "current( void)", "extract( void)", "insert( mixed $value , mixed $priority)", "isEmpty( void)", "key( void)", "next( void)", "recoverFromCorruption( void)", "rewind( void)", "setExtractFlags( int $flags)", "top( void)", "valid( void)", "dequeue( void)", "enqueue( mixed $value)", "setIteratorMode( int $mode)", "add( mixed $index , mixed $newval)", "bottom( void)", "count( void)", "current( void)", "getIteratorMode( void)", "isEmpty( void)", "key( void)", "next( void)", "offsetExists( mixed $index)", "offsetGet( mixed $index)", "offsetSet( mixed $index , mixed $newval)", "offsetUnset( mixed $index)", "pop( void)", "prev( void)", "push( mixed $value)", "rewind( void)", "serialize( void)", "setIteratorMode( int $mode)", "shift( void)", "top( void)", "unserialize( string $serialized)", "unshift( mixed $value)", "valid( void)", "setIteratorMode( int $mode)", "add( mixed $index , mixed $newval)", "bottom( void)", "count( void)", "current( void)", "getIteratorMode( void)", "isEmpty( void)", "key( void)", "next( void)", "offsetExists( mixed $index)", "offsetGet( mixed $index)", "offsetSet( mixed $index , mixed $newval)", "offsetUnset( mixed $index)", "pop( void)", "prev( void)", "push( mixed $value)", "rewind( void)", "serialize( void)", "setIteratorMode( int $mode)", "shift( void)", "top( void)", "unserialize( string $serialized)", "unshift( mixed $value)", "valid( void)", "__construct([ mixed $initial_value [, bool $strict ]])", "attach( SplObserver $observer)", "detach( SplObserver $observer)", "notify( void)", "__construct([ int $max_memory ])", "__construct( string $filename [, string $open_mode = &quot;r&quot; [, bool $use_include_path = false [, resource $context ]]])", "current( void)", "eof( void)", "fflush( void)", "fgetc( void)", "fgetcsv([ string $delimiter = &quot;,&quot; [, string $enclosure = &quot;\\&quot;&quot; [, string $escape = &quot;\\\\&quot; ]]])", "fgets( void)", "fgetss([ string $allowable_tags ])", "flock( int $operation [, int &$wouldblock ])", "fpassthru( void)", "fputcsv( array $fields [, string $delimiter = &quot;,&quot; [, string $enclosure = &#039;&quot;&#039; ]])", "fread( int $length)", "fscanf( string $format [, mixed &$... ])", "fseek( int $offset [, int $whence = SEEK_SET ])", "fstat( void)", "ftell( void)", "ftruncate( int $size)", "fwrite( string $str [, int $length ])", "getChildren( void)", "getCsvControl( void)", "getFlags( void)", "getMaxLineLen( void)", "hasChildren( void)", "key( void)", "next( void)", "rewind( void)", "seek( int $line_pos)", "setCsvControl([ string $delimiter = &quot;,&quot; [, string $enclosure = &quot;\\&quot;&quot; [, string $escape = &quot;\\\\&quot; ]]])", "setFlags( int $flags)", "setMaxLineLen( int $max_len)", "__toString( void)", "valid( void)", "__construct([ mixed $initial_value [, bool $strict ]])", "areConfusable( string $s1 , string $s2 [, string &$error ])", "__construct( void)", "isSuspicious( string $text [, string &$error ])", "setAllowedLocales( string $locale_list)", "setChecks( long $checks)", "busyTimeout( int $msecs)", "changes( void)", "close( void)", "__construct( string $filename [, int $flags [, string $encryption_key ]])", "createAggregate( string $name , mixed $step_callback , mixed $final_callback [, int $argument_count = -1 ])", "createCollation( string $name , callable $callback)", "createFunction( string $name , mixed $callback [, int $argument_count = -1 ])", "escapeString( string $value)", "exec( string $query)", "lastErrorCode( void)", "lastErrorMsg( void)", "lastInsertRowID( void)", "loadExtension( string $shared_library)", "open( string $filename [, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE [, string $encryption_key ]])", "prepare( string $query)", "query( string $query)", "querySingle( string $query [, bool $entire_row = false ])", "version( void)", "columnName( int $column_number)", "columnType( int $column_number)", "fetchArray([ int $mode = SQLITE3_BOTH ])", "finalize( void)", "numColumns( void)", "reset( void)", "bindParam( string $sql_param , mixed &$param [, int $type ])", "bindValue( string $sql_param , mixed $value [, int $type ])", "clear( void)", "close( void)", "execute( void)", "paramCount( void)", "reset( void)", "abort( string $transaction_id [, array $headers ])", "ack( mixed $msg [, array $headers ])", "begin( string $transaction_id [, array $headers ])", "commit( string $transaction_id [, array $headers ])", "__construct([ string $broker = ini_get(&quot;stomp.default_broker_uri&quot;) [, string $username [, string $password [, array $headers ]]]])", "__destruct( void)", "error( void)", "getReadTimeout( void)", "getSessionId( void)", "hasFrame( void)", "readFrame([ string $class_name = &quot;stompFrame&quot; ])", "send( string $destination , mixed $msg [, array $headers ])", "setReadTimeout( int $seconds [, int $microseconds ])", "subscribe( string $destination [, array $headers ])", "unsubscribe( string $destination [, array $headers ])", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "getDetails( void)", "__construct([ string $command [, array $headers [, string $body ]]])", "__construct( void)", "__destruct( void)", "dir_closedir( void)", "dir_opendir( string $path , int $options)", "dir_readdir( void)", "dir_rewinddir( void)", "mkdir( string $path , int $mode , int $options)", "rename( string $path_from , string $path_to)", "rmdir( string $path , int $options)", "stream_cast( int $cast_as)", "stream_close( void)", "stream_eof( void)", "stream_flush( void)", "stream_lock( int $operation)", "stream_metadata( string $path , int $option , mixed $value)", "stream_open( string $path , string $mode , int $options , string &$opened_path)", "stream_read( int $count)", "stream_seek( int $offset , int $whence = SEEK_SET)", "stream_set_option( int $option , int $arg1 , int $arg2)", "stream_stat( void)", "stream_tell( void)", "stream_truncate( int $new_size)", "stream_write( string $data)", "unlink( string $path)", "url_stat( string $path , int $flags)", "__construct( void)", "crossvalidate( array $problem , int $number_of_folds)", "getOptions( void)", "setOptions( array $params)", "train( array $problem [, array $weights ])", "checkProbabilityModel( void)", "__construct([ string $filename ])", "getLabels( void)", "getNrClass( void)", "getSvmType( void)", "getSvrProbability( void)", "load( string $filename)", "predict_probability( array $data)", "predict( array $data)", "save( string $filename)", "__construct( string $script)", "__construct( mixed $file [, mixed $alphafile ])", "getHeight( void)", "getWidth( void)", "addAction( SWFAction $action , int $flags)", "addASound( SWFSound $sound , int $flags)", "addShape( SWFShape $shape , int $flags)", "__construct( void)", "setAction( SWFAction $action)", "setDown( SWFShape $shape)", "setHit( SWFShape $shape)", "setMenu( int $flag)", "setOver( SWFShape $shape)", "setUp( SWFShape $shape)", "addAction( SWFAction $action , int $flags)", "addColor( int $red , int $green , int $blue [, int $a ])", "endMask( void)", "getRot( void)", "getX( void)", "getXScale( void)", "getXSkew( void)", "getY( void)", "getYScale( void)", "getYSkew( void)", "move( float $dx , float $dy)", "moveTo( float $x , float $y)", "multColor( float $red , float $green , float $blue [, float $a ])", "remove( void)", "rotate( float $angle)", "rotateTo( float $angle)", "scale( float $dx , float $dy)", "scaleTo( float $x [, float $y ])", "setDepth( int $depth)", "setMaskLevel( int $level)", "setMatrix( float $a , float $b , float $c , float $d , float $x , float $y)", "setName( string $name)", "setRatio( float $ratio)", "skewX( float $ddegrees)", "skewXTo( float $degrees)", "skewY( float $ddegrees)", "skewYTo( float $degrees)", "moveTo( float $x , float $y)", "rotateTo( float $angle)", "scaleTo( float $x [, float $y ])", "skewXTo( float $x)", "skewYTo( float $y)", "__construct( string $filename)", "getAscent( void)", "getDescent( void)", "getLeading( void)", "getShape( int $code)", "getUTF8Width( string $string)", "getWidth( string $string)", "addChars( string $char)", "addUTF8Chars( string $char)", "addEntry( float $ratio , int $red , int $green , int $blue [, int $alpha = 255 ])", "__construct( void)", "__construct( void)", "getShape1( void)", "getShape2( void)", "add( object $instance)", "addExport( SWFCharacter $char , string $name)", "addFont( SWFFont $font)", "__construct([ int $version ])", "importChar( string $libswf , string $name)", "importFont( string $libswf , string $name)", "labelFrame( string $label)", "nextFrame( void)", "output([ int $compression ])", "remove( object $instance)", "save( string $filename [, int $compression = -1 ])", "saveToFile( resource $x [, int $compression = -1 ])", "setbackground( int $red , int $green , int $blue)", "setDimension( float $width , float $height)", "setFrames( int $number)", "setRate( float $rate)", "startSound( SWFSound $sound)", "stopSound( SWFSound $sound)", "streamMP3( mixed $mp3file [, float $skip = 0 ])", "writeExports( void)", "__construct( mixed $file)", "addFill( int $red , int $green , int $blue [, int $alpha = 255 ])", "__construct( void)", "drawArc( float $r , float $startAngle , float $endAngle)", "drawCircle( float $r)", "drawCubic( float $bx , float $by , float $cx , float $cy , float $dx , float $dy)", "drawCubicTo( float $bx , float $by , float $cx , float $cy , float $dx , float $dy)", "drawCurve( float $controldx , float $controldy , float $anchordx , float $anchordy [, float $targetdx ], float $targetdy)", "drawCurveTo( float $controlx , float $controly , float $anchorx , float $anchory [, float $targetx ], float $targety)", "drawGlyph( SWFFont $font , string $character [, int $size ])", "drawLine( float $dx , float $dy)", "drawLineTo( float $x , float $y)", "movePen( float $dx , float $dy)", "movePenTo( float $x , float $y)", "setLeftFill( SWFGradient $fill)", "setLine( SWFShape $shape)", "setRightFill( SWFGradient $fill)", "__construct( string $filename [, int $flags = 0 ])", "loopCount( int $point)", "loopInPoint( int $point)", "loopOutPoint( int $point)", "noMultiple( void)", "add( object $object)", "__construct( void)", "labelFrame( string $label)", "nextFrame( void)", "remove( object $object)", "setFrames( int $number)", "startSound( SWFSound $sount)", "stopSound( SWFSound $sount)", "addString( string $string)", "addUTF8String( string $text)", "__construct( void)", "getAscent( void)", "getDescent( void)", "getLeading( void)", "getUTF8Width( string $string)", "getWidth( string $string)", "moveTo( float $x , float $y)", "setColor( int $red , int $green , int $blue [, int $a = 255 ])", "setFont( SWFFont $font)", "setHeight( float $height)", "setSpacing( float $spacing)", "addChars( string $chars)", "addString( string $string)", "align( int $alignement)", "__construct([ int $flags ])", "setBounds( float $width , float $height)", "setColor( int $red , int $green , int $blue [, int $a = 255 ])", "setFont( SWFFont $font)", "setHeight( float $height)", "setIndentation( float $width)", "setLeftMargin( float $width)", "setLineSpacing( float $height)", "setMargins( float $left , float $right)", "setName( string $name)", "setPadding( float $padding)", "setRightMargin( float $width)", "__construct([ string $file ])", "getNumFrames( void)", "setDimension( int $x , int $y)", "__construct([ string $name [, bool $manual ]])", "fire( void)", "reset( void)", "wait([ integer $wait ])", "__construct([ string $name ])", "lock([ integer $wait ])", "unlock([ bool $all ])", "__construct([ string $name [, bool $autounlock ]])", "readlock([ integer $wait ])", "readunlock( void)", "writelock([ integer $wait ])", "writeunlock( void)", "__construct([ string $name [, integer $initialval [, bool $autounlock ]]])", "lock([ integer $wait ])", "unlock([ integer &$prevcount ])", "detach( void)", "getCreatorId( void)", "getCurrentThread( void)", "getCurrentThreadId( void)", "getThreadId( void)", "globally( void)", "isJoined( void)", "isStarted( void)", "join( void)", "kill( void)", "start([ integer $options ])", "chunk( integer $size , boolean $preserve)", "count( void)", "extend( string $class)", "from( Closure $run [, Closure $construct [, array $args ]])", "getTerminationInfo( void)", "isRunning( void)", "isTerminated( void)", "isWaiting( void)", "lock( void)", "merge( mixed $from [, mixed $overwrite ])", "notify( void)", "pop( void)", "run( void)", "shift( void)", "synchronized( Closure $block [, mixed $... ])", "unlock( void)", "wait([ integer $timeout ])", "chunk( integer $size , boolean $preserve)", "count( void)", "extend( string $class)", "from( Closure $run [, Closure $construct [, array $args ]])", "getTerminationInfo( void)", "isRunning( void)", "isTerminated( void)", "isWaiting( void)", "lock( void)", "merge( mixed $from [, mixed $overwrite ])", "notify( void)", "pop( void)", "run( void)", "shift( void)", "synchronized( Closure $block [, mixed $... ])", "unlock( void)", "wait([ integer $timeout ])", "body( void)", "cleanRepair( void)", "__construct([ string $filename [, mixed $config [, string $encoding [, bool $use_include_path ]]]])", "diagnose( void)", "getConfig( void)", "getHtmlVer( void)", "getOpt( string $option)", "getOptDoc( string $optname)", "getRelease( void)", "getStatus( void)", "head( void)", "html( void)", "isXhtml( void)", "isXml( void)", "parseFile( string $filename [, mixed $config [, string $encoding [, bool $use_include_path = false ]]])", "parseString( string $input [, mixed $config [, string $encoding ]])", "repairFile( string $filename [, mixed $config [, string $encoding [, bool $use_include_path = false ]]])", "repairString( string $data [, mixed $config [, string $encoding ]])", "root( void)", "getParent( void)", "hasChildren( void)", "hasSiblings( void)", "isAsp( void)", "isComment( void)", "isHtml( void)", "isJste( void)", "isPhp( void)", "isText( void)", "add( string $key , number $increment [, int $type = 0 ])", "RDBDEF_PORT [, array $options ]])", "connectUri( string $uri)", "RDBDEF_PORT [, array $options ]]])", "copy( string $path)", "ext( string $name , int $options , string $key , string $value)", "fwmKeys( string $prefix , int $max_recs)", "get( mixed $keys)", "getIterator( void)", "num( void)", "out( mixed $keys)", "put( mixed $keys [, string $value = NULL ])", "putCat( mixed $keys [, string $value ])", "putKeep( mixed $keys [, string $value ])", "putNr( mixed $keys [, string $value = NULL ])", "putShl( string $key , string $value , int $width)", "restore( string $log_dir , int $timestamp [, bool $check_consistency = true ])", "setMaster( string $host , int $port , int $timestamp [, bool $check_consistency = true ])", "size( string $key)", "stat( void)", "sync( void)", "RDBT_RECON ])", "vanish( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "__construct( mixed $object)", "current( void)", "key( void)", "next( void)", "rewind( void)", "valid( void)", "add( string $key , number $increment [, int $type = 0 ])", "connect( string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options ]])", "connectUri( string $uri)", "__construct([ string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options ]]])", "copy( string $path)", "ext( string $name , int $options , string $key , string $value)", "fwmKeys( string $prefix , int $max_recs)", "get( mixed $keys)", "getIterator( void)", "num( void)", "out( mixed $keys)", "put( mixed $keys [, string $value = NULL ])", "putCat( mixed $keys [, string $value ])", "putKeep( mixed $keys [, string $value ])", "putNr( mixed $keys [, string $value = NULL ])", "putShl( string $key , string $value , int $width)", "restore( string $log_dir , int $timestamp [, bool $check_consistency = true ])", "setMaster( string $host , int $port , int $timestamp [, bool $check_consistency = true ])", "size( string $key)", "stat( void)", "sync( void)", "tune( float $timeout [, int $options = TokyoTyrant::RDBT_RECON ])", "vanish( void)", "addCond( string $name , int $op , string $expr)", "__construct( TokyoTyrantTable $table)", "count( void)", "current( void)", "hint( void)", "key( void)", "metaSearch( array $queries , int $type)", "next( void)", "out( void)", "rewind( void)", "search( void)", "setLimit([ int $max [, int $skip ]])", "setOrder( string $name , int $type)", "valid( void)", "add( string $key , mixed $increment [, string $type ])", "genUid( void)", "get( mixed $keys)", "getIterator( void)", "getQuery( void)", "out( mixed $keys)", "put( string $key , array $columns)", "putCat( string $key , array $columns)", "putKeep( string $key , array $columns)", "putNr( mixed $keys [, string $value ])", "putShl( string $key , string $value , int $width)", "setIndex( string $column , int $type)", "add( string $key , number $increment [, int $type = 0 ])", "connect( string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options ]])", "connectUri( string $uri)", "__construct([ string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options ]]])", "copy( string $path)", "ext( string $name , int $options , string $key , string $value)", "fwmKeys( string $prefix , int $max_recs)", "get( mixed $keys)", "getIterator( void)", "num( void)", "out( mixed $keys)", "put( mixed $keys [, string $value = NULL ])", "putCat( mixed $keys [, string $value ])", "putKeep( mixed $keys [, string $value ])", "putNr( mixed $keys [, string $value = NULL ])", "putShl( string $key , string $value , int $width)", "restore( string $log_dir , int $timestamp [, bool $check_consistency = true ])", "setMaster( string $host , int $port , int $timestamp [, bool $check_consistency = true ])", "size( string $key)", "stat( void)", "sync( void)", "tune( float $timeout [, int $options = TokyoTyrant::RDBT_RECON ])", "vanish( void)", "create( string $id [, int $direction ])", "createFromRules( string $rules [, string $direction ])", "createInverse( void)", "getErrorCode( void)", "getErrorMessage( void)", "listIDs( void)", "transliterate( string $subject [, int $start [, int $end ]])", "__construct([ string $destination_encoding [, string $source_encoding ]])", "convert( string $str [, bool $reverse ])", "fromUCallback( integer $reason , string $source , string $codePoint , integer &$error)", "getAliases([ string $name ])", "getAvailable( void)", "getDestinationEncoding( void)", "getDestinationType( void)", "getErrorCode( void)", "getErrorMessage( void)", "getSourceEncoding( void)", "getSourceType( void)", "getStandards( void)", "getSubstChars( void)", "reasonText([ integer $reason ])", "setDestinationEncoding( string $encoding)", "setSourceEncoding( string $encoding)", "setSubstChars( string $chars)", "toUCallback( integer $reason , string $source , string $codeUnits , integer &$error)", "transcode( string $str , string $toEncoding , string $fromEncoding [, array $options ])", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "__construct([ string $object_name = &quot;PHP&quot; [, array $variables = array() [, array $extensions = array() [, bool $report_uncaught_exceptions = TRUE ]]]])", "executeString()&quot; [, int $flags = V8Js::FLAG_NONE ]])", "getExtensions( void)", "getPendingException( void)", "registerExtension( string $extension_name , string $script [, array $dependencies = array() [, bool $auto_enable = FALSE ]])", "getJsFileName( void)", "getJsLineNumber( void)", "getJsSourceLine( void)", "getJsTrace( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "VARIANT([ mixed $value [, int $type [, int $codepage ]]])", "auth( void)", "ban( string $vcl_regex)", "banUrl( string $vcl_regex)", "clearPanic( void)", "connect( void)", "__construct([ array $args ])", "disconnect( void)", "getPanic( void)", "getParams( void)", "isRunning( void)", "setCompat( int $compat)", "setHost( string $host)", "setIdent( string $ident)", "setParam( string $name , string|integer $value)", "setPort( int $port)", "setSecret( string $secret)", "setTimeout( int $timeout)", "start( void)", "stop( void)", "__construct([ array $args ])", "getLine( void)", "getTagName( int $index)", "__construct([ array $args ])", "getSnapshot( void)", "__construct( void)", "count( void)", "current( void)", "key( void)", "next( void)", "offsetExists( object $object)", "offsetGet( object $object)", "offsetSet( object $object , mixed $value)", "offsetUnset( object $object)", "rewind( void)", "valid( void)", "acquire( void)", "get( void)", "release( void)", "valid( void)", "getStacked( void)", "isShutdown( void)", "isWorking( void)", "shutdown( void)", "stack( Threaded &$work)", "unstack([ Threaded &$work ])", "detach( void)", "getCreatorId( void)", "getCurrentThread( void)", "getCurrentThreadId( void)", "getThreadId( void)", "globally( void)", "isJoined( void)", "isStarted( void)", "join( void)", "kill( void)", "start([ integer $options ])", "__construct( string $nsname)", "diff( mixed $from , mixed $to)", "merge( mixed $src , mixed $diff)", "diff( DOMDocument $from , DOMDocument $to)", "merge( DOMDocument $src , DOMDocument $diff)", "__construct( string $nsname)", "diff( mixed $from , mixed $to)", "merge( mixed $src , mixed $diff)", "diff( string $from , string $to)", "merge( string $src , string $diff)", "__construct( string $nsname)", "diff( mixed $from , mixed $to)", "merge( mixed $src , mixed $diff)", "diff( string $from , string $to)", "merge( string $src , string $diff)", "__construct( string $nsname)", "diff( mixed $from , mixed $to)", "merge( mixed $src , mixed $diff)", "close( void)", "expand([ DOMNode $basenode ])", "getAttribute( string $name)", "getAttributeNo( int $index)", "getAttributeNs( string $localName , string $namespaceURI)", "getParserProperty( int $property)", "isValid( void)", "lookupNamespace( string $prefix)", "moveToAttribute( string $name)", "moveToAttributeNo( int $index)", "moveToAttributeNs( string $localName , string $namespaceURI)", "moveToElement( void)", "moveToFirstAttribute( void)", "moveToNextAttribute( void)", "next([ string $localname ])", "open( string $URI [, string $encoding [, int $options = 0 ]])", "read( void)", "readInnerXML( void)", "readOuterXML( void)", "readString( void)", "setParserProperty( int $property , bool $value)", "setRelaxNGSchema( string $filename)", "setRelaxNGSchemaSource( string $source)", "setSchema( string $filename)", "xml( string $source [, string $encoding [, int $options = 0 ]])", "getParameter( string $namespaceURI , string $localName)", "getSecurityPrefs( void)", "hasExsltSupport( void)", "importStylesheet( object $stylesheet)", "registerPHPFunctions([ mixed $restrict ])", "removeParameter( string $namespaceURI , string $localName)", "setParameter( string $namespace , string $name , string $value)", "setProfiling( string $filename)", "setSecurityPrefs( int $securityPrefs)", "transformToDoc( DOMNode $doc)", "transformToURI( DOMDocument $doc , string $uri)", "transformToXML( DOMDocument $doc)", "execute([ mixed $arg [, mixed $... ]])", "getController( void)", "__clone( void)", "__construct( void)", "display( string $tpl [, array $parameters ])", "forward( string $action [, array $paramters ])", "getInvokeArg( string $name)", "getInvokeArgs( void)", "getModuleName( void)", "getRequest( void)", "getResponse( void)", "getView( void)", "getViewpath( void)", "init( void)", "initView([ array $options ])", "redirect( string $url)", "render( string $tpl [, array $parameters ])", "setViewpath( string $view_directory)", "app( void)", "bootstrap([ Yaf_Bootstrap_Abstract $bootstrap ])", "clearLastError( void)", "__clone( void)", "public__construct( mixed $config [, string $envrion ])", "__destruct( void)", "environ( void)", "execute( callable $entry , string $...)", "getAppDirectory( void)", "getConfig( void)", "getDispatcher( void)", "getLastErrorMsg( void)", "getLastErrorNo( void)", "getModules( void)", "run( void)", "setAppDirectory( string $directory)", "__sleep( void)", "__wakeup( void)", "get( string $name , mixed $value)", "readonly( void)", "set( void)", "toArray( void)", "__construct( string $config_file [, string $section ])", "count( void)", "current( void)", "__get([ string $name ])", "__isset( string $name)", "key( void)", "next( void)", "offsetExists( string $name)", "offsetGet( string $name)", "offsetSet( string $name , string $value)", "offsetUnset( string $name)", "readonly( void)", "rewind( void)", "__set( string $name , mixed $value)", "toArray( void)", "valid( void)", "get( string $name , mixed $value)", "readonly( void)", "set( void)", "toArray( void)", "__construct( string $config_file [, string $section ])", "count( void)", "current( void)", "__get([ string $name ])", "__isset( string $name)", "key( void)", "next( void)", "offsetExists( string $name)", "offsetGet( string $name)", "offsetSet( string $name , string $value)", "offsetUnset( string $name)", "readonly( void)", "rewind( void)", "__set( string $name , string $value)", "toArray( void)", "valid( void)", "get( string $name , mixed $value)", "readonly( void)", "set( void)", "toArray( void)", "__clone( void)", "__construct( void)", "display( string $tpl [, array $parameters ])", "forward( string $action [, array $paramters ])", "getInvokeArg( string $name)", "getInvokeArgs( void)", "getModuleName( void)", "getRequest( void)", "getResponse( void)", "getView( void)", "getViewpath( void)", "init( void)", "initView([ array $options ])", "redirect( string $url)", "render( string $tpl [, array $parameters ])", "setViewpath( string $view_directory)", "autoRender([ bool $flag ])", "catchException([ bool $flag ])", "__clone( void)", "public__construct( void)", "disableView( void)", "dispatch( Yaf_Request_Abstract $request)", "enableView( void)", "flushInstantly([ bool $flag ])", "getApplication( void)", "getInstance( void)", "getRequest( void)", "getRouter( void)", "initView( string $templates_dir [, array $options ])", "registerPlugin( Yaf_Plugin_Abstract $plugin)", "returnResponse( bool $flag)", "setDefaultAction( string $action)", "setDefaultController( string $controller)", "setDefaultModule( string $module)", "setErrorHandler( call $callback , int $error_types)", "setRequest( Yaf_Request_Abstract $request)", "setView( Yaf_View_Interface $view)", "__sleep( void)", "throwException([ bool $flag ])", "__wakeup( void)", "__construct( void)", "getPrevious( void)", "__construct( void)", "getPrevious( void)", "__construct( void)", "getPrevious( void)", "__construct( void)", "getPrevious( void)", "__construct( void)", "getPrevious( void)", "__construct( void)", "getPrevious( void)", "__construct( void)", "getPrevious( void)", "__construct( void)", "getPrevious( void)", "__construct( void)", "getPrevious( void)", "__construct( void)", "getPrevious( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "autoload( void)", "clearLocalNamespace( void)", "__clone( void)", "public__construct( void)", "getInstance( void)", "getLibraryPath([ bool $is_global = false ])", "getLocalNamespace( void)", "import( void)", "isLocalName( void)", "registerLocalNamespace( mixed $prefix)", "setLibraryPath( string $directory [, bool $is_global = false ])", "__sleep( void)", "__wakeup( void)", "dispatchLoopShutdown( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response)", "dispatchLoopStartup( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response)", "postDispatch( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response)", "preDispatch( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response)", "preResponse( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response)", "routerShutdown( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response)", "routerStartup( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response)", "__clone( void)", "__construct( void)", "del( string $name)", "get( string $name)", "has( string $name)", "set( string $name , string $value)", "getActionName( void)", "getBaseUri( void)", "getControllerName( void)", "getEnv( string $name [, string $default ])", "getException( void)", "getLanguage( void)", "getMethod( void)", "getModuleName( void)", "getParam( string $name [, string $default ])", "getParams( void)", "getRequestUri( void)", "getServer( string $name [, string $default ])", "isCli( void)", "isDispatched( void)", "isGet( void)", "isHead( void)", "isOptions( void)", "isPost( void)", "isPut( void)", "isRouted( void)", "isXmlHttpRequest( void)", "setActionName( string $action)", "setBaseUri( string $uir)", "setControllerName( string $controller)", "setDispatched( void)", "setModuleName( string $module)", "setParam( string $name [, string $value ])", "setRequestUri( string $uir)", "setRouted([ string $flag ])", "__clone( void)", "__construct( void)", "get( string $name [, string $default ])", "getCookie( string $name [, string $default ])", "getFiles( void)", "getPost( string $name [, string $default ])", "getQuery( string $name [, string $default ])", "getRequest( void)", "isXmlHttpRequest( void)", "getActionName( void)", "getBaseUri( void)", "getControllerName( void)", "getEnv( string $name [, string $default ])", "getException( void)", "getLanguage( void)", "getMethod( void)", "getModuleName( void)", "getParam( string $name [, string $default ])", "getParams( void)", "getRequestUri( void)", "getServer( string $name [, string $default ])", "isCli( void)", "isDispatched( void)", "isGet( void)", "isHead( void)", "isOptions( void)", "isPost( void)", "isPut( void)", "isRouted( void)", "isXmlHttpRequest( void)", "setActionName( string $action)", "setBaseUri( string $uir)", "setControllerName( string $controller)", "setDispatched( void)", "setModuleName( string $module)", "setParam( string $name [, string $value ])", "setRequestUri( string $uir)", "setRouted([ string $flag ])", "__clone( void)", "__construct( void)", "get( void)", "getCookie( void)", "getFiles( void)", "getPost( void)", "getQuery( void)", "getRequest( void)", "isXmlHttpRequest( void)", "getActionName( void)", "getBaseUri( void)", "getControllerName( void)", "getEnv( string $name [, string $default ])", "getException( void)", "getLanguage( void)", "getMethod( void)", "getModuleName( void)", "getParam( string $name [, string $default ])", "getParams( void)", "getRequestUri( void)", "getServer( string $name [, string $default ])", "isCli( void)", "isDispatched( void)", "isGet( void)", "isHead( void)", "isOptions( void)", "isPost( void)", "isPut( void)", "isRouted( void)", "isXmlHttpRequest( void)", "setActionName( string $action)", "setBaseUri( string $uir)", "setControllerName( string $controller)", "setDispatched( void)", "setModuleName( string $module)", "setParam( string $name [, string $value ])", "setRequestUri( string $uir)", "setRouted([ string $flag ])", "appendBody( string $content [, string $key ])", "clearBody([ string $key ])", "clearHeaders( void)", "__clone( void)", "__construct( void)", "__destruct( void)", "getBody([ string $key ])", "getHeader( void)", "prependBody( string $content [, string $key ])", "response( void)", "setAllHeaders( void)", "setBody( string $content [, string $key ])", "setHeader( void)", "setRedirect( void)", "__toString( void)", "assemble( array $info [, array $query ])", "route( Yaf_Request_Abstract $request)", "assemble( array $info [, array $query ])", "__construct([ string $controller_prefer = false [, string $delimiter = &quot;&quot; ]])", "route( Yaf_Request_Abstract $request)", "assemble( array $info [, array $query ])", "public__construct( string $match , array $route [, array $map [, array $verify [, string $reverse ]]])", "route( Yaf_Request_Abstract $request)", "assemble( array $info [, array $query ])", "route( Yaf_Request_Abstract $request)", "assemble( array $info [, array $query ])", "public__construct( string $match , array $route [, array $verify ])", "route( Yaf_Request_Abstract $request)", "assemble( array $info [, array $query ])", "route( Yaf_Request_Abstract $request)", "assemble( array $info [, array $query ])", "public__construct( string $module_name , string $controller_name , string $action_name)", "route( Yaf_Request_Abstract $request)", "assemble( array $info [, array $query ])", "match( string $uri)", "route( Yaf_Request_Abstract $request)", "assemble( array $info [, array $query ])", "public__construct( string $supervar_name)", "route( Yaf_Request_Abstract $request)", "addConfig( Yaf_Config_Abstract $config)", "addRoute( string $name , Yaf_Route_Abstract $route)", "public__construct( void)", "getCurrentRoute( void)", "getRoute( string $name)", "getRoutes( void)", "route( Yaf_Request_Abstract $request)", "__clone( void)", "__construct( void)", "count( void)", "current( void)", "del( string $name)", "__get( string $name)", "getInstance( void)", "has( string $name)", "__isset( string $name)", "key( void)", "next( void)", "offsetExists( string $name)", "offsetGet( string $name)", "offsetSet( string $name , string $value)", "offsetUnset( string $name)", "rewind( void)", "__set( string $name , string $value)", "__sleep( void)", "start( void)", "__unset( string $name)", "valid( void)", "__wakeup( void)", "assign( string $name [, string $value ])", "display( string $tpl [, array $tpl_vars ])", "getScriptPath( void)", "render( string $tpl [, array $tpl_vars ])", "setScriptPath( string $template_dir)", "assign( string $name [, mixed $value ])", "assignRef( string $name , mixed &$value)", "clear([ string $name ])", "__construct( string $tempalte_dir [, array $options ])", "display( string $tpl [, array $tpl_vars ])", "eval( string $tpl_content [, array $tpl_vars ])", "__get([ string $name ])", "getScriptPath( void)", "__isset( string $name)", "render( string $tpl [, array $tpl_vars ])", "__set( string $name , mixed $value)", "setScriptPath( string $template_dir)", "getType( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "__call( string $method , array $parameters)", "__construct( string $url)", "setOpt( number $name , mixed $value)", "call( string $uri , string $method , array $parameters [, callable $callback ])", "loop([ callable $callback [, callable $error_callback ]])", "getType( void)", "getMessage( void)", "getPrevious( void)", "getCode( void)", "getFile( void)", "getLine( void)", "getTrace( void)", "getTraceAsString( void)", "__toString( void)", "__clone( void)", "__construct( Object $obj)", "handle( void)", "addEmptyDir( string $dirname)", "addFile( string $filename [, string $localname = NULL [, int $start = 0 [, int $length = 0 ]]])", "addFromString( string $localname , string $contents)", "addGlob( string $pattern [, int $flags = 0 [, array $options = array() ]])", "addPattern( string $pattern [, string $path = &#039;.&#039; [, array $options = array() ]])", "close( void)", "deleteIndex( int $index)", "deleteName( string $name)", "extractTo( string $destination [, mixed $entries ])", "getArchiveComment([ int $flags ])", "getCommentIndex( int $index [, int $flags ])", "getCommentName( string $name [, int $flags ])", "GetExternalAttributesIndex( int $index , int &$opsys , int &$attr [, int $flags ])", "getExternalAttributesName( string $name , int &$opsys , int &$attr [, int $flags ])", "getFromIndex( int $index [, int $length = 0 [, int $flags ]])", "getFromName( string $name [, int $length = 0 [, int $flags ]])", "getNameIndex( int $index [, int $flags ])", "getStatusString( void)", "getStream( string $name)", "locateName( string $name [, int $flags ])", "open( string $filename [, int $flags ])", "renameIndex( int $index , string $newname)", "renameName( string $name , string $newname)", "setArchiveComment( string $comment)", "setCommentIndex( int $index , string $comment)", "setCommentName( string $name , string $comment)", "setExternalAttributesIndex( int $index , int $opsys , int $attr [, int $flags ])", "setExternalAttributesName( string $name , int $opsys , int $attr [, int $flags ])", "setPassword( string $password)", "statIndex( int $index [, int $flags ])", "statName( string $name [, int $flags ])", "unchangeAll( void)", "unchangeArchive( void)", "unchangeIndex( int $index)", "unchangeName( string $name)", "private__construct( void)", "__construct([ integer $io_threads = 1 [, boolean $is_persistent = true ]])", "getOpt( string $key)", "getSocket( integer $type [, string $persistent_id = null [, callback $on_new_socket = null ]])", "isPersistent( void)", "setOpt( integer $key , mixed $value)", "__construct( ZMQSocket $frontend , ZMQSocket $backend [, ZMQSocket $listener ])", "getIdleTimeout( void)", "getTimerTimeout( void)", "run( void)", "setIdleCallback( callable $cb_func , integer $timeout [, mixed $user_data ])", "setIdleTimeout( integer $timeout)", "setTimerCallback( callable $cb_func , integer $timeout [, mixed $user_data ])", "setTimerTimeout( integer $timeout)", "add( mixed $entry , integer $type)", "clear( void)", "count( void)", "getLastErrors( void)", "poll( array &$readable , array &$writable [, integer $timeout = -1 ])", "remove( mixed $item)", "bind( string $dsn [, boolean $force = false ])", "connect( string $dsn [, boolean $force = false ])", "__construct( ZMQContext $context , int $type [, string $persistent_id = null [, callback $on_new_socket = null ]])", "disconnect( string $dsn)", "getEndpoints( void)", "getPersistentId( void)", "getSocketType( void)", "getSockOpt( string $key)", "isPersistent( void)", "recv([ integer $mode = 0 ])", "recvMulti([ integer $mode = 0 ])", "send( string $message [, integer $mode = 0 ])", "send( array $message [, integer $mode = 0 ])", "setSockOpt( integer $key , mixed $value)", "unbind( string $dsn)"]