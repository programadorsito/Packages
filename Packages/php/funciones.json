["abs( mixed $number)", "acos( float $arg)", "acosh( float $arg)", "addcslashes( string $str , string $charlist)", "addslashes( string $str)", "apache_child_terminate( void)", "apache_get_modules( void)", "apache_get_version( void)", "apache_getenv( string $variable [, bool $walk_to_top = false ])", "apache_lookup_uri( string $filename)", "apache_note( string $note_name [, string $note_value = &quot;&quot; ])", "apache_request_headers( void)", "apache_reset_timeout( void)", "apache_response_headers( void)", "apache_setenv( string $variable , string $value [, bool $walk_to_top = false ])", "apc_add( string $key , mixed $var [, int $ttl = 0 ])", "apc_add( array $values [, mixed $unused = NULL [, int $ttl = 0 ]])", "apc_bin_dump([ array $files = NULL [, array $user_vars = NULL ]])", "apc_bin_dumpfile( array $files , array $user_vars , string $filename [, int $flags = 0 [, resource $context = NULL ]])", "apc_bin_load( string $data [, int $flags = 0 ])", "apc_bin_loadfile( string $filename [, resource $context = NULL [, int $flags = 0 ]])", "apc_cache_info([ string $cache_type = &quot;&quot; [, bool $limited = false ]])", "apc_cas( string $key , int $old , int $new)", "apc_clear_cache([ string $cache_type = &quot;&quot; ])", "apc_compile_file( string $filename [, bool $atomic = true ])", "apc_dec( string $key [, int $step = 1 [, bool &$success ]])", "apc_define_constants( string $key , array $constants [, bool $case_sensitive = true ])", "apc_delete_file( mixed $keys)", "apc_delete( string $key)", "apc_exists( mixed $keys)", "apc_fetch( mixed $key [, bool &$success ])", "apc_inc( string $key [, int $step = 1 [, bool &$success ]])", "apc_load_constants( string $key [, bool $case_sensitive = true ])", "apc_sma_info([ bool $limited = false ])", "apc_store( string $key , mixed $var [, int $ttl = 0 ])", "apc_store( array $values [, mixed $unused = NULL [, int $ttl = 0 ]])", "apd_breakpoint( int $debug_level)", "apd_callstack( void)", "apd_clunk( string $warning [, string $delimiter = &quot;&lt;BR /&gt;&quot; ])", "apd_continue( int $debug_level)", "apd_croak( string $warning [, string $delimiter = &quot;&lt;BR /&gt;&quot; ])", "apd_dump_function_table( void)", "apd_dump_persistent_resources( void)", "apd_dump_regular_resources( void)", "apd_echo( string $output)", "apd_get_active_symbols( void)", "apd_set_pprof_trace([ string $dump_directory = ini_get(&quot;apd.dumpdir&quot;) [, string $fragment = &quot;pprof&quot; ]])", "apd_set_session_trace_socket( string $tcp_server , int $socket_type , int $port , int $debug_level)", "apd_set_session_trace( int $debug_level [, string $dump_directory = ini_get(&quot;apd.dumpdir&quot;) ])", "apd_set_session( int $debug_level)", "array_change_key_case( array $array [, int $case = CASE_LOWER ])", "array_chunk( array $array , int $size [, bool $preserve_keys = false ])", "array_column( array $array , mixed $column_key [, mixed $index_key = null ])", "array_combine( array $keys , array $values)", "array_count_values( array $array)", "array_diff_assoc( array $array1 , array $array2 [, array $... ])", "array_diff_key( array $array1 , array $array2 [, array $... ])", "array_diff_uassoc( array $array1 , array $array2 [, array $... ], callable $key_compare_func)", "", "array_diff_ukey( array $array1 , array $array2 [, array $... ], callable $key_compare_func)", "", "array_diff( array $array1 , array $array2 [, array $... ])", "array_fill_keys( array $keys , mixed $value)", "array_fill( int $start_index , int $num , mixed $value)", "array_filter( array $array [, callable $callback ])", "array_flip( array $array)", "array_intersect_assoc( array $array1 , array $array2 [, array $... ])", "array_intersect_key( array $array1 , array $array2 [, array $... ])", "array_intersect_uassoc( array $array1 , array $array2 [, array $... ], callable $key_compare_func)", "", "array_intersect_ukey( array $array1 , array $array2 [, array $... ], callable $key_compare_func)", "", "array_intersect( array $array1 , array $array2 [, array $... ])", "array_key_exists( mixed $key , array $array)", "array_keys( array $array [, mixed $search_value [, bool $strict = false ]])", "array_map( callable $callback , array $array1 [, array $... ])", "array_merge_recursive( array $array1 [, array $... ])", "array_merge( array $array1 [, array $... ])", "array_multisort( array &$array1 [, mixed $array1_sort_order = SORT_ASC [, mixed $array1_sort_flags = SORT_REGULAR [, mixed $... ]]])", "array_pad( array $array , int $size , mixed $value)", "array_pop( array &$array)", "array_product( array $array)", "array_push( array &$array , mixed $value1 [, mixed $... ])", "array_rand( array $array [, int $num = 1 ])", "array_reduce( array $array , callable $callback [, mixed $initial = NULL ])", "callback( mixed $carry , mixed $item)", "array_replace_recursive( array $array1 , array $array2 [, array $... ])", "array_replace( array $array1 , array $array2 [, array $... ])", "array_reverse( array $array [, bool $preserve_keys = false ])", "array_search( mixed $needle , array $haystack [, bool $strict = false ])", "array_shift( array &$array)", "array_slice( array $array , int $offset [, int $length = NULL [, bool $preserve_keys = false ]])", "array_splice( array &$input , int $offset [, int $length [, mixed $replacement = array() ]])", "array_sum( array $array)", "array_udiff_assoc( array $array1 , array $array2 [, array $... ], callable $value_compare_func)", "", "array_udiff_uassoc( array $array1 , array $array2 [, array $... ], callable $value_compare_func , callable $key_compare_func)", "claves(\u00edndices) se hace tambi\u00e9n mediante la funci\u00f3n de llamada de retorno key_compare_func. Este comportamiento es diferente del de array_udiff_assoc(), ya que esta \u00faltima compara los \u00edndices usando una funci\u00f3n interna.", "array_udiff( array $array1 , array $array2 [, array $... ], callable $value_compare_func)", "", "array_uintersect_assoc( array $array1 , array $array2 [, array $... ], callable $value_compare_func)", "", "array_uintersect_uassoc( array $array1 , array $array2 [, array $... ], callable $value_compare_func , callable $key_compare_func)", "key_compare_func La funci\u00f3n de retrollamada de comparaci\u00f3n de claves.", "array_uintersect( array $array1 , array $array2 [, array $... ], callable $value_compare_func)", "", "array_unique( array $array [, int $sort_flags = SORT_STRING ])", "array_unshift( array &$array , mixed $value1 [, mixed $... ])", "array_values( array $array)", "array_walk_recursive( array &$array , callable $callback [, mixed $userdata = NULL ])", "array_walk( array &$array , callable $callback [, mixed $userdata = NULL ])", "array([ mixed $... ])", "arsort( array &$array [, int $sort_flags = SORT_REGULAR ])", "asin( float $arg)", "asinh( float $arg)", "asort( array &$array [, int $sort_flags = SORT_REGULAR ])", "assert_options( int $what [, mixed $value ])", "assert( mixed $assertion [, string $description ])", "atan( float $arg)", "atan2( float $y , float $x)", "atanh( float $arg)", "__autoload( string $class)", "base_convert( string $number , int $frombase , int $tobase)", "base64_decode( string $data [, bool $strict = false ])", "base64_encode( string $data)", "basename( string $path [, string $suffix ])", "bbcode_add_element( resource $bbcode_container , string $tag_name , array $tag_rules)", "bbcode_add_smiley( resource $bbcode_container , string $smiley , string $replace_by)", "bbcode_create([ array $bbcode_initial_tags = NULL ])", "bbcode_destroy( resource $bbcode_container)", "bbcode_parse( resource $bbcode_container , string $to_parse)", "bbcode_set_arg_parser( resource $bbcode_container , resource $bbcode_arg_parser)", "bbcode_set_flags( resource $bbcode_container , int $flags [, int $mode = BBCODE_SET_FLAGS_SET ])", "bcadd( string $left_operand , string $right_operand [, int $scale ])", "bccomp( string $left_operand = &quot;&quot; , string $right_operand = &quot;&quot; [, int $scale = int ])", "bcdiv( string $left_operand = &quot;&quot; , string $right_operand = &quot;&quot; [, int $scale = int ])", "bcmod( string $left_operand , string $modulus)", "bcmul( string $left_operand = &quot;&quot; , string $right_operand = &quot;&quot; [, int $scale = int ])", "bcompiler_load_exe( string $filename)", "bcompiler_load( string $filename)", "bcompiler_parse_class( string $class , string $callback)", "bcompiler_read( resource $filehandle)", "bcompiler_write_class( resource $filehandle , string $className [, string $extends ])", "bcompiler_write_constant( resource $filehandle , string $constantName)", "bcompiler_write_exe_footer( resource $filehandle , int $startpos)", "bcompiler_write_file( resource $filehandle , string $filename)", "bcompiler_write_footer( resource $filehandle)", "bcompiler_write_function( resource $filehandle , string $functionName)", "bcompiler_write_functions_from_file( resource $filehandle , string $fileName)", "bcompiler_write_header( resource $filehandle [, string $write_ver ])", "bcompiler_write_included_filename( resource $filehandle , string $filename)", "bcpow( string $left_operand , string $right_operand [, int $scale ])", "bcpowmod( string $left_operand = &quot;&quot; , string $right_operand = &quot;&quot; , string $modulus = &quot;&quot; [, int $scale = int ])", "bcscale( int $scale)", "bcsqrt( string $operand [, int $scale ])", "bcsub( string $left_operand = &quot;&quot; , string $right_operand = &quot;&quot; [, int $scale = int ])", "bin2hex( string $str)", "bind_textdomain_codeset( string $domain , string $codeset)", "bindec( string $binary_string)", "bindtextdomain( string $domain , string $directory)", "blenc_encrypt( string $plaintext , string $encodedfile [, string $encryption_key ])", "boolval( mixed $var)", "bson_decode( string $bson)", "bson_encode( mixed $anything)", "bzclose( resource $bz)", "bzcompress( string $source [, int $blocksize = 4 [, int $workfactor = 0 ]])", "bzdecompress( string $source [, int $small = 0 ])", "bzerrno( resource $bz)", "bzerror( resource $bz)", "bzerrstr( resource $bz)", "bzflush( resource $bz)", "bzopen( string $filename , string $mode)", "bzread( resource $bz [, int $length = 1024 ])", "bzwrite( resource $bz , string $data [, int $length ])", "cairo_create( CairoSurface $surface)", "cairo_font_face_get_type( CairoFontFace $fontface)", "cairo_font_face_status( CairoFontFace $fontface)", "cairo_font_options_create( void)", "cairo_font_options_equal( CairoFontOptions $options , CairoFontOptions $other)", "cairo_font_options_get_antialias( CairoFontOptions $options)", "cairo_font_options_get_hint_metrics( CairoFontOptions $options)", "cairo_font_options_get_hint_style( CairoFontOptions $options)", "cairo_font_options_get_subpixel_order( CairoFontOptions $options)", "cairo_font_options_hash( CairoFontOptions $options)", "cairo_font_options_merge( CairoFontOptions $options , CairoFontOptions $other)", "cairo_font_options_set_antialias( CairoFontOptions $options , int $antialias)", "cairo_font_options_set_hint_metrics( CairoFontOptions $options , int $hint_metrics)", "cairo_font_options_set_hint_style( CairoFontOptions $options , int $hint_style)", "cairo_font_options_set_subpixel_order( CairoFontOptions $options , int $subpixel_order)", "cairo_font_options_status( CairoFontOptions $options)", "cairo_format_stride_for_width( int $format , int $width)", "cairo_image_surface_create_for_data( string $data , int $format , int $width , int $height [, int $stride = -1 ])", "cairo_image_surface_create_from_png( string $file)", "cairo_image_surface_create( int $format , int $width , int $height)", "cairo_image_surface_get_data( CairoImageSurface $surface)", "cairo_image_surface_get_format( CairoImageSurface $surface)", "cairo_image_surface_get_height( CairoImageSurface $surface)", "cairo_image_surface_get_stride( CairoImageSurface $surface)", "cairo_image_surface_get_width( CairoImageSurface $surface)", "cairo_matrix_invert( CairoMatrix $matrix)", "cairo_matrix_multiply( CairoMatrix $matrix1 , CairoMatrix $matrix2)", "cairo_matrix_rotate( CairoMatrix $matrix , float $radians)", "cairo_matrix_transform_distance( CairoMatrix $matrix , float $dx , float $dy)", "cairo_matrix_transform_point( CairoMatrix $matrix , float $dx , float $dy)", "cairo_matrix_translate( CairoMatrix $matrix , float $tx , float $ty)", "cairo_pattern_add_color_stop_rgb( CairoGradientPattern $pattern , float $offset , float $red , float $green , float $blue)", "cairo_pattern_add_color_stop_rgba( CairoGradientPattern $pattern , float $offset , float $red , float $green , float $blue , float $alpha)", "cairo_pattern_create_for_surface( CairoSurface $surface)", "cairo_pattern_create_linear( float $x0 , float $y0 , float $x1 , float $y1)", "cairo_pattern_create_radial( float $x0 , float $y0 , float $r0 , float $x1 , float $y1 , float $r1)", "cairo_pattern_create_rgb( float $red , float $green , float $blue)", "cairo_pattern_create_rgba( float $red , float $green , float $blue , float $alpha)", "cairo_pattern_get_color_stop_count( CairoGradientPattern $pattern)", "cairo_pattern_get_color_stop_rgba( CairoGradientPattern $pattern , int $index)", "cairo_pattern_get_extend( string $pattern)", "cairo_pattern_get_filter( CairoSurfacePattern $pattern)", "cairo_pattern_get_linear_points( CairoLinearGradient $pattern)", "cairo_pattern_get_matrix( CairoPattern $pattern)", "cairo_pattern_get_radial_circles( CairoRadialGradient $pattern)", "cairo_pattern_get_rgba( CairoSolidPattern $pattern)", "cairo_pattern_get_surface( CairoSurfacePattern $pattern)", "cairo_pattern_get_type( CairoPattern $pattern)", "cairo_pattern_set_extend( string $pattern , string $extend)", "cairo_pattern_set_filter( CairoSurfacePattern $pattern , int $filter)", "cairo_pattern_set_matrix( CairoPattern $pattern , CairoMatrix $matrix)", "cairo_pattern_status( CairoPattern $pattern)", "cairo_pdf_surface_create( string $file , float $width , float $height)", "cairo_pdf_surface_set_size( CairoPdfSurface $surface , float $width , float $height)", "cairo_ps_get_levels( void)", "cairo_ps_level_to_string( int $level)", "cairo_ps_surface_create( string $file , float $width , float $height)", "cairo_ps_surface_dsc_begin_page_setup( CairoPsSurface $surface)", "cairo_ps_surface_dsc_begin_setup( CairoPsSurface $surface)", "cairo_ps_surface_dsc_comment( CairoPsSurface $surface , string $comment)", "cairo_ps_surface_get_eps( CairoPsSurface $surface)", "cairo_ps_surface_restrict_to_level( CairoPsSurface $surface , int $level)", "cairo_ps_surface_set_eps( CairoPsSurface $surface , bool $level)", "cairo_ps_surface_set_size( CairoPsSurface $surface , float $width , float $height)", "cairo_scaled_font_create( CairoFontFace $fontface , CairoMatrix $matrix , CairoMatrix $ctm , CairoFontOptions $fontoptions)", "cairo_scaled_font_extents( CairoScaledFont $scaledfont)", "cairo_scaled_font_get_ctm( CairoScaledFont $scaledfont)", "cairo_scaled_font_get_font_face( CairoScaledFont $scaledfont)", "cairo_scaled_font_get_font_matrix( CairoScaledFont $scaledfont)", "cairo_scaled_font_get_font_options( CairoScaledFont $scaledfont)", "cairo_scaled_font_get_scale_matrix( CairoScaledFont $scaledfont)", "cairo_scaled_font_get_type( CairoScaledFont $scaledfont)", "cairo_scaled_font_glyph_extents( CairoScaledFont $scaledfont , array $glyphs)", "cairo_scaled_font_status( CairoScaledFont $scaledfont)", "cairo_scaled_font_text_extents( CairoScaledFont $scaledfont , string $text)", "cairo_surface_copy_page( CairoSurface $surface)", "cairo_surface_create_similar( CairoSurface $surface , int $content , float $width , float $height)", "cairo_surface_finish( CairoSurface $surface)", "cairo_surface_flush( CairoSurface $surface)", "cairo_surface_get_content( CairoSurface $surface)", "cairo_surface_get_device_offset( CairoSurface $surface)", "cairo_surface_get_font_options( CairoSurface $surface)", "cairo_surface_get_type( CairoSurface $surface)", "cairo_surface_mark_dirty_rectangle( CairoSurface $surface , float $x , float $y , float $width , float $height)", "cairo_surface_mark_dirty( CairoSurface $surface)", "cairo_surface_set_device_offset( CairoSurface $surface , float $x , float $y)", "cairo_surface_set_fallback_resolution( CairoSurface $surface , float $x , float $y)", "cairo_surface_show_page( CairoSurface $surface)", "cairo_surface_status( CairoSurface $surface)", "cairo_surface_write_to_png( CairoSurface $surface , resource $stream)", "cairo_svg_surface_create( string $file , float $width , float $height)", "cairo_svg_surface_restrict_to_version( CairoSvgSurface $surface , int $version)", "cairo_svg_version_to_string( int $version)", "cal_days_in_month( int $calendar , int $month , int $year)", "cal_from_jd( int $jd , int $calendar)", "cal_info([ int $calendar = -1 ])", "cal_to_jd( int $calendar , int $month , int $day , int $year)", "calcul_hmac( string $clent , string $siretcode , string $price , string $reference , string $validity , string $taxation , string $devise , string $language)", "calculhmac( string $clent , string $data)", "call_user_func_array( callable $callback , array $param_arr)", "call_user_func( callable $callback [, mixed $parameter [, mixed $... ]])", "call_user_method_array( string $method_name , object &$obj , array $params)", "call_user_method( string $method_name , object &$obj [, mixed $parameter [, mixed $... ]])", "ceil( float $value)", "chdb_create( string $pathname , array $data)", "chdir( string $directory)", "checkdate( int $month , int $day , int $year)", "checkdnsrr( string $host [, string $type = &quot;MX&quot; ])", "chgrp( string $filename , mixed $group)", "chmod( string $filename , int $mode)", "chown( string $filename , mixed $user)", "chr( int $ascii)", "chroot( string $directory)", "chunk_split( string $body [, int $chunklen = 76 [, string $end = &quot;\\r\\n&quot; ]])", "class_alias( string $original , string $alias [, bool $autoload = TRUE ])", "class_exists( string $class_name [, bool $autoload = true ])", "class_implements( mixed $class [, bool $autoload = true ])", "class_parents( mixed $class [, bool $autoload = true ])", "class_uses( mixed $class [, bool $autoload = true ])", "classkit_import( string $filename)", "classkit_method_add( string $classname , string $methodname , string $args , string $code [, int $flags = CLASSKIT_ACC_PUBLIC ])", "classkit_method_copy( string $dClass , string $dMethod , string $sClass [, string $sMethod ])", "classkit_method_redefine( string $classname , string $methodname , string $args , string $code [, int $flags = CLASSKIT_ACC_PUBLIC ])", "classkit_method_remove( string $classname , string $methodname)", "classkit_method_rename( string $classname , string $methodname , string $newname)", "clearstatcache([ bool $clear_realpath_cache = false [, string $filename ]])", "cli_get_process_title( void)", "cli_set_process_title( string $title)", "closedir([ resource $dir_handle ])", "closelog( void)", "com_create_guid( void)", "com_event_sink( variant $comobject , object $sinkobject [, mixed $sinkinterface ])", "com_get_active_object( string $progid [, int $code_page ])", "com_load_typelib( string $typelib_name [, bool $case_insensitive = true ])", "com_message_pump([ int $timeoutms = 0 ])", "com_print_typeinfo( object $comobject [, string $dispinterface [, bool $wantsink = false ]])", "compact( mixed $varname1 [, mixed $... ])", "connection_aborted( void)", "connection_status( void)", "constant( string $name)", "convert_cyr_string( string $str , string $from , string $to)", "convert_uudecode( string $data)", "convert_uuencode( string $data)", "copy( string $source , string $dest [, resource $context ])", "cos( float $arg)", "cosh( float $arg)", "count_chars( string $string [, int $mode = 0 ])", "count( mixed $array_or_countable [, int $mode = COUNT_NORMAL ])", "crack_check( resource $dictionary , string $password)", "crack_check( string $password)", "crack_closedict([ resource $dictionary ])", "crack_getlastmessage( void)", "crack_opendict( string $dictionary)", "crc32( string $str)", "create_function( string $args , string $code)", "crypt( string $str [, string $salt ])", "ctype_alnum( string $text)", "ctype_alpha( string $text)", "ctype_cntrl( string $text)", "ctype_digit( string $text)", "ctype_graph( string $text)", "ctype_lower( string $text)", "ctype_print( string $text)", "ctype_punct( string $text)", "ctype_space( string $text)", "ctype_upper( string $text)", "ctype_xdigit( string $text)", "cubrid_affected_rows([ resource $conn_identifier ])", "cubrid_affected_rows([ resource $req_identifier ])", "cubrid_bind( resource $req_identifier , int $bind_index , mixed $bind_value [, string $bind_value_type ])", "cubrid_client_encoding([ resource $conn_identifier ])", "cubrid_close_prepare( resource $req_identifier)", "cubrid_close_request( resource $req_identifier)", "cubrid_close([ resource $conn_identifier ])", "cubrid_col_get( resource $conn_identifier , string $oid , string $attr_name)", "cubrid_col_size( resource $conn_identifier , string $oid , string $attr_name)", "cubrid_column_names( resource $req_identifier)", "cubrid_column_types( resource $req_identifier)", "cubrid_commit( resource $conn_identifier)", "cubrid_connect_with_url( string $conn_url [, string $userid [, string $passwd [, bool $new_link = false ]]])", "cubrid_connect( string $host , int $port , string $dbname [, string $userid [, string $passwd [, bool $new_link = false ]]])", "cubrid_current_oid( resource $req_identifier)", "cubrid_data_seek( resource $result , int $row_number)", "cubrid_db_name( array $result , int $index)", "cubrid_disconnect([ resource $conn_identifier ])", "cubrid_drop( resource $conn_identifier , string $oid)", "cubrid_errno([ resource $conn_identifier ])", "cubrid_error_code_facility( void)", "cubrid_error_code( void)", "cubrid_error_msg( void)", "cubrid_error([ resource $connection ])", "cubrid_execute( resource $conn_identifier , string $sql [, int $option ])", "cubrid_execute( resource $request_identifier [, int $option ])", "cubrid_fetch_array( resource $result [, int $type = CUBRID_BOTH ])", "cubrid_fetch_assoc( resource $result [, int $type ])", "cubrid_fetch_field( resource $result [, int $field_offset = 0 ])", "cubrid_fetch_lengths( resource $result)", "cubrid_fetch_object( resource $result [, string $class_name [, array $params [, int $type ]]])", "cubrid_fetch_row( resource $result [, int $type ])", "cubrid_fetch( resource $result [, int $type = CUBRID_BOTH ])", "cubrid_field_flags( resource $result , int $field_offset)", "cubrid_field_len( resource $result , int $field_offset)", "cubrid_field_name( resource $result , int $field_offset)", "cubrid_field_seek( resource $result [, int $field_offset = 0 ])", "cubrid_field_table( resource $result , int $field_offset)", "cubrid_field_type( resource $result , int $field_offset)", "cubrid_free_result( resource $req_identifier)", "cubrid_get_autocommit( resource $conn_identifier)", "cubrid_get_charset( resource $conn_identifier)", "cubrid_get_class_name( resource $conn_identifier , string $oid)", "cubrid_get_client_info( void)", "cubrid_get_db_parameter( resource $conn_identifier)", "cubrid_get_query_timeout( resource $req_identifier)", "cubrid_get_server_info( resource $conn_identifier)", "cubrid_get( resource $conn_identifier , string $oid [, mixed $attr ])", "cubrid_insert_id([ resource $conn_identifier ])", "cubrid_is_instance( resource $conn_identifier , string $oid)", "cubrid_list_dbs([ resource $conn_identifier ])", "cubrid_load_from_glo( resource $conn_identifier , string $oid , string $file_name)", "cubrid_lob_close( array $lob_identifier_array)", "cubrid_lob_export( resource $conn_identifier , resource $lob_identifier , string $path_name)", "cubrid_lob_get( resource $conn_identifier , string $sql)", "cubrid_lob_send( resource $conn_identifier , resource $lob_identifier)", "cubrid_lob_size( resource $lob_identifier)", "cubrid_lob2_bind( resource $req_identifier , int $bind_index , mixed $bind_value [, string $bind_value_type ])", "cubrid_lob2_close( resource $lob_identifier)", "cubrid_lob2_export( resource $lob_identifier , string $file_name)", "cubrid_lob2_import( resource $lob_identifier , string $file_name)", "cubrid_lob2_new([ resource $conn_identifier [, string $type = &quot;BLOB&quot; ]])", "cubrid_lob2_read( resource $lob_identifier , int $len)", "cubrid_lob2_seek( resource $lob_identifier , int $offset [, int $origin = CUBRID_CURSOR_CURRENT ])", "cubrid_lob2_seek64( resource $lob_identifier , string $offset [, int $origin = CUBRID_CURSOR_CURRENT ])", "cubrid_lob2_size( resource $lob_identifier)", "cubrid_lob2_size64( resource $lob_identifier)", "cubrid_lob2_tell( resource $lob_identifier)", "cubrid_lob2_tell64( resource $lob_identifier)", "cubrid_lob2_write( resource $lob_identifier , string $buf)", "cubrid_lock_read( resource $conn_identifier , string $oid)", "cubrid_lock_write( resource $conn_identifier , string $oid)", "cubrid_move_cursor( resource $req_identifier , int $offset [, int $origin = CUBRID_CURSOR_CURRENT ])", "cubrid_new_glo( resource $conn_identifier , string $class_name , string $file_name)", "cubrid_next_result( resource $result)", "cubrid_num_cols( resource $result)", "cubrid_num_fields( resource $result)", "cubrid_num_rows( resource $result)", "cubrid_pconnect_with_url( string $conn_url [, string $userid [, string $passwd ]])", "cubrid_pconnect( string $host , int $port , string $dbname [, string $userid [, string $passwd ]])", "cubrid_ping([ resource $conn_identifier ])", "cubrid_prepare( resource $conn_identifier , string $prepare_stmt [, int $option = 0 ])", "cubrid_put( resource $conn_identifier , string $oid [, string $attr ], mixed $value)", "cubrid_query( string $query [, resource $conn_identifier ])", "cubrid_real_escape_string( string $unescaped_string [, resource $conn_identifier ])", "cubrid_result( resource $result , int $row [, mixed $field = 0 ])", "cubrid_rollback( resource $conn_identifier)", "cubrid_save_to_glo( resource $conn_identifier , string $oid , string $file_name)", "cubrid_schema( resource $conn_identifier , int $schema_type [, string $class_name [, string $attr_name ]])", "cubrid_send_glo( resource $conn_identifier , string $oid)", "cubrid_seq_drop( resource $conn_identifier , string $oid , string $attr_name , int $index)", "cubrid_seq_insert( resource $conn_identifier , string $oid , string $attr_name , int $index , string $seq_element)", "cubrid_seq_put( resource $conn_identifier , string $oid , string $attr_name , int $index , string $seq_element)", "cubrid_set_add( resource $conn_identifier , string $oid , string $attr_name , string $set_element)", "cubrid_set_autocommit( resource $conn_identifier , bool $mode)", "cubrid_set_db_parameter( resource $conn_identifier , int $param_type , int $param_value)", "cubrid_set_drop( resource $conn_identifier , string $oid , string $attr_name , string $set_element)", "cubrid_set_query_timeout( resource $req_identifier , int $timeout)", "cubrid_unbuffered_query( string $query [, resource $conn_identifier ])", "cubrid_version( void)", "curl_close( resource $ch)", "curl_copy_handle( resource $ch)", "curl_errno( resource $ch)", "curl_error( resource $ch)", "curl_escape( resource $ch , string $str)", "curl_exec( resource $ch)", "curl_getinfo( resource $ch [, int $opt = 0 ])", "curl_init([ string $url = NULL ])", "curl_multi_add_handle( resource $mh , resource $ch)", "curl_multi_close( resource $mh)", "curl_multi_exec( resource $mh , int &$still_running)", "curl_multi_getcontent( resource $ch)", "curl_multi_info_read( resource $mh [, int &$msgs_in_queue = NULL ])", "curl_multi_init( void)", "curl_multi_remove_handle( resource $mh , resource $ch)", "curl_multi_select( resource $mh [, float $timeout = 1.0 ])", "curl_multi_setopt( resource $mh , int $option , mixed $value)", "curl_multi_strerror( int $errornum)", "curl_pause( resource $ch , int $bitmask)", "curl_reset( resource $ch)", "curl_setopt_array( resource $ch , array $options)", "curl_setopt( resource $ch , int $option , mixed $value)", "curl_share_close( resource $sh)", "curl_share_init( void)", "curl_share_setopt( resource $sh , int $option , string $value)", "curl_strerror( int $errornum)", "curl_unescape( resource $ch , string $str)", "curl_version([ int $age = CURLVERSION_NOW ])", "current( array &$array)", "cyrus_authenticate( resource $connection [, string $mechlist [, string $service [, string $user [, int $minssf [, int $maxssf [, string $authname [, string $password ]]]]]]])", "cyrus_bind( resource $connection , array $callbacks)", "cyrus_close( resource $connection)", "cyrus_connect([ string $host [, string $port [, int $flags ]]])", "cyrus_query( resource $connection , string $query)", "cyrus_unbind( resource $connection , string $trigger_name)", "date_default_timezone_get( void)", "date_default_timezone_set( string $timezone_identifier)", "date_parse_from_format( string $format , string $date)", "date_parse( string $date)", "date_sun_info( int $time , float $latitude , float $longitude)", "date_sunrise( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get(&quot;date.default_latitude&quot;) [, float $longitude = ini_get(&quot;date.default_longitude&quot;) [, float $zenith = ini_get(&quot;date.sunrise_zenith&quot;) [, float $gmt_offset = 0 ]]]]])", "date_sunset( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get(&quot;date.default_latitude&quot;) [, float $longitude = ini_get(&quot;date.default_longitude&quot;) [, float $zenith = ini_get(&quot;date.sunset_zenith&quot;) [, float $gmt_offset = 0 ]]]]])", "date( string $format [, int $timestamp = time() ])", "db2_autocommit( resource $connection [, bool $value ])", "db2_bind_param( resource $stmt , int $parameter-number , string $variable-name [, int $parameter-type [, int $data-type = 0 [, int $precision = -1 [, int $scale = 0 ]]]])", "db2_client_info( resource $connection)", "db2_close( resource $connection)", "db2_column_privileges( resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name ]]]])", "db2_columns( resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name ]]]])", "db2_commit( resource $connection)", "db2_conn_error([ resource $connection ])", "db2_conn_errormsg([ resource $connection ])", "db2_connect( string $database , string $username , string $password [, array $options ])", "db2_cursor_type( resource $stmt)", "db2_escape_string( string $string_literal)", "db2_exec( resource $connection , string $statement [, array $options ])", "db2_execute( resource $stmt [, array $parameters ])", "db2_fetch_array( resource $stmt [, int $row_number = -1 ])", "db2_fetch_assoc( resource $stmt [, int $row_number = -1 ])", "db2_fetch_both( resource $stmt [, int $row_number = -1 ])", "db2_fetch_object( resource $stmt [, int $row_number = -1 ])", "db2_fetch_row( resource $stmt [, int $row_number ])", "db2_field_display_size( resource $stmt , mixed $column)", "db2_field_name( resource $stmt , mixed $column)", "db2_field_num( resource $stmt , mixed $column)", "db2_field_precision( resource $stmt , mixed $column)", "db2_field_scale( resource $stmt , mixed $column)", "db2_field_type( resource $stmt , mixed $column)", "db2_field_width( resource $stmt , mixed $column)", "db2_foreign_keys( resource $connection , string $qualifier , string $schema , string $table-name)", "db2_free_result( resource $stmt)", "db2_free_stmt( resource $stmt)", "db2_get_option( resource $resource , string $option)", "db2_last_insert_id( resource $resource)", "db2_lob_read( resource $stmt , int $colnum , int $length)", "db2_next_result( resource $stmt)", "db2_num_fields( resource $stmt)", "db2_num_rows( resource $stmt)", "db2_pclose( resource $resource)", "db2_pconnect( string $database , string $username , string $password [, array $options ])", "db2_prepare( resource $connection , string $statement [, array $options ])", "db2_primary_keys( resource $connection , string $qualifier , string $schema , string $table-name)", "db2_procedure_columns( resource $connection , string $qualifier , string $schema , string $procedure , string $parameter)", "db2_procedures( resource $connection , string $qualifier , string $schema , string $procedure)", "db2_result( resource $stmt , mixed $column)", "db2_rollback( resource $connection)", "db2_server_info( resource $connection)", "db2_set_option( resource $resource , array $options , int $type)", "db2_special_columns( resource $connection , string $qualifier , string $schema , string $table_name , int $scope)", "db2_statistics( resource $connection , string $qualifier , string $schema , string $table-name , bool $unique)", "db2_stmt_error([ resource $stmt ])", "db2_stmt_errormsg([ resource $stmt ])", "db2_table_privileges( resource $connection [, string $qualifier [, string $schema [, string $table_name ]]])", "db2_tables( resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $table-type ]]]])", "dba_close( resource $handle)", "dba_delete( string $key , resource $handle)", "dba_exists( string $key , resource $handle)", "dba_fetch( string $key , resource $handle)", "dba_fetch( string $key , int $skip , resource $handle)", "dba_firstkey( resource $handle)", "dba_handlers([ bool $full_info = false ])", "dba_insert( string $key , string $value , resource $handle)", "dba_key_split( mixed $key)", "dba_list( void)", "dba_nextkey( resource $handle)", "dba_open( string $path , string $mode [, string $handler [, mixed $... ]])", "dba_optimize( resource $handle)", "dba_popen( string $path , string $mode [, string $handler [, mixed $... ]])", "dba_replace( string $key , string $value , resource $handle)", "dba_sync( resource $handle)", "dbase_add_record( int $dbase_identifier , array $record)", "dbase_close( int $dbase_identifier)", "dbase_create( string $filename , array $fields)", "dbase_delete_record( int $dbase_identifier , int $record_number)", "dbase_get_header_info( int $dbase_identifier)", "dbase_get_record_with_names( int $dbase_identifier , int $record_number)", "dbase_get_record( int $dbase_identifier , int $record_number)", "dbase_numfields( int $dbase_identifier)", "dbase_numrecords( int $dbase_identifier)", "dbase_open( string $filename , int $mode)", "dbase_pack( int $dbase_identifier)", "dbase_replace_record( int $dbase_identifier , array $record , int $record_number)", "dbplus_add( resource $relation , array $tuple)", "dbplus_aql( string $query [, string $server [, string $dbpath ]])", "dbplus_chdir([ string $newdir ])", "dbplus_close( resource $relation)", "dbplus_curr( resource $relation , array &$tuple)", "dbplus_errcode([ int $errno ])", "dbplus_errno( void)", "dbplus_find( resource $relation , array $constraints , mixed $tuple)", "dbplus_first( resource $relation , array &$tuple)", "dbplus_flush( resource $relation)", "dbplus_freealllocks( void)", "dbplus_freelock( resource $relation , string $tuple)", "dbplus_freerlocks( resource $relation)", "dbplus_getlock( resource $relation , string $tuple)", "dbplus_getunique( resource $relation , int $uniqueid)", "dbplus_info( resource $relation , string $key , array &$result)", "dbplus_last( resource $relation , array &$tuple)", "dbplus_lockrel( resource $relation)", "dbplus_next( resource $relation , array &$tuple)", "dbplus_open( string $name)", "dbplus_prev( resource $relation , array &$tuple)", "dbplus_rchperm( resource $relation , int $mask , string $user , string $group)", "dbplus_rcreate( string $name , mixed $domlist [, bool $overwrite ])", "dbplus_rcrtexact( string $name , resource $relation [, bool $overwrite ])", "dbplus_rcrtlike( string $name , resource $relation [, int $overwrite ])", "dbplus_resolve( string $relation_name)", "dbplus_restorepos( resource $relation , array $tuple)", "dbplus_rkeys( resource $relation , mixed $domlist)", "dbplus_ropen( string $name)", "dbplus_rquery( string $query [, string $dbpath ])", "dbplus_rrename( resource $relation , string $name)", "dbplus_rsecindex( resource $relation , mixed $domlist , int $type)", "dbplus_runlink( resource $relation)", "dbplus_rzap( resource $relation)", "dbplus_savepos( resource $relation)", "dbplus_setindex( resource $relation , string $idx_name)", "dbplus_setindexbynumber( resource $relation , int $idx_number)", "dbplus_sql( string $query [, string $server [, string $dbpath ]])", "dbplus_tcl( int $sid , string $script)", "dbplus_tremove( resource $relation , array $tuple [, array &$current ])", "dbplus_undo( resource $relation)", "dbplus_undoprepare( resource $relation)", "dbplus_unlockrel( resource $relation)", "dbplus_unselect( resource $relation)", "dbplus_update( resource $relation , array $old , array $new)", "dbplus_xlockrel( resource $relation)", "dbplus_xunlockrel( resource $relation)", "dbx_close( object $link_identifier)", "dbx_compare( array $row_a , array $row_b , string $column_key [, int $flags = DBX_CMP_ASC | DBX_CMP_NATIVE ])", "dbx_connect( mixed $module , string $host , string $database , string $username , string $password [, int $persistent ])", "dbx_error( object $link_identifier)", "dbx_escape_string( object $link_identifier , string $text)", "dbx_fetch_row( object $result_identifier)", "dbx_query( object $link_identifier , string $sql_statement [, int $flags ])", "dbx_sort( object $result , string $user_compare_function)", "dcgettext( string $domain , string $message , int $category)", "dcngettext( string $domain , string $msgid1 , string $msgid2 , int $n , int $category)", "debug_backtrace([ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT [, int $limit = 0 ]])", "debug_print_backtrace([ int $options = 0 [, int $limit = 0 ]])", "debug_zval_dump( mixed $variable [, mixed $... ])", "decbin( int $number)", "dechex( int $number)", "decoct( int $number)", "define_syslog_variables( void)", "define( string $name , mixed $value [, bool $case_insensitive = false ])", "defined( string $name)", "deg2rad( float $number)", "dgettext( string $domain , string $message)", "dio_close( resource $fd)", "dio_fcntl( resource $fd , int $cmd [, mixed $args ])", "dio_open( string $filename , int $flags [, int $mode = 0 ])", "dio_read( resource $fd [, int $len = 1024 ])", "dio_seek( resource $fd , int $pos [, int $whence = SEEK_SET ])", "dio_stat( resource $fd)", "dio_tcsetattr( resource $fd , array $options)", "dio_truncate( resource $fd , int $offset)", "dio_write( resource $fd , string $data [, int $len = 0 ])", "dir( string $directory [, resource $context ])", "dirname( string $path)", "disk_free_space( string $directory)", "disk_total_space( string $directory)", "dl( string $library)", "dngettext( string $domain , string $msgid1 , string $msgid2 , int $n)", "dns_get_record( string $hostname [, int $type = DNS_ANY [, array &$authns [, array &$addtl [, bool &$raw = false ]]]])", "dom_import_simplexml( SimpleXMLElement $node)", "each( array &$array)", "easter_date([ int $year = date(&quot;Y&quot;) ])", "easter_days([ int $year = date(&quot;Y&quot;) [, int $method = CAL_EASTER_DEFAULT ]])", "echo( string $arg1 [, string $... ])", "eio_busy( int $delay [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_cancel( resource $req)", "eio_chmod( string $path , int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_chown( string $path , int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]])", "eio_close( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_custom( callable $execute , int $pri , callable $callback [, mixed $data = NULL ])", "eio_dup2( mixed $fd , mixed $fd2 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_event_loop( void)", "eio_fallocate( mixed $fd , int $mode , int $offset , int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_fchmod( mixed $fd , int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_fchown( mixed $fd , int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]])", "eio_fdatasync( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_fstat( mixed $fd , int $pri , callable $callback [, mixed $data ])", "eio_fstatvfs( mixed $fd , int $pri , callable $callback [, mixed $data ])", "eio_fsync( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_ftruncate( mixed $fd [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]])", "eio_futime( mixed $fd , float $atime , float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_get_event_stream( void)", "eio_get_last_error( resource $req)", "eio_grp_add( resource $grp , resource $req)", "eio_grp_cancel( resource $grp)", "eio_grp_limit( resource $grp , int $limit)", "eio_grp( callable $callback [, string $data = NULL ])", "eio_init( void)", "eio_link( string $path , string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_lstat( string $path , int $pri , callable $callback [, mixed $data = NULL ])", "eio_mkdir( string $path , int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_mknod( string $path , int $mode , int $dev [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_nop([ int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_npending( void)", "eio_nready( void)", "eio_nreqs( void)", "eio_nthreads( void)", "eio_open( string $path , int $flags , int $mode , int $pri , callable $callback [, mixed $data = NULL ])", "eio_poll( void)", "eio_read( mixed $fd , int $length , int $offset , int $pri , callable $callback [, mixed $data = NULL ])", "eio_readahead( mixed $fd , int $offset , int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_readdir( string $path , int $flags , int $pri , callable $callback [, string $data = NULL ])", "eio_readlink( string $path , int $pri , callable $callback [, string $data = NULL ])", "eio_realpath( string $path , int $pri , callable $callback [, string $data = NULL ])", "eio_rename( string $path , string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_rmdir( string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_seek( mixed $fd , int $offset , int $whence [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_sendfile( mixed $out_fd , mixed $in_fd , int $offset , int $length [, int $pri [, callable $callback [, string $data ]]])", "eio_set_max_idle( int $nthreads)", "eio_set_max_parallel( int $nthreads)", "eio_set_max_poll_reqs( int $nreqs)", "eio_set_max_poll_time( float $nseconds)", "eio_set_min_parallel( string $nthreads)", "eio_stat( string $path , int $pri , callable $callback [, mixed $data = NULL ])", "eio_statvfs( string $path , int $pri , callable $callback [, mixed $data ])", "eio_symlink( string $path , string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_sync_file_range( mixed $fd , int $offset , int $nbytes , int $flags [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_sync([ int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_syncfs( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_truncate( string $path [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]])", "eio_unlink( string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_utime( string $path , float $atime , float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]])", "eio_write( mixed $fd , string $str [, int $length = 0 [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]]])", "empty( mixed $var)", "enchant_broker_describe( resource $broker)", "enchant_broker_dict_exists( resource $broker , string $tag)", "enchant_broker_free_dict( resource $dict)", "enchant_broker_free( resource $broker)", "enchant_broker_get_error( resource $broker)", "enchant_broker_init( void)", "enchant_broker_list_dicts( resource $broker)", "enchant_broker_request_dict( resource $broker , string $tag)", "enchant_broker_request_pwl_dict( resource $broker , string $filename)", "enchant_broker_set_ordering( resource $broker , string $tag , string $ordering)", "enchant_dict_add_to_personal( resource $dict , string $word)", "enchant_dict_add_to_session( resource $dict , string $word)", "enchant_dict_check( resource $dict , string $word)", "enchant_dict_describe( resource $dict)", "enchant_dict_get_error( resource $dict)", "enchant_dict_is_in_session( resource $dict , string $word)", "enchant_dict_quick_check( resource $dict , string $word [, array &$suggestions ])", "enchant_dict_store_replacement( resource $dict , string $mis , string $cor)", "enchant_dict_suggest( resource $dict , string $word)", "end( array &$array)", "ereg_replace( string $pattern , string $replacement , string $string)", "ereg( string $pattern , string $string [, array &$regs ])", "eregi_replace( string $pattern , string $replacement , string $string)", "eregi( string $pattern , string $string [, array &$regs ])", "error_get_last( void)", "error_log( string $message [, int $message_type = 0 [, string $destination [, string $extra_headers ]]])", "error_reporting([ int $level ])", "escapeshellarg( string $arg)", "escapeshellcmd( string $command)", "eval( string $code)", "event_add( resource $event [, int $timeout = -1 ])", "event_base_free( resource $event_base)", "event_base_loop( resource $event_base [, int $flags = 0 ])", "event_base_loopbreak( resource $event_base)", "event_base_loopexit( resource $event_base [, int $timeout = -1 ])", "event_base_new( void)", "event_base_priority_init( resource $event_base , int $npriorities)", "event_base_reinit( resource $event_base)", "event_base_set( resource $event , resource $event_base)", "event_buffer_base_set( resource $bevent , resource $event_base)", "event_buffer_disable( resource $bevent , int $events)", "event_buffer_enable( resource $bevent , int $events)", "event_buffer_fd_set( resource $bevent , resource $fd)", "event_buffer_free( resource $bevent)", "event_buffer_new( resource $stream , mixed $readcb , mixed $writecb , mixed $errorcb [, mixed $arg ])", "event_buffer_priority_set( resource $bevent , int $priority)", "event_buffer_read( resource $bevent , int $data_size)", "event_buffer_set_callback( resource $event , mixed $readcb , mixed $writecb , mixed $errorcb [, mixed $arg ])", "event_buffer_timeout_set( resource $bevent , int $read_timeout , int $write_timeout)", "event_buffer_watermark_set( resource $bevent , int $events , int $lowmark , int $highmark)", "event_buffer_write( resource $bevent , string $data [, int $data_size = -1 ])", "event_del( resource $event)", "event_free( resource $event)", "event_new( void)", "event_priority_set( resource $event , int $priority)", "event_set( resource $event , mixed $fd , int $events , mixed $callback [, mixed $arg ])", "event_timer_set( resource $event , callable $callback [, mixed $arg ])", "exec( string $command [, array &$output [, int &$return_var ]])", "exif_imagetype( string $filename)", "exif_read_data( string $filename [, string $sections = NULL [, bool $arrays = false [, bool $thumbnail = false ]]])", "exif_tagname( int $index)", "exif_thumbnail( string $filename [, int &$width [, int &$height [, int &$imagetype ]]])", "exit([ string $status ])", "exit( int $status)", "exp( float $arg)", "expect_expectl( resource $expect , array $cases [, array &$match ])", "expect_popen( string $command)", "explode( string $delimiter , string $string [, int $limit ])", "expm1( float $arg)", "extension_loaded( string $name)", "extract( array &$array [, int $flags = EXTR_OVERWRITE [, string $prefix = NULL ]])", "ezmlm_hash( string $addr)", "fam_cancel_monitor( resource $fam , resource $fam_monitor)", "fam_close( resource $fam)", "fam_monitor_collection( resource $fam , string $dirname , int $depth , string $mask)", "fam_monitor_directory( resource $fam , string $dirname)", "fam_monitor_file( resource $fam , string $filename)", "fam_next_event( resource $fam)", "fam_open([ string $appname ])", "fam_pending( resource $fam)", "fam_resume_monitor( resource $fam , resource $fam_monitor)", "fam_suspend_monitor( resource $fam , resource $fam_monitor)", "fann_cascadetrain_on_data( resource $ann , resource $data , int $max_neurons , int $neurons_between_reports , float $desired_error)", "fann_cascadetrain_on_file( resource $ann , string $filename , int $max_neurons , int $neurons_between_reports , float $desired_error)", "fann_clear_scaling_params( resource $ann)", "fann_copy( resource $ann)", "fann_create_from_file( string $configuration_file)", "fann_create_shortcut_array( int $num_layers , array $layers)", "fann_create_shortcut( int $num_layers , int $num_neurons1 , int $num_neurons2 [, int $... ])", "fann_create_sparse_array( float $connection_rate , int $num_layers , array $layers)", "fann_create_sparse( float $connection_rate , int $num_layers , int $num_neurons1 , int $num_neurons2 [, int $... ])", "fann_create_standard_array( int $num_layers , array $layers)", "fann_create_standard( int $num_layers , int $num_neurons1 , int $num_neurons2 [, int $... ])", "fann_create_train_from_callback( int $num_data , int $num_input , int $num_output , collable $user_function)", "fann_create_train( int $num_data , int $num_input , int $num_output)", "fann_descale_input( resource $ann , array $input_vector)", "fann_descale_output( resource $ann , array $output_vector)", "fann_descale_train( resource $ann , resource $train_data)", "fann_destroy_train( resource $train_data)", "fann_destroy( resource $ann)", "fann_duplicate_train_data( resource $data)", "fann_get_activation_function( resource $ann , int $layer , int $neuron)", "fann_get_activation_steepness( resource $ann , int $layer , int $neuron)", "fann_get_bias_array( resource $ann)", "fann_get_bit_fail_limit( resource $ann)", "fann_get_bit_fail( resource $ann)", "fann_get_cascade_activation_functions_count( resource $ann)", "fann_get_cascade_activation_functions( resource $ann)", "fann_get_cascade_activation_steepnesses_count( resource $ann)", "fann_get_cascade_activation_steepnesses( resource $ann)", "fann_get_cascade_candidate_change_fraction( resource $ann)", "fann_get_cascade_candidate_limit( resource $ann)", "fann_get_cascade_candidate_stagnation_epochs( resource $ann)", "fann_get_cascade_max_cand_epochs( resource $ann)", "fann_get_cascade_max_out_epochs( resource $ann)", "fann_get_cascade_min_cand_epochs( resource $ann)", "fann_get_cascade_min_out_epochs( resource $ann)", "fann_get_cascade_num_candidate_groups( resource $ann)", "fann_get_cascade_num_candidates( resource $ann)", "fann_get_cascade_output_change_fraction( resource $ann)", "fann_get_cascade_output_stagnation_epochs( resource $ann)", "fann_get_cascade_weight_multiplier( resource $ann)", "fann_get_connection_array( resource $ann)", "fann_get_connection_rate( resource $ann)", "fann_get_errno( resource $errdat)", "fann_get_errstr( resource $errdat)", "fann_get_layer_array( resource $ann)", "fann_get_learning_momentum( resource $ann)", "fann_get_learning_rate( resource $ann)", "fann_get_MSE( resource $ann)", "fann_get_network_type( resource $ann)", "fann_get_num_input( resource $ann)", "fann_get_num_layers( resource $ann)", "fann_get_num_output( resource $ann)", "fann_get_quickprop_decay( resource $ann)", "fann_get_quickprop_mu( resource $ann)", "fann_get_rprop_decrease_factor( resource $ann)", "fann_get_rprop_delta_max( resource $ann)", "fann_get_rprop_delta_min( resource $ann)", "fann_get_rprop_delta_zero( resource $ann)", "fann_get_rprop_increase_factor( resource $ann)", "fann_get_sarprop_step_error_shift( resource $ann)", "fann_get_sarprop_step_error_threshold_factor( resource $ann)", "fann_get_sarprop_temperature( resource $ann)", "fann_get_sarprop_weight_decay_shift( resource $ann)", "fann_get_total_connections( resource $ann)", "fann_get_total_neurons( resource $ann)", "fann_get_train_error_function( resource $ann)", "fann_get_train_stop_function( resource $ann)", "fann_get_training_algorithm( resource $ann)", "fann_init_weights( resource $ann , resource $train_data)", "fann_length_train_data( resource $data)", "fann_merge_train_data( resource $data1 , resource $data2)", "fann_num_input_train_data( resource $data)", "fann_num_output_train_data( resource $data)", "fann_print_error( string $errdat)", "fann_randomize_weights( resource $ann , float $min_weight , float $max_weight)", "fann_read_train_from_file( string $filename)", "fann_reset_errno( resource $errdat)", "fann_reset_errstr( resource $errdat)", "fann_reset_MSE( string $ann)", "fann_run( resource $ann , array $input)", "fann_save_train( resource $data , string $file_name)", "fann_save( resource $ann , string $configuration_file)", "fann_scale_input_train_data( resource $train_data , float $new_min , float $new_max)", "fann_scale_input( resource $ann , array $input_vector)", "fann_scale_output_train_data( resource $train_data , float $new_min , float $new_max)", "fann_scale_output( resource $ann , array $output_vector)", "fann_scale_train_data( resource $train_data , float $new_min , float $new_max)", "fann_scale_train( resource $ann , resource $train_data)", "fann_set_activation_function_hidden( resource $ann , int $activation_function)", "fann_set_activation_function_layer( resource $ann , int $activation_function , int $layer)", "fann_set_activation_function_output( resource $ann , int $activation_function)", "fann_set_activation_function( resource $ann , int $activation_function , int $layer , int $neuron)", "fann_set_activation_steepness_hidden( resource $ann , float $activation_steepness)", "fann_set_activation_steepness_layer( resource $ann , float $activation_steepness , int $layer)", "fann_set_activation_steepness_output( resource $ann , float $activation_steepness)", "fann_set_activation_steepness( resource $ann , float $activation_steepness , int $layer , int $neuron)", "fann_set_bit_fail_limit( resource $ann , float $bit_fail_limit)", "fann_set_callback( resource $ann , collable $callback)", "fann_set_cascade_activation_functions( resource $ann , array $cascade_activation_functions)", "fann_set_cascade_activation_steepnesses( resource $ann , array $cascade_activation_steepnesses_count)", "fann_set_cascade_candidate_change_fraction( resource $ann , float $cascade_candidate_change_fraction)", "fann_set_cascade_candidate_limit( resource $ann , float $cascade_candidate_limit)", "fann_set_cascade_candidate_stagnation_epochs( resource $ann , int $cascade_candidate_stagnation_epochs)", "fann_set_cascade_max_cand_epochs( resource $ann , int $cascade_max_cand_epochs)", "fann_set_cascade_max_out_epochs( resource $ann , int $cascade_max_out_epochs)", "fann_set_cascade_min_cand_epochs( resource $ann , int $cascade_min_cand_epochs)", "fann_set_cascade_min_out_epochs( resource $ann , int $cascade_min_out_epochs)", "fann_set_cascade_num_candidate_groups( resource $ann , int $cascade_num_candidate_groups)", "fann_set_cascade_output_change_fraction( resource $ann , float $cascade_output_change_fraction)", "fann_set_cascade_output_stagnation_epochs( resource $ann , int $cascade_output_stagnation_epochs)", "fann_set_cascade_weight_multiplier( resource $ann , float $cascade_weight_multiplier)", "fann_set_error_log( resource $errdat , string $log_file)", "fann_set_input_scaling_params( resource $ann , resource $train_data , float $new_input_min , float $new_input_max)", "fann_set_learning_momentum( resource $ann , float $learning_momentum)", "fann_set_learning_rate( resource $ann , float $learning_rate)", "fann_set_output_scaling_params( resource $ann , resource $train_data , float $new_output_min , float $new_output_max)", "fann_set_quickprop_decay( resource $ann , float $quickprop_decay)", "fann_set_quickprop_mu( resource $ann , float $quickprop_mu)", "fann_set_rprop_decrease_factor( resource $ann , float $rprop_decrease_factor)", "fann_set_rprop_delta_max( resource $ann , float $rprop_delta_max)", "fann_set_rprop_delta_min( resource $ann , float $rprop_delta_min)", "fann_set_rprop_delta_zero( resource $ann , float $rprop_delta_zero)", "fann_set_rprop_increase_factor( resource $ann , float $rprop_increase_factor)", "fann_set_sarprop_step_error_shift( resource $ann , float $sarprop_step_error_shift)", "fann_set_sarprop_step_error_threshold_factor( resource $ann , float $sarprop_step_error_threshold_factor)", "fann_set_sarprop_temperature( resource $ann , float $sarprop_temperature)", "fann_set_sarprop_weight_decay_shift( resource $ann , float $sarprop_weight_decay_shift)", "fann_set_scaling_params( resource $ann , resource $train_data , float $new_input_min , float $new_input_max , float $new_output_min , float $new_output_max)", "fann_set_train_error_function( resource $ann , int $error_function)", "fann_set_train_stop_function( resource $ann , int $stop_function)", "fann_set_training_algorithm( resource $ann , int $training_algorithm)", "fann_set_weight_array( resource $ann , array $connections)", "fann_set_weight( resource $ann , int $from_neuron , int $to_neuron , float $weight)", "fann_shuffle_train_data( resource $train_data)", "fann_subset_train_data( resource $data , int $pos , int $length)", "fann_test_data( resource $ann , resource $data)", "fann_test( resource $ann , array $input , array $desired_output)", "fann_train_epoch( resource $ann , resource $data)", "fann_train_on_data( resource $ann , resource $data , int $max_epochs , int $epochs_between_reports , float $desired_error)", "fann_train_on_file( resource $ann , string $filename , int $max_epochs , int $epochs_between_reports , float $desired_error)", "fann_train( resource $ann , array $input , array $desired_output)", "fastcgi_finish_request( void)", "fbsql_affected_rows([ resource $link_identifier ])", "fbsql_autocommit( resource $link_identifier [, bool $OnOff ])", "fbsql_blob_size( string $blob_handle [, resource $link_identifier ])", "fbsql_change_user( string $user , string $password [, string $database [, resource $link_identifier ]])", "fbsql_clob_size( string $clob_handle [, resource $link_identifier ])", "fbsql_close([ resource $link_identifier ])", "fbsql_commit([ resource $link_identifier ])", "fbsql_connect([ string $hostname = ini_get(&quot;fbsql.default_host&quot;) [, string $username = ini_get(&quot;fbsql.default_user&quot;) [, string $password = ini_get(&quot;fbsql.default_password&quot;) ]]])", "fbsql_create_blob( string $blob_data [, resource $link_identifier ])", "fbsql_create_clob( string $clob_data [, resource $link_identifier ])", "fbsql_create_db( string $database_name [, resource $link_identifier [, string $database_options ]])", "fbsql_data_seek( resource $result , int $row_number)", "fbsql_database_password( resource $link_identifier [, string $database_password ])", "fbsql_database( resource $link_identifier [, string $database ])", "fbsql_db_query( string $database , string $query [, resource $link_identifier ])", "fbsql_db_status( string $database_name [, resource $link_identifier ])", "fbsql_drop_db( string $database_name [, resource $link_identifier ])", "fbsql_errno([ resource $link_identifier ])", "fbsql_error([ resource $link_identifier ])", "fbsql_fetch_array( resource $result [, int $result_type ])", "fbsql_fetch_assoc( resource $result)", "fbsql_fetch_field( resource $result [, int $field_offset ])", "fbsql_fetch_lengths( resource $result)", "fbsql_fetch_object( resource $result)", "fbsql_fetch_row( resource $result)", "fbsql_field_flags( resource $result [, int $field_offset ])", "fbsql_field_len( resource $result [, int $field_offset ])", "fbsql_field_name( resource $result [, int $field_index ])", "fbsql_field_seek( resource $result [, int $field_offset ])", "fbsql_field_table( resource $result [, int $field_offset ])", "fbsql_field_type( resource $result [, int $field_offset ])", "fbsql_free_result( resource $result)", "fbsql_get_autostart_info([ resource $link_identifier ])", "fbsql_hostname( resource $link_identifier [, string $host_name ])", "fbsql_insert_id([ resource $link_identifier ])", "fbsql_list_dbs([ resource $link_identifier ])", "fbsql_list_fields( string $database_name , string $table_name [, resource $link_identifier ])", "fbsql_list_tables( string $database [, resource $link_identifier ])", "fbsql_next_result( resource $result)", "fbsql_num_fields( resource $result)", "fbsql_num_rows( resource $result)", "fbsql_password( resource $link_identifier [, string $password ])", "fbsql_pconnect([ string $hostname = ini_get(&quot;fbsql.default_host&quot;) [, string $username = ini_get(&quot;fbsql.default_user&quot;) [, string $password = ini_get(&quot;fbsql.default_password&quot;) ]]])", "fbsql_query( string $query [, resource $link_identifier [, int $batch_size ]])", "fbsql_read_blob( string $blob_handle [, resource $link_identifier ])", "fbsql_read_clob( string $clob_handle [, resource $link_identifier ])", "fbsql_result( resource $result [, int $row [, mixed $field ]])", "fbsql_rollback([ resource $link_identifier ])", "fbsql_rows_fetched( resource $result)", "fbsql_select_db([ string $database_name [, resource $link_identifier ]])", "fbsql_set_characterset( resource $link_identifier , int $characterset [, int $in_out_both ])", "fbsql_set_lob_mode( resource $result , int $lob_mode)", "fbsql_set_password( resource $link_identifier , string $user , string $password , string $old_password)", "fbsql_set_transaction( resource $link_identifier , int $locking , int $isolation)", "fbsql_start_db( string $database_name [, resource $link_identifier [, string $database_options ]])", "fbsql_stop_db( string $database_name [, resource $link_identifier ])", "fbsql_table_name( resource $result , int $index)", "fbsql_username( resource $link_identifier [, string $username ])", "fbsql_warnings([ bool $OnOff ])", "fclose( resource $handle)", "fdf_add_doc_javascript( resource $fdf_document , string $script_name , string $script_code)", "fdf_add_template( resource $fdf_document , int $newpage , string $filename , string $template , int $rename)", "fdf_close( resource $fdf_document)", "fdf_create( void)", "fdf_enum_values( resource $fdf_document , callable $function [, mixed $userdata ])", "fdf_errno( void)", "fdf_error([ int $error_code = -1 ])", "fdf_get_ap( resource $fdf_document , string $field , int $face , string $filename)", "fdf_get_attachment( resource $fdf_document , string $fieldname , string $savepath)", "fdf_get_encoding( resource $fdf_document)", "fdf_get_file( resource $fdf_document)", "fdf_get_flags( resource $fdf_document , string $fieldname , int $whichflags)", "fdf_get_opt( resource $fdf_document , string $fieldname [, int $element = -1 ])", "fdf_get_status( resource $fdf_document)", "fdf_get_value( resource $fdf_document , string $fieldname [, int $which = -1 ])", "fdf_get_version([ resource $fdf_document ])", "fdf_header( void)", "fdf_next_field_name( resource $fdf_document [, string $fieldname ])", "fdf_open_string( string $fdf_data)", "fdf_open( string $filename)", "fdf_remove_item( resource $fdf_document , string $fieldname , int $item)", "fdf_save_string( resource $fdf_document)", "fdf_save( resource $fdf_document [, string $filename ])", "fdf_set_ap( resource $fdf_document , string $field_name , int $face , string $filename , int $page_number)", "fdf_set_encoding( resource $fdf_document , string $encoding)", "fdf_set_file( resource $fdf_document , string $url [, string $target_frame ])", "fdf_set_flags( resource $fdf_document , string $fieldname , int $whichFlags , int $newFlags)", "fdf_set_javascript_action( resource $fdf_document , string $fieldname , int $trigger , string $script)", "fdf_set_on_import_javascript( resource $fdf_document , string $script , bool $before_data_import)", "fdf_set_opt( resource $fdf_document , string $fieldname , int $element , string $str1 , string $str2)", "fdf_set_status( resource $fdf_document , string $status)", "fdf_set_submit_form_action( resource $fdf_document , string $fieldname , int $trigger , string $script , int $flags)", "fdf_set_target_frame( resource $fdf_document , string $frame_name)", "fdf_set_value( resource $fdf_document , string $fieldname , mixed $value [, int $isName ])", "fdf_set_version( resource $fdf_document , string $version)", "feof( resource $handle)", "fflush( resource $handle)", "fgetc( resource $handle)", "fgetcsv( resource $handle [, int $length = 0 [, string $delimiter = &quot;,&quot; [, string $enclosure = &#039;&quot;&#039; [, string $escape = &quot;\\\\&quot; ]]]])", "fgets( resource $handle [, int $length ])", "fgetss( resource $handle [, int $length [, string $allowable_tags ]])", "file_exists( string $filename)", "file_get_contents( string $filename [, bool $use_include_path = false [, resource $context [, int $offset = -1 [, int $maxlen ]]]])", "file_put_contents( string $filename , mixed $data [, int $flags = 0 [, resource $context ]])", "file( string $filename [, int $flags = 0 [, resource $context ]])", "fileatime( string $filename)", "filectime( string $filename)", "filegroup( string $filename)", "fileinode( string $filename)", "filemtime( string $filename)", "fileowner( string $filename)", "fileperms( string $filename)", "filepro_fieldcount( void)", "filepro_fieldname( int $field_number)", "filepro_fieldtype( int $field_number)", "filepro_fieldwidth( int $field_number)", "filepro_retrieve( int $row_number , int $field_number)", "filepro_rowcount( void)", "filepro( string $directory)", "filesize( string $filename)", "filetype( string $filename)", "filter_has_var( int $type , string $variable_name)", "filter_id( string $filtername)", "filter_input_array( int $type [, mixed $definition [, bool $add_empty = true ]])", "filter_input( int $type , string $variable_name [, int $filter = FILTER_DEFAULT [, mixed $options ]])", "filter_list( void)", "filter_var_array( array $data [, mixed $definition [, bool $add_empty = true ]])", "filter_var( mixed $variable [, int $filter = FILTER_DEFAULT [, mixed $options ]])", "finfo_buffer( resource $finfo , string $string = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]])", "buffer( string $string = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]])", "finfo_close( resource $finfo)", "finfo_file( resource $finfo , string $file_name = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]])", "file( string $file_name = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]])", "finfo_open([ int $options = FILEINFO_NONE [, string $magic_file = NULL ]])", "finfo_set_flags( resource $finfo , int $options)", "set_flags( int $options)", "floatval( mixed $var)", "flock( resource $handle , int $operation [, int &$wouldblock ])", "floor( float $value)", "flush( void)", "fmod( float $x , float $y)", "fnmatch( string $pattern , string $string [, int $flags = 0 ])", "fopen( string $filename , string $mode [, bool $use_include_path = false [, resource $context ]])", "forward_static_call_array( callable $function , array $parameters)", "forward_static_call( callable $function [, mixed $parameter [, mixed $... ]])", "fpassthru( resource $handle)", "fprintf( resource $handle , string $format [, mixed $args [, mixed $... ]])", "fputcsv( resource $handle , array $fields [, string $delimiter = &quot;,&quot; [, string $enclosure = &#039;&quot;&#039; ]])", "fread( resource $handle , int $length)", "frenchtojd( int $month , int $day , int $year)", "fribidi_log2vis( string $str , string $direction , int $charset)", "fscanf( resource $handle , string $format [, mixed &$... ])", "fseek( resource $handle , int $offset [, int $whence = SEEK_SET ])", "fsockopen( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get(&quot;default_socket_timeout&quot;) ]]]])", "fstat( resource $handle)", "ftell( resource $handle)", "ftok( string $pathname , string $proj)", "ftp_alloc( resource $ftp_stream , int $filesize [, string &$result ])", "ftp_cdup( resource $ftp_stream)", "ftp_chdir( resource $ftp_stream , string $directory)", "ftp_chmod( resource $ftp_stream , int $mode , string $filename)", "ftp_close( resource $ftp_stream)", "ftp_connect( string $host [, int $port = 21 [, int $timeout = 90 ]])", "ftp_delete( resource $ftp_stream , string $path)", "ftp_exec( resource $ftp_stream , string $command)", "ftp_fget( resource $ftp_stream , resource $handle , string $remote_file , int $mode [, int $resumepos = 0 ])", "ftp_fput( resource $ftp_stream , string $remote_file , resource $handle , int $mode [, int $startpos = 0 ])", "ftp_get_option( resource $ftp_stream , int $option)", "ftp_get( resource $ftp_stream , string $local_file , string $remote_file , int $mode [, int $resumepos = 0 ])", "ftp_login( resource $ftp_stream , string $username , string $password)", "ftp_mdtm( resource $ftp_stream , string $remote_file)", "ftp_mkdir( resource $ftp_stream , string $directory)", "ftp_nb_continue( resource $ftp_stream)", "ftp_nb_fget( resource $ftp_stream , resource $handle , string $remote_file , int $mode [, int $resumepos = 0 ])", "ftp_nb_fput( resource $ftp_stream , string $remote_file , resource $handle , int $mode [, int $startpos = 0 ])", "ftp_nb_get( resource $ftp_stream , string $local_file , string $remote_file , int $mode [, int $resumepos = 0 ])", "ftp_nb_put( resource $ftp_stream , string $remote_file , string $local_file , int $mode [, int $startpos = 0 ])", "ftp_nlist( resource $ftp_stream , string $directory)", "ftp_pasv( resource $ftp_stream , bool $pasv)", "ftp_put( resource $ftp_stream , string $remote_file , string $local_file , int $mode [, int $startpos = 0 ])", "ftp_pwd( resource $ftp_stream)", "ftp_raw( resource $ftp_stream , string $command)", "ftp_rawlist( resource $ftp_stream , string $directory [, bool $recursive = false ])", "ftp_rename( resource $ftp_stream , string $oldname , string $newname)", "ftp_rmdir( resource $ftp_stream , string $directory)", "ftp_set_option( resource $ftp_stream , int $option , mixed $value)", "ftp_site( resource $ftp_stream , string $command)", "ftp_size( resource $ftp_stream , string $remote_file)", "ftp_ssl_connect( string $host [, int $port = 21 [, int $timeout = 90 ]])", "ftp_systype( resource $ftp_stream)", "ftruncate( resource $handle , int $size)", "func_get_arg( int $arg_num)", "func_get_args( void)", "func_num_args( void)", "function_exists( string $function_name)", "fwrite( resource $handle , string $string [, int $length ])", "gc_collect_cycles( void)", "gc_disable( void)", "gc_enable( void)", "gc_enabled( void)", "gd_info( void)", "geoip_asnum_by_name( string $hostname)", "geoip_continent_code_by_name( string $hostname)", "geoip_country_code_by_name( string $hostname)", "geoip_country_code3_by_name( string $hostname)", "geoip_country_name_by_name( string $hostname)", "geoip_database_info([ int $database = GEOIP_COUNTRY_EDITION ])", "geoip_db_avail( int $database)", "geoip_db_filename( int $database)", "geoip_db_get_all_info( void)", "geoip_domain_by_name( string $hostname)", "geoip_id_by_name( string $hostname)", "geoip_isp_by_name( string $hostname)", "geoip_netspeedcell_by_name( string $hostname)", "geoip_org_by_name( string $hostname)", "geoip_record_by_name( string $hostname)", "geoip_region_by_name( string $hostname)", "geoip_region_name_by_code( string $country_code , string $region_code)", "geoip_setup_custom_directory( string $path)", "geoip_time_zone_by_country_and_region( string $country_code [, string $region_code ])", "get_browser([ string $user_agent [, bool $return_array = false ]])", "get_called_class( void)", "get_cfg_var( string $option)", "get_class_methods( mixed $class_name)", "get_class_vars( string $class_name)", "get_class([ object $object = NULL ])", "get_current_user( void)", "get_declared_classes( void)", "get_declared_interfaces( void)", "get_declared_traits( void)", "get_defined_constants([ bool $categorize = false ])", "get_defined_functions( void)", "get_defined_vars( void)", "get_extension_funcs( string $module_name)", "get_headers( string $url [, int $format = 0 ])", "get_html_translation_table([ int $table = HTML_SPECIALCHARS [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = &quot;UTF-8&quot; ]]])", "get_include_path( void)", "get_included_files( void)", "get_loaded_extensions([ bool $zend_extensions = false ])", "get_magic_quotes_gpc( void)", "get_magic_quotes_runtime( void)", "get_meta_tags( string $filename [, bool $use_include_path = false ])", "get_object_vars( object $object)", "get_parent_class([ mixed $object ])", "get_resource_type( resource $handle)", "getallheaders( void)", "getcwd( void)", "getdate([ int $timestamp = time() ])", "getenv( string $varname)", "gethostbyaddr( string $ip_address)", "gethostbyname( string $hostname)", "gethostbynamel( string $hostname)", "gethostname( void)", "getimagesize( string $filename [, array &$imageinfo ])", "getimagesizefromstring( string $imagedata [, array &$imageinfo ])", "getlastmod( void)", "getmxrr( string $hostname , array &$mxhosts [, array &$weight ])", "getmygid( void)", "getmyinode( void)", "getmypid( void)", "getmyuid( void)", "getopt( string $options [, array $longopts ])", "getprotobyname( string $name)", "getprotobynumber( int $number)", "getrandmax( void)", "getrusage([ int $who = 0 ])", "getservbyname( string $service , string $protocol)", "getservbyport( int $port , string $protocol)", "gettext( string $message)", "gettimeofday([ bool $return_float = false ])", "gettype( mixed $var)", "glob( string $pattern [, int $flags = 0 ])", "gmdate( string $format [, int $timestamp = time() ])", "gmmktime([ int $hour = gmdate(&quot;H&quot;) [, int $minute = gmdate(&quot;i&quot;) [, int $second = gmdate(&quot;s&quot;) [, int $month = gmdate(&quot;n&quot;) [, int $day = gmdate(&quot;j&quot;) [, int $year = gmdate(&quot;Y&quot;) [, int $is_dst = -1 ]]]]]]])", "gmp_abs( GMP $a)", "gmp_add( GMP $a , GMP $b)", "gmp_and( GMP $a , GMP $b)", "gmp_clrbit( GMP $a , int $index)", "gmp_cmp( GMP $a , GMP $b)", "gmp_com( GMP $a)", "gmp_div_q( GMP $a , GMP $b [, int $round = GMP_ROUND_ZERO ])", "gmp_div_qr( GMP $n , GMP $d [, int $round = GMP_ROUND_ZERO ])", "gmp_div_r( GMP $n , GMP $d [, int $round = GMP_ROUND_ZERO ])", "gmp_divexact( GMP $n , GMP $d)", "gmp_export( GMP $gmpnumber , integer $word_size , integer $options)", "gmp_fact( mixed $a)", "gmp_gcd( GMP $a , GMP $b)", "gmp_gcdext( GMP $a , GMP $b)", "gmp_hamdist( GMP $a , GMP $b)", "gmp_import( string $data , integer $word_size , integer $options)", "gmp_init( mixed $number [, int $base = 0 ])", "gmp_intval( GMP $gmpnumber)", "gmp_invert( GMP $a , GMP $b)", "gmp_jacobi( GMP $a , GMP $p)", "gmp_legendre( GMP $a , GMP $p)", "gmp_mod( GMP $n , GMP $d)", "gmp_mul( GMP $a , GMP $b)", "gmp_neg( GMP $a)", "gmp_nextprime( int $a)", "gmp_or( GMP $a , GMP $b)", "gmp_perfect_square( GMP $a)", "gmp_popcount( GMP $a)", "gmp_pow( GMP $base , int $exp)", "gmp_powm( GMP $base , GMP $exp , GMP $mod)", "gmp_prob_prime( GMP $a [, int $reps = 10 ])", "gmp_random_bits( integer $bits)", "gmp_random_range( GMP $min , GMP $max)", "gmp_random([ int $limiter = 20 ])", "gmp_root( GMP $a , int $nth)", "gmp_rootrem( GMP $a , int $nth)", "gmp_scan0( GMP $a , int $start)", "gmp_scan1( GMP $a , int $start)", "gmp_setbit( GMP &$a , int $index [, bool $bit_on = true ])", "gmp_sign( GMP $a)", "gmp_sqrt( GMP $a)", "gmp_sqrtrem( GMP $a)", "gmp_strval( GMP $gmpnumber [, int $base = 10 ])", "gmp_sub( GMP $a , GMP $b)", "gmp_testbit( GMP $a , int $index)", "gmp_xor( GMP $a , GMP $b)", "gmstrftime( string $format [, int $timestamp = time() ])", "gnupg_adddecryptkey( resource $identifier , string $fingerprint , string $passphrase)", "gnupg_addencryptkey( resource $identifier , string $fingerprint)", "gnupg_addsignkey( resource $identifier , string $fingerprint [, string $passphrase ])", "gnupg_cleardecryptkeys( resource $identifier)", "gnupg_clearencryptkeys( resource $identifier)", "gnupg_clearsignkeys( resource $identifier)", "gnupg_decrypt( resource $identifier , string $text)", "gnupg_decryptverify( resource $identifier , string $text , string &$plaintext)", "gnupg_encrypt( resource $identifier , string $plaintext)", "gnupg_encryptsign( resource $identifier , string $plaintext)", "gnupg_export( resource $identifier , string $fingerprint)", "gnupg_geterror( resource $identifier)", "gnupg_getprotocol( resource $identifier)", "gnupg_import( resource $identifier , string $keydata)", "gnupg_init( void)", "gnupg_keyinfo( resource $identifier , string $pattern)", "gnupg_setarmor( resource $identifier , int $armor)", "gnupg_seterrormode( resource $identifier , int $errormode)", "gnupg_setsignmode( resource $identifier , int $signmode)", "gnupg_sign( resource $identifier , string $plaintext)", "gnupg_verify( resource $identifier , string $signed_text , string $signature [, string &$plaintext ])", "gopher_parsedir( string $dirent)", "grapheme_extract( string $haystack , int $size [, int $extract_type [, int $start = 0 [, int &$next ]]])", "grapheme_stripos( string $haystack , string $needle [, int $offset = 0 ])", "grapheme_stristr( string $haystack , string $needle [, bool $before_needle = false ])", "grapheme_strlen( string $input)", "grapheme_strpos( string $haystack , string $needle [, int $offset = 0 ])", "grapheme_strripos( string $haystack , string $needle [, int $offset = 0 ])", "grapheme_strrpos( string $haystack , string $needle [, int $offset = 0 ])", "grapheme_strstr( string $haystack , string $needle [, bool $before_needle = false ])", "grapheme_substr( string $string , int $start [, int $length ])", "gregoriantojd( int $month , int $day , int $year)", "gupnp_context_get_host_ip( resource $context)", "gupnp_context_get_port( resource $context)", "gupnp_context_get_subscription_timeout( resource $context)", "gupnp_context_host_path( resource $context , string $local_path , string $server_path)", "gupnp_context_new([ string $host_ip [, int $port = 0 ]])", "gupnp_context_set_subscription_timeout( resource $context , int $timeout)", "gupnp_context_timeout_add( resource $context , int $timeout , mixed $callback [, mixed $arg ])", "gupnp_context_unhost_path( resource $context , string $server_path)", "gupnp_control_point_browse_start( resource $cpoint)", "gupnp_control_point_browse_stop( resource $cpoint)", "gupnp_control_point_callback_set( resource $cpoint , int $signal , mixed $callback [, mixed $arg ])", "gupnp_control_point_new( resource $context , string $target)", "gupnp_device_action_callback_set( resource $root_device , int $signal , string $action_name , mixed $callback [, mixed $arg ])", "gupnp_device_info_get_service( resource $root_device , string $type)", "gupnp_device_info_get( resource $root_device)", "gupnp_root_device_get_available( resource $root_device)", "gupnp_root_device_get_relative_location( resource $root_device)", "gupnp_root_device_new( resource $context , string $location , string $description_dir)", "gupnp_root_device_set_available( resource $root_device , bool $available)", "gupnp_root_device_start( resource $root_device)", "gupnp_root_device_stop( resource $root_device)", "gupnp_service_action_get( resource $action , string $name , int $type)", "gupnp_service_action_return_error( resource $action , int $error_code [, string $error_description ])", "gupnp_service_action_return( resource $action)", "gupnp_service_action_set( resource $action , string $name , int $type , mixed $value)", "gupnp_service_freeze_notify( resource $service)", "gupnp_service_info_get_introspection( resource $proxy [, mixed $callback [, mixed $arg ]])", "gupnp_service_info_get( resource $proxy)", "gupnp_service_introspection_get_state_variable( resource $introspection , string $variable_name)", "gupnp_service_notify( resource $service , string $name , int $type , mixed $value)", "gupnp_service_proxy_action_get( resource $proxy , string $action , string $name , int $type)", "gupnp_service_proxy_action_set( resource $proxy , string $action , string $name , mixed $value , int $type)", "gupnp_service_proxy_add_notify( resource $proxy , string $value , int $type , mixed $callback [, mixed $arg ])", "gupnp_service_proxy_callback_set( resource $proxy , int $signal , mixed $callback [, mixed $arg ])", "gupnp_service_proxy_get_subscribed( resource $proxy)", "gupnp_service_proxy_remove_notify( resource $proxy , string $value)", "gupnp_service_proxy_set_subscribed( resource $proxy , bool $subscribed)", "gupnp_service_thaw_notify( resource $service)", "gzclose( resource $zp)", "gzcompress( string $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_DEFLATE ]])", "gzdecode( string $data [, int $length ])", "gzdeflate( string $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_RAW ]])", "gzencode( string $data [, int $level = -1 [, int $encoding_mode = FORCE_GZIP ]])", "gzeof( resource $zp)", "gzfile( string $filename [, int $use_include_path = 0 ])", "gzgetc( resource $zp)", "gzgets( resource $zp [, int $length ])", "gzgetss( resource $zp , int $length [, string $allowable_tags ])", "gzinflate( string $data [, int $length = 0 ])", "gzopen( string $filename , string $mode [, int $use_include_path = 0 ])", "gzpassthru( resource $zp)", "gzread( resource $zp , int $length)", "gzrewind( resource $zp)", "gzseek( resource $zp , int $offset [, int $whence = SEEK_SET ])", "gztell( resource $zp)", "gzuncompress( string $data [, int $length = 0 ])", "gzwrite( resource $zp , string $string [, int $length ])", "__halt_compiler( void)", "hash_algos( void)", "hash_copy( resource $context)", "hash_equals( string $known_string , string $user_string)", "hash_file( string $algo , string $filename [, bool $raw_output = false ])", "hash_final( resource $context [, bool $raw_output = false ])", "hash_hmac_file( string $algo , string $filename , string $key [, bool $raw_output = false ])", "hash_hmac( string $algo , string $data , string $key [, bool $raw_output = false ])", "hash_init( string $algo [, int $options = 0 [, string $key = NULL ]])", "hash_pbkdf2( string $algo , string $password , string $salt , int $iterations [, int $length = 0 [, bool $raw_output = false ]])", "hash_update_file( resource $hcontext , string $filename [, resource $scontext = NULL ])", "hash_update_stream( resource $context , resource $handle [, int $length = -1 ])", "hash_update( resource $context , string $data)", "hash( string $algo , string $data [, bool $raw_output = false ])", "header_register_callback( callable $callback)", "header_remove([ string $name ])", "header( string $string [, bool $replace = true [, int $http_response_code ]])", "headers_list( void)", "headers_sent([ string &$file [, int &$line ]])", "hebrev( string $hebrew_text [, int $max_chars_per_line = 0 ])", "hebrevc( string $hebrew_text [, int $max_chars_per_line = 0 ])", "hex2bin( string $data)", "hexdec( string $hex_string)", "highlight_file( string $filename [, bool $return = false ])", "highlight_string( string $str [, bool $return = false ])", "html_entity_decode( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get(&quot;default_charset&quot;) ]])", "htmlentities( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get(&quot;default_charset&quot;) [, bool $double_encode = true ]]])", "htmlspecialchars_decode( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 ])", "htmlspecialchars( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get(&quot;default_charset&quot;) [, bool $double_encode = true ]]])", "http_build_cookie( array $cookie)", "http_build_query( mixed $query_data [, string $numeric_prefix [, string $arg_separator [, int $enc_type = PHP_QUERY_RFC1738 ]]])", "http_build_str( array $query [, string $prefix [, string $arg_separator = ini_get(&quot;arg_separator.output&quot;) ]])", "http_build_url([ mixed $url [, mixed $parts [, int $flags = HTTP_URL_REPLACE [, array &$new_url ]]]])", "http_cache_etag([ string $etag ])", "http_cache_last_modified([ int $timestamp_or_expires ])", "http_chunked_decode( string $encoded)", "http_date([ int $timestamp ])", "http_deflate( string $data [, int $flags = 0 ])", "http_get_request_body_stream( void)", "http_get_request_body( void)", "http_get_request_headers( void)", "http_get( string $url [, array $options [, array &$info ]])", "http_head( string $url [, array $options [, array &$info ]])", "http_inflate( string $data)", "http_match_etag( string $etag [, bool $for_range = false ])", "http_match_modified([ int $timestamp = -1 [, bool $for_range = false ]])", "http_match_request_header( string $header , string $value [, bool $match_case = false ])", "http_negotiate_charset( array $supported [, array &$result ])", "http_negotiate_content_type( array $supported [, array &$result ])", "http_negotiate_language( array $supported [, array &$result ])", "http_parse_cookie( string $cookie [, int $flags [, array $allowed_extras ]])", "http_parse_headers( string $header)", "http_parse_message( string $message)", "http_parse_params( string $param [, int $flags = HTTP_PARAMS_DEFAULT ])", "http_persistent_handles_clean([ string $ident ])", "http_persistent_handles_count( void)", "http_persistent_handles_ident([ string $ident ])", "http_post_data( string $url , string $data [, array $options [, array &$info ]])", "http_post_fields( string $url , array $data [, array $files [, array $options [, array &$info ]]])", "http_put_data( string $url , string $data [, array $options [, array &$info ]])", "http_put_file( string $url , string $file [, array $options [, array &$info ]])", "http_put_stream( string $url , resource $stream [, array $options [, array &$info ]])", "http_redirect([ string $url [, array $params [, bool $session = false [, int $status = 0 ]]]])", "http_request_body_encode( array $fields , array $files)", "http_request_method_exists( mixed $method)", "http_request_method_name( int $method)", "http_request_method_register( string $method)", "http_request_method_unregister( mixed $method)", "http_request( int $method , string $url [, string $body [, array $options [, array &$info ]]])", "http_response_code([ int $response_code ])", "http_send_content_disposition( string $filename [, bool $inline = false ])", "http_send_content_type([ string $content_type = &quot;application/x-octetstream&quot; ])", "http_send_data( string $data)", "http_send_file( string $file)", "http_send_last_modified([ int $timestamp = time() ])", "http_send_status( int $status)", "http_send_stream( resource $stream)", "http_support([ int $feature = 0 ])", "http_throttle( float $sec [, int $bytes = 40960 ])", "hwapi_attribute_new([ string $name [, string $value ]])", "hwapi_content_new( string $content , string $mimetype)", "hwapi_hgcsp( string $hostname [, int $port ])", "hwapi_object_new( array $parameter)", "hypot( float $x , float $y)", "ibase_add_user( resource $service_handle , string $user_name , string $password [, string $first_name [, string $middle_name [, string $last_name ]]])", "ibase_affected_rows([ resource $link_identifier ])", "ibase_backup( resource $service_handle , string $source_db , string $dest_file [, int $options = 0 [, bool $verbose = false ]])", "ibase_blob_add( resource $blob_handle , string $data)", "ibase_blob_cancel( resource $blob_handle)", "ibase_blob_close( resource $blob_handle)", "ibase_blob_create([ resource $link_identifier = NULL ])", "ibase_blob_echo( string $blob_id)", "ibase_blob_echo( resource $link_identifier , string $blob_id)", "ibase_blob_get( resource $blob_handle , int $len)", "ibase_blob_import( resource $link_identifier , resource $file_handle)", "ibase_blob_import( resource $file_handle)", "ibase_blob_info( resource $link_identifier , string $blob_id)", "ibase_blob_info( string $blob_id)", "ibase_blob_open( resource $link_identifier , string $blob_id)", "ibase_blob_open( string $blob_id)", "ibase_close([ resource $connection_id = NULL ])", "ibase_commit_ret([ resource $link_or_trans_identifier = NULL ])", "ibase_commit([ resource $link_or_trans_identifier = NULL ])", "ibase_connect([ string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync ]]]]]]]])", "ibase_db_info( resource $service_handle , string $db , int $action [, int $argument = 0 ])", "ibase_delete_user( resource $service_handle , string $user_name)", "ibase_drop_db([ resource $connection = NULL ])", "ibase_errcode( void)", "ibase_errmsg( void)", "ibase_execute( resource $query [, mixed $bind_arg [, mixed $... ]])", "ibase_fetch_assoc( resource $result [, int $fetch_flag = 0 ])", "ibase_fetch_object( resource $result_id [, int $fetch_flag = 0 ])", "ibase_fetch_row( resource $result_identifier [, int $fetch_flag = 0 ])", "ibase_field_info( resource $result , int $field_number)", "ibase_free_event_handler( resource $event)", "ibase_free_query( resource $query)", "ibase_free_result( resource $result_identifier)", "ibase_gen_id( string $generator [, int $increment = 1 [, resource $link_identifier = NULL ]])", "ibase_maintain_db( resource $service_handle , string $db , int $action [, int $argument = 0 ])", "ibase_modify_user( resource $service_handle , string $user_name , string $password [, string $first_name [, string $middle_name [, string $last_name ]]])", "ibase_name_result( resource $result , string $name)", "ibase_num_fields( resource $result_id)", "ibase_num_params( resource $query)", "ibase_param_info( resource $query , int $param_number)", "ibase_pconnect([ string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync ]]]]]]]])", "ibase_prepare( string $query)", "ibase_prepare( resource $link_identifier , string $query)", "ibase_prepare( resource $link_identifier , string $trans , string $query)", "ibase_query([ resource $link_identifier ], string $query [, int $bind_args ])", "ibase_restore( resource $service_handle , string $source_file , string $dest_db [, int $options = 0 [, bool $verbose = false ]])", "ibase_rollback_ret([ resource $link_or_trans_identifier = NULL ])", "ibase_rollback([ resource $link_or_trans_identifier = NULL ])", "ibase_server_info( resource $service_handle , int $action)", "ibase_service_attach( string $host , string $dba_username , string $dba_password)", "ibase_service_detach( resource $service_handle)", "ibase_set_event_handler( callable $event_handler , string $event_name1 [, string $event_name2 [, string $... ]])", "ibase_set_event_handler( resource $connection , callable $event_handler , string $event_name1 [, string $event_name2 [, string $... ]])", "ibase_trans([ int $trans_args [, resource $link_identifier ]])", "ibase_trans([ resource $link_identifier [, int $trans_args ]])", "ibase_wait_event( string $event_name1 [, string $event_name2 [, string $... ]])", "ibase_wait_event( resource $connection , string $event_name1 [, string $event_name2 [, string $... ]])", "iconv_get_encoding([ string $type = &quot;all&quot; ])", "iconv_mime_decode_headers( string $encoded_headers [, int $mode = 0 [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;) ]])", "iconv_mime_decode( string $encoded_header [, int $mode = 0 [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;) ]])", "iconv_mime_encode( string $field_name , string $field_value [, array $preferences = NULL ])", "iconv_set_encoding( string $type , string $charset)", "iconv_strlen( string $str [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;) ])", "iconv_strpos( string $haystack , string $needle [, int $offset = 0 [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;) ]])", "iconv_strrpos( string $haystack , string $needle [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;) ])", "iconv_substr( string $str , int $offset [, int $length = iconv_strlen($str, $charset) [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;) ]])", "iconv( string $in_charset , string $out_charset , string $str)", "id3_get_frame_long_name( string $frameId)", "id3_get_frame_short_name( string $frameId)", "id3_get_genre_id( string $genre)", "id3_get_genre_list( void)", "id3_get_genre_name( int $genre_id)", "id3_get_tag( string $filename [, int $version = ID3_BEST ])", "id3_get_version( string $filename)", "id3_remove_tag( string $filename [, int $version = ID3_V1_0 ])", "id3_set_tag( string $filename , array $tag [, int $version = ID3_V1_0 ])", "idate( string $format [, int $timestamp = time() ])", "idn_to_ascii( string $domain [, int $options = 0 [, int $variant = INTL_IDNA_VARIANT_2003 [, array &$idna_info ]]])", "idn_to_utf8( string $domain [, int $options = 0 [, int $variant = INTL_IDNA_VARIANT_2003 [, array &$idna_info ]]])", "ifx_affected_rows( resource $result_id)", "ifx_blobinfile_mode( int $mode)", "ifx_byteasvarchar( int $mode)", "ifx_close([ resource $link_identifier ])", "ifx_connect([ string $database [, string $userid [, string $password ]]])", "ifx_copy_blob( int $bid)", "ifx_create_blob( int $type , int $mode , string $param)", "ifx_create_char( string $param)", "ifx_do( resource $result_id)", "ifx_error([ resource $link_identifier ])", "ifx_errormsg([ int $errorcode ])", "ifx_fetch_row( resource $result_id [, mixed $position ])", "ifx_fieldproperties( resource $result_id)", "ifx_fieldtypes( resource $result_id)", "ifx_free_blob( int $bid)", "ifx_free_char( int $bid)", "ifx_free_result( resource $result_id)", "ifx_get_blob( int $bid)", "ifx_get_char( int $bid)", "ifx_getsqlca( resource $result_id)", "ifx_htmltbl_result( resource $result_id [, string $html_table_options ])", "ifx_nullformat( int $mode)", "ifx_num_fields( resource $result_id)", "ifx_num_rows( resource $result_id)", "ifx_pconnect([ string $database [, string $userid [, string $password ]]])", "ifx_prepare( string $query , resource $link_identifier [, int $cursor_def ], mixed $blobidarray)", "ifx_query( string $query , resource $link_identifier [, int $cursor_type [, mixed $blobidarray ]])", "ifx_textasvarchar( int $mode)", "ifx_update_blob( int $bid , string $content)", "ifx_update_char( int $bid , string $content)", "ifxus_close_slob( int $bid)", "ifxus_create_slob( int $mode)", "ifxus_free_slob( int $bid)", "ifxus_open_slob( int $bid , int $mode)", "ifxus_read_slob( int $bid , int $nbytes)", "ifxus_seek_slob( int $bid , int $mode , int $offset)", "ifxus_tell_slob( int $bid)", "ifxus_write_slob( int $bid , string $content)", "ignore_user_abort([ string $value ])", "iis_add_server( string $path , string $comment , string $server_ip , int $port , string $host_name , int $rights , int $start_server)", "iis_get_dir_security( int $server_instance , string $virtual_path)", "iis_get_script_map( int $server_instance , string $virtual_path , string $script_extension)", "iis_get_server_by_comment( string $comment)", "iis_get_server_by_path( string $path)", "iis_get_server_rights( int $server_instance , string $virtual_path)", "iis_get_service_state( string $service_id)", "iis_remove_server( int $server_instance)", "iis_set_app_settings( int $server_instance , string $virtual_path , string $application_scope)", "iis_set_dir_security( int $server_instance , string $virtual_path , int $directory_flags)", "iis_set_script_map( int $server_instance , string $virtual_path , string $script_extension , string $engine_path , int $allow_scripting)", "iis_set_server_rights( int $server_instance , string $virtual_path , int $directory_flags)", "iis_start_server( int $server_instance)", "iis_start_service( string $service_id)", "iis_stop_server( int $server_instance)", "iis_stop_service( string $service_id)", "image_type_to_extension( int $imagetype [, bool $include_dot = TRUE ])", "image_type_to_mime_type( int $imagetype)", "image2wbmp( resource $image [, string $filename [, int $threshold ]])", "imageaffine( resource $image , array $affine [, array $clip ])", "imageaffinematrixconcat( array $m1 , array $m2)", "imageaffinematrixget( int $type [, mixed $options ])", "imagealphablending( resource $image , bool $blendmode)", "imageantialias( resource $image , bool $enabled)", "imagearc( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color)", "imagechar( resource $image , int $font , int $x , int $y , string $c , int $color)", "imagecharup( resource $image , int $font , int $x , int $y , string $c , int $color)", "imagecolorallocate( resource $image , int $red , int $green , int $blue)", "imagecolorallocatealpha( resource $image , int $red , int $green , int $blue , int $alpha)", "imagecolorat( resource $image , int $x , int $y)", "imagecolorclosest( resource $image , int $red , int $green , int $blue)", "imagecolorclosestalpha( resource $image , int $red , int $green , int $blue , int $alpha)", "imagecolorclosesthwb( resource $image , int $red , int $green , int $blue)", "imagecolordeallocate( resource $image , int $color)", "imagecolorexact( resource $image , int $red , int $green , int $blue)", "imagecolorexactalpha( resource $image , int $red , int $green , int $blue , int $alpha)", "imagecolormatch( resource $image1 , resource $image2)", "imagecolorresolve( resource $image , int $red , int $green , int $blue)", "imagecolorresolvealpha( resource $image , int $red , int $green , int $blue , int $alpha)", "imagecolorset( resource $image , int $index , int $red , int $green , int $blue [, int $alpha = 0 ])", "imagecolorsforindex( resource $image , int $index)", "imagecolorstotal( resource $image)", "imagecolortransparent( resource $image [, int $color ])", "imageconvolution( resource $image , array $matrix , float $div , float $offset)", "imagecopy( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h)", "imagecopymerge( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct)", "imagecopymergegray( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct)", "imagecopyresampled( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h)", "imagecopyresized( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h)", "imagecreate( int $width , int $height)", "imagecreatefromgd( string $filename)", "imagecreatefromgd2( string $filename)", "imagecreatefromgd2part( string $filename , int $srcX , int $srcY , int $width , int $height)", "imagecreatefromgif( string $filename)", "imagecreatefromjpeg( string $filename)", "imagecreatefrompng( string $filename)", "imagecreatefromstring( string $image)", "imagecreatefromwbmp( string $filename)", "imagecreatefromwebp( string $filename)", "imagecreatefromxbm( string $filename)", "imagecreatefromxpm( string $filename)", "imagecreatetruecolor( int $width , int $height)", "imagecrop( resource $image , array $rect)", "imagecropauto( resource $image [, int $mode = -1 [, float $threshold = .5 [, int $color = -1 ]]])", "imagedashedline( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color)", "imagedestroy( resource $image)", "imageellipse( resource $image , int $cx , int $cy , int $width , int $height , int $color)", "imagefill( resource $image , int $x , int $y , int $color)", "imagefilledarc( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color , int $style)", "imagefilledellipse( resource $image , int $cx , int $cy , int $width , int $height , int $color)", "imagefilledpolygon( resource $image , array $points , int $num_points , int $color)", "imagefilledrectangle( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color)", "imagefilltoborder( resource $image , int $x , int $y , int $border , int $color)", "imagefilter( resource $image , int $filtertype [, int $arg1 [, int $arg2 [, int $arg3 [, int $arg4 ]]]])", "imageflip( resource $image , int $mode)", "imagefontheight( int $font)", "imagefontwidth( int $font)", "imageftbbox( float $size , float $angle , string $fontfile , string $text [, array $extrainfo ])", "imagefttext( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text [, array $extrainfo ])", "imagegammacorrect( resource $image , float $inputgamma , float $outputgamma)", "imagegd( resource $image [, string $filename ])", "imagegd2( resource $image [, string $filename [, int $chunk_size [, int $type = IMG_GD2_RAW ]]])", "imagegif( resource $image [, string $filename ])", "imagegrabscreen( void)", "imagegrabwindow( int $window_handle [, int $client_area = 0 ])", "imageinterlace( resource $image [, int $interlace = 0 ])", "imageistruecolor( resource $image)", "imagejpeg( resource $image [, string $filename [, int $quality ]])", "imagelayereffect( resource $image , int $effect)", "imageline( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color)", "imageloadfont( string $file)", "imagepalettecopy( resource $destination , resource $source)", "imagepalettetotruecolor( resource $src)", "imagepng( resource $image [, string $filename [, int $quality [, int $filters ]]])", "imagepolygon( resource $image , array $points , int $num_points , int $color)", "imagepsbbox( string $text , resource $font , int $size)", "imagepsbbox( string $text , resource $font , int $size , int $space , int $tightness , float $angle)", "imagepsencodefont( resource $font_index , string $encodingfile)", "imagepsextendfont( resource $font_index , float $extend)", "imagepsfreefont( resource $font_index)", "imagepsloadfont( string $filename)", "imagepsslantfont( resource $font_index , float $slant)", "imagepstext( resource $image , string $text , resource $font_index , int $size , int $foreground , int $background , int $x , int $y [, int $space = 0 [, int $tightness = 0 [, float $angle = 0.0 [, int $antialias_steps = 4 ]]]])", "imagerectangle( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color)", "imagerotate( resource $image , float $angle , int $bgd_color [, int $ignore_transparent = 0 ])", "imagesavealpha( resource $image , bool $saveflag)", "imagescale( resource $image , int $new_width [, int $new_height = -1 [, int $mode = IMG_BILINEAR_FIXED ]])", "imagesetbrush( resource $image , resource $brush)", "imagesetinterpolation( resource $image [, int $method = IMG_BILINEAR_FIXED ])", "imagesetpixel( resource $image , int $x , int $y , int $color)", "imagesetstyle( resource $image , array $style)", "imagesetthickness( resource $image , int $thickness)", "imagesettile( resource $image , resource $tile)", "imagestring( resource $image , int $font , int $x , int $y , string $string , int $color)", "imagestringup( resource $image , int $font , int $x , int $y , string $string , int $color)", "imagesx( resource $image)", "imagesy( resource $image)", "imagetruecolortopalette( resource $image , bool $dither , int $ncolors)", "imagettfbbox( float $size , float $angle , string $fontfile , string $text)", "imagettftext( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text)", "imagetypes( void)", "imagewbmp( resource $image [, string $filename [, int $foreground ]])", "imagewebp( resource $image , string $filename)", "imagexbm( resource $image , string $filename [, int $foreground ])", "imap_8bit( string $string)", "imap_alerts( void)", "imap_append( resource $imap_stream , string $mailbox , string $message [, string $options = NULL [, string $internal_date = NULL ]])", "imap_base64( string $text)", "imap_binary( string $string)", "imap_body( resource $imap_stream , int $msg_number [, int $options = 0 ])", "imap_bodystruct( resource $imap_stream , int $msg_number , string $section)", "imap_check( resource $imap_stream)", "imap_clearflag_full( resource $imap_stream , string $sequence , string $flag [, int $options = 0 ])", "imap_close( resource $imap_stream [, int $flag = 0 ])", "imap_createmailbox( resource $imap_stream , string $mailbox)", "imap_delete( resource $imap_stream , int $msg_number [, int $options = 0 ])", "imap_deletemailbox( resource $imap_stream , string $mailbox)", "imap_errors( void)", "imap_expunge( resource $imap_stream)", "imap_fetch_overview( resource $imap_stream , string $sequence [, int $options = 0 ])", "imap_fetchbody( resource $imap_stream , int $msg_number , string $section [, int $options = 0 ])", "imap_fetchheader( resource $imap_stream , int $msg_number [, int $options = 0 ])", "imap_fetchmime( resource $imap_stream , int $msg_number , string $section [, int $options = 0 ])", "imap_fetchstructure( resource $imap_stream , int $msg_number [, int $options = 0 ])", "imap_gc( resource $imap_stream , int $caches)", "imap_get_quota( resource $imap_stream , string $quota_root)", "imap_get_quotaroot( resource $imap_stream , string $quota_root)", "imap_getacl( resource $imap_stream , string $mailbox)", "imap_getmailboxes( resource $imap_stream , string $ref , string $pattern)", "imap_getsubscribed( resource $imap_stream , string $ref , string $pattern)", "imap_headerinfo( resource $imap_stream , int $msg_number [, int $fromlength = 0 [, int $subjectlength = 0 [, string $defaulthost = NULL ]]])", "imap_headers( resource $imap_stream)", "imap_last_error( void)", "imap_list( resource $imap_stream , string $ref , string $pattern)", "imap_listscan( resource $imap_stream , string $ref , string $pattern , string $content)", "imap_lsub( resource $imap_stream , string $ref , string $pattern)", "imap_mail_compose( array $envelope , array $body)", "imap_mail_copy( resource $imap_stream , string $msglist , string $mailbox [, int $options = 0 ])", "imap_mail_move( resource $imap_stream , string $msglist , string $mailbox [, int $options = 0 ])", "imap_mail( string $to , string $subject , string $message [, string $additional_headers = NULL [, string $cc = NULL [, string $bcc = NULL [, string $rpath = NULL ]]]])", "imap_mailboxmsginfo( resource $imap_stream)", "imap_mime_header_decode( string $text)", "imap_msgno( resource $imap_stream , int $uid)", "imap_num_msg( resource $imap_stream)", "imap_num_recent( resource $imap_stream)", "imap_open( string $mailbox , string $username , string $password [, int $options = 0 [, int $n_retries = 0 [, array $params = NULL ]]])", "imap_ping( resource $imap_stream)", "imap_qprint( string $string)", "imap_renamemailbox( resource $imap_stream , string $old_mbox , string $new_mbox)", "imap_reopen( resource $imap_stream , string $mailbox [, int $options = 0 [, int $n_retries = 0 ]])", "imap_rfc822_parse_adrlist( string $address , string $default_host)", "imap_rfc822_parse_headers( string $headers [, string $defaulthost = &quot;UNKNOWN&quot; ])", "imap_rfc822_write_address( string $mailbox , string $host , string $personal)", "imap_savebody( resource $imap_stream , mixed $file , int $msg_number [, string $part_number = &quot;&quot; [, int $options = 0 ]])", "imap_search( resource $imap_stream , string $criteria [, int $options = SE_FREE [, string $charset = NIL ]])", "imap_set_quota( resource $imap_stream , string $quota_root , int $quota_limit)", "imap_setacl( resource $imap_stream , string $mailbox , string $id , string $rights)", "imap_setflag_full( resource $imap_stream , string $sequence , string $flag [, int $options = NIL ])", "imap_sort( resource $imap_stream , int $criteria , int $reverse [, int $options = 0 [, string $search_criteria = NULL [, string $charset = NIL ]]])", "imap_status( resource $imap_stream , string $mailbox , int $options)", "imap_subscribe( resource $imap_stream , string $mailbox)", "imap_thread( resource $imap_stream [, int $options = SE_FREE ])", "imap_timeout( int $timeout_type [, int $timeout = -1 ])", "imap_uid( resource $imap_stream , int $msg_number)", "imap_undelete( resource $imap_stream , int $msg_number [, int $flags = 0 ])", "imap_unsubscribe( resource $imap_stream , string $mailbox)", "imap_utf7_decode( string $text)", "imap_utf7_encode( string $data)", "imap_utf8( string $mime_encoded_text)", "implode( string $glue , array $pieces)", "implode( array $pieces)", "import_request_variables( string $types [, string $prefix ])", "in_array( mixed $needle , array $haystack [, bool $strict = FALSE ])", "inclued_get_data( void)", "inet_ntop( string $in_addr)", "inet_pton( string $address)", "ingres_autocommit_state( resource $link)", "ingres_autocommit( resource $link)", "ingres_charset( resource $link)", "ingres_close( resource $link)", "ingres_commit( resource $link)", "ingres_connect([ string $database [, string $username [, string $password [, array $options ]]]])", "ingres_cursor( resource $result)", "ingres_errno([ resource $link ])", "ingres_error([ resource $link ])", "ingres_errsqlstate([ resource $link ])", "ingres_escape_string( resource $link , string $source_string)", "ingres_execute( resource $result [, array $params [, string $types ]])", "ingres_fetch_array( resource $result [, int $result_type ])", "ingres_fetch_assoc( resource $result)", "ingres_fetch_object( resource $result [, int $result_type ])", "ingres_fetch_proc_return( resource $result)", "ingres_fetch_row( resource $result)", "ingres_field_length( resource $result , int $index)", "ingres_field_name( resource $result , int $index)", "ingres_field_nullable( resource $result , int $index)", "ingres_field_precision( resource $result , int $index)", "ingres_field_scale( resource $result , int $index)", "ingres_field_type( resource $result , int $index)", "ingres_free_result( resource $result)", "ingres_next_error([ resource $link ])", "ingres_num_fields( resource $result)", "ingres_num_rows( resource $result)", "ingres_pconnect([ string $database [, string $username [, string $password [, array $options ]]]])", "ingres_prepare( resource $link , string $query)", "ingres_query( resource $link , string $query [, array $params [, string $types ]])", "ingres_result_seek( resource $result , int $position)", "ingres_rollback( resource $link)", "ingres_set_environment( resource $link , array $options)", "ingres_unbuffered_query( resource $link , string $query [, array $params [, string $types ]])", "ini_get_all([ string $extension [, bool $details = true ]])", "ini_get( string $varname)", "ini_restore( string $varname)", "ini_set( string $varname , string $newvalue)", "inotify_add_watch( resource $inotify_instance , string $pathname , int $mask)", "inotify_init( void)", "inotify_queue_len( resource $inotify_instance)", "inotify_read( resource $inotify_instance)", "inotify_rm_watch( resource $inotify_instance , int $watch_descriptor)", "interface_exists( string $interface_name [, bool $autoload = true ])", "intl_error_name( int $error_code)", "intl_get_error_code( void)", "intl_get_error_message( void)", "intl_is_failure( int $error_code)", "intval( mixed $var [, int $base = 10 ])", "ip2long( string $ip_address)", "iptcembed( string $iptcdata , string $jpeg_file_name [, int $spool ])", "iptcparse( string $iptcblock)", "is_a( object $object , string $class_name [, bool $allow_string = FALSE ])", "is_array( mixed $var)", "is_bool( mixed $var)", "is_callable( callable $name [, bool $syntax_only = false [, string &$callable_name ]])", "is_dir( string $filename)", "is_executable( string $filename)", "is_file( string $filename)", "is_finite( float $val)", "is_float( mixed $var)", "is_infinite( float $val)", "is_int( mixed $var)", "is_link( string $filename)", "is_nan( float $val)", "is_null( mixed $var)", "is_numeric( mixed $var)", "is_object( mixed $var)", "is_readable( string $filename)", "is_resource( mixed $var)", "is_scalar( mixed $var)", "is_soap_fault( mixed $object)", "is_string( mixed $var)", "is_subclass_of( mixed $object , string $class_name [, bool $allow_string = TRUE ])", "is_tainted( string $string)", "is_uploaded_file( string $filename)", "is_writable( string $filename)", "isset( mixed $var [, mixed $... ])", "iterator_apply( Traversable $iterator , callable $function [, array $args ])", "iterator_count( Traversable $iterator)", "iterator_to_array( Traversable $iterator [, bool $use_keys = true ])", "jddayofweek( int $julianday [, int $mode = CAL_DOW_DAYNO ])", "jdmonthname( int $julianday , int $mode)", "jdtofrench( int $juliandaycount)", "jdtogregorian( int $julianday)", "jdtojewish( int $juliandaycount [, bool $hebrew = false [, int $fl = 0 ]])", "jdtojulian( int $julianday)", "jdtounix( int $jday)", "jewishtojd( int $month , int $day , int $year)", "jpeg2wbmp( string $jpegname , string $wbmpname , int $dest_height , int $dest_width , int $threshold)", "json_decode( string $json [, bool $assoc = false [, int $depth = 512 [, int $options = 0 ]]])", "json_encode( mixed $value [, int $options = 0 [, int $depth = 512 ]])", "json_last_error_msg( void)", "json_last_error( void)", "judy_type( Judy $array)", "judy_version( void)", "juliantojd( int $month , int $day , int $year)", "kadm5_chpass_principal( resource $handle , string $principal , string $password)", "kadm5_create_principal( resource $handle , string $principal [, string $password [, array $options ]])", "kadm5_delete_principal( resource $handle , string $principal)", "kadm5_destroy( resource $handle)", "kadm5_flush( resource $handle)", "kadm5_get_policies( resource $handle)", "kadm5_get_principal( resource $handle , string $principal)", "kadm5_get_principals( resource $handle)", "kadm5_init_with_password( string $admin_server , string $realm , string $principal , string $password)", "kadm5_modify_principal( resource $handle , string $principal , array $options)", "key( array &$array)", "krsort( array &$array [, int $sort_flags = SORT_REGULAR ])", "ksort( array &$array [, int $sort_flags = SORT_REGULAR ])", "lcfirst( string $str)", "lcg_value( void)", "lchgrp( string $filename , mixed $group)", "lchown( string $filename , mixed $user)", "ldap_8859_to_t61( string $value)", "ldap_add( resource $link_identifier , string $dn , array $entry)", "ldap_bind( resource $link_identifier [, string $bind_rdn = NULL [, string $bind_password = NULL ]])", "ldap_compare( resource $link_identifier , string $dn , string $attribute , string $value)", "ldap_connect([ string $hostname = NULL [, int $port = 389 ]])", "ldap_control_paged_result_response( resource $link , resource $result [, string &$cookie [, int &$estimated ]])", "ldap_control_paged_result( resource $link , int $pagesize [, bool $iscritical = false [, string $cookie = &quot;&quot; ]])", "ldap_count_entries( resource $link_identifier , resource $result_identifier)", "ldap_delete( resource $link_identifier , string $dn)", "ldap_dn2ufn( string $dn)", "ldap_err2str( int $errno)", "ldap_errno( resource $link_identifier)", "ldap_error( resource $link_identifier)", "ldap_escape( string $value [, string $ignore [, int $flags ]])", "ldap_explode_dn( string $dn , int $with_attrib)", "ldap_first_attribute( resource $link_identifier , resource $result_entry_identifier)", "ldap_first_entry( resource $link_identifier , resource $result_identifier)", "ldap_first_reference( resource $link , resource $result)", "ldap_free_result( resource $result_identifier)", "ldap_get_attributes( resource $link_identifier , resource $result_entry_identifier)", "ldap_get_dn( resource $link_identifier , resource $result_entry_identifier)", "ldap_get_entries( resource $link_identifier , resource $result_identifier)", "ldap_get_option( resource $link_identifier , int $option , mixed &$retval)", "ldap_get_values_len( resource $link_identifier , resource $result_entry_identifier , string $attribute)", "ldap_get_values( resource $link_identifier , resource $result_entry_identifier , string $attribute)", "ldap_list( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]])", "ldap_mod_add( resource $link_identifier , string $dn , array $entry)", "ldap_mod_del( resource $link_identifier , string $dn , array $entry)", "ldap_mod_replace( resource $link_identifier , string $dn , array $entry)", "ldap_modify_batch( resource $link_identifier , string $dn , array $entry)", "ldap_modify( resource $link_identifier , string $dn , array $entry)", "ldap_next_attribute( resource $link_identifier , resource $result_entry_identifier)", "ldap_next_entry( resource $link_identifier , resource $result_entry_identifier)", "ldap_next_reference( resource $link , resource $entry)", "ldap_parse_reference( resource $link , resource $entry , array &$referrals)", "ldap_parse_result( resource $link , resource $result , int &$errcode [, string &$matcheddn [, string &$errmsg [, array &$referrals ]]])", "ldap_read( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]])", "ldap_rename( resource $link_identifier , string $dn , string $newrdn , string $newparent , bool $deleteoldrdn)", "ldap_sasl_bind( resource $link [, string $binddn = NULL [, string $password = NULL [, string $sasl_mech = NULL [, string $sasl_realm = NULL [, string $sasl_authc_id = NULL [, string $sasl_authz_id = NULL [, string $props = NULL ]]]]]]])", "ldap_search( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]])", "ldap_set_option( resource $link_identifier , int $option , mixed $newval)", "ldap_set_rebind_proc( resource $link , callable $callback)", "ldap_sort( resource $link , resource $result , string $sortfilter)", "ldap_start_tls( resource $link)", "ldap_t61_to_8859( string $value)", "ldap_unbind( resource $link_identifier)", "levenshtein( string $str1 , string $str2)", "levenshtein( string $str1 , string $str2 , int $cost_ins , int $cost_rep , int $cost_del)", "libxml_clear_errors( void)", "libxml_disable_entity_loader([ bool $disable = true ])", "libxml_get_errors( void)", "libxml_get_last_error( void)", "libxml_set_external_entity_loader( callable $resolver_function)", "libxml_set_streams_context( resource $streams_context)", "libxml_use_internal_errors([ bool $use_errors = false ])", "link( string $target , string $link)", "linkinfo( string $path)", "list( mixed $var1 [, mixed $... ])", "localeconv( void)", "localtime([ int $timestamp = time() [, bool $is_associative = false ]])", "log_cmd_delete( array $server , array $writeOptions , array $deleteOptions , array $protocolOptions)", "log_cmd_insert( array $server , array $document , array $writeOptions , array $protocolOptions)", "log_cmd_update( array $server , array $writeOptions , array $updateOptions , array $protocolOptions)", "log_getmore( array $server , array $info)", "log_killcursor( array $server , array $info)", "log_reply( array $server , array $messageHeaders , array $operationHeaders)", "log_write_batch( array $server , array $writeOptions , array $batch , array $protocolOptions)", "log( float $arg [, float $base = M_E ])", "log10( float $arg)", "log1p( float $number)", "long2ip( string $proper_address)", "lstat( string $filename)", "ltrim( string $str [, string $character_mask ])", "lzf_compress( string $data)", "lzf_decompress( string $data)", "lzf_optimized_for( void)", "m_checkstatus( resource $conn , int $identifier)", "m_completeauthorizations( resource $conn , int &$array)", "m_connect( resource $conn)", "m_connectionerror( resource $conn)", "m_deletetrans( resource $conn , int $identifier)", "m_destroyconn( resource $conn)", "m_destroyengine( void)", "m_getcell( resource $conn , int $identifier , string $column , int $row)", "m_getcellbynum( resource $conn , int $identifier , int $column , int $row)", "m_getcommadelimited( resource $conn , int $identifier)", "m_getheader( resource $conn , int $identifier , int $column_num)", "m_initconn( void)", "m_initengine( string $location)", "m_iscommadelimited( resource $conn , int $identifier)", "m_maxconntimeout( resource $conn , int $secs)", "m_monitor( resource $conn)", "m_numcolumns( resource $conn , int $identifier)", "m_numrows( resource $conn , int $identifier)", "m_parsecommadelimited( resource $conn , int $identifier)", "m_responsekeys( resource $conn , int $identifier)", "m_responseparam( resource $conn , int $identifier , string $key)", "m_returnstatus( resource $conn , int $identifier)", "m_setblocking( resource $conn , int $tf)", "m_setdropfile( resource $conn , string $directory)", "m_setip( resource $conn , string $host , int $port)", "m_setssl_cafile( resource $conn , string $cafile)", "m_setssl_files( resource $conn , string $sslkeyfile , string $sslcertfile)", "m_setssl( resource $conn , string $host , int $port)", "m_settimeout( resource $conn , int $seconds)", "m_sslcert_gen_hash( string $filename)", "m_transactionssent( resource $conn)", "m_transinqueue( resource $conn)", "m_transkeyval( resource $conn , int $identifier , string $key , string $value)", "m_transnew( resource $conn)", "m_transsend( resource $conn , int $identifier)", "m_uwait( int $microsecs)", "m_validateidentifier( resource $conn , int $tf)", "m_verifyconnection( resource $conn , int $tf)", "m_verifysslcert( resource $conn , int $tf)", "mail( string $to , string $subject , string $message [, string $additional_headers [, string $additional_parameters ]])", "mailparse_determine_best_xfer_encoding( resource $fp)", "mailparse_msg_create( void)", "mailparse_msg_extract_part_file( resource $mimemail , mixed $filename [, callable $callbackfunc ])", "mailparse_msg_extract_part( resource $mimemail , string $msgbody [, callable $callbackfunc ])", "mailparse_msg_extract_whole_part_file( resource $mimemail , string $filename [, callable $callbackfunc ])", "mailparse_msg_free( resource $mimemail)", "mailparse_msg_get_part_data( resource $mimemail)", "mailparse_msg_get_part( resource $mimemail , string $mimesection)", "mailparse_msg_get_structure( resource $mimemail)", "mailparse_msg_parse_file( string $filename)", "mailparse_msg_parse( resource $mimemail , string $data)", "mailparse_rfc822_parse_addresses( string $addresses)", "mailparse_stream_encode( resource $sourcefp , resource $destfp , string $encoding)", "mailparse_uudecode_all( resource $fp)", "max( array $values)", "max( mixed $value1 , mixed $value2 [, mixed $... ])", "maxdb_affected_rows( resource $link)", "maxdb_autocommit( resource $link , bool $mode)", "auto_commit( bool $mode)", "maxdb_change_user( resource $link , string $user , string $password , string $database)", "change_user( string $user , string $password , string $database)", "maxdb_character_set_name( resource $link)", "character_set_name( void)", "maxdb_close( resource $link)", "close( void)", "maxdb_commit( resource $link)", "commit( void)", "maxdb_connect_errno( void)", "maxdb_connect_error( void)", "maxdb_connect([ string $host [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket ]]]]]])", "maxdb_data_seek( resource $result , int $offset)", "data_seek( int $offset)", "maxdb_debug( string $debug)", "maxdb_disable_reads_from_master( resource $link)", "disable_reads_from_master( void)", "maxdb_disable_rpl_parse( resource $link)", "maxdb_dump_debug_info( resource $link)", "maxdb_embedded_connect([ string $dbname ])", "maxdb_enable_reads_from_master( resource $link)", "maxdb_enable_rpl_parse( resource $link)", "maxdb_errno( resource $link)", "maxdb_error( resource $link)", "maxdb_fetch_array( resource $result [, int $resulttype ])", "fetch_array([ int $resulttype ])", "maxdb_fetch_assoc( resource $result)", "fetch_assoc( void)", "maxdb_fetch_field_direct( resource $result , int $fieldnr)", "fetch_field_direct( int $fieldnr)", "maxdb_fetch_field( resource $result)", "fetch_field( void)", "maxdb_fetch_fields( resource $result)", "fetch_fields( void)", "maxdb_fetch_lengths( resource $result)", "maxdb_fetch_object( object $result)", "fetch_object( void)", "maxdb_fetch_row( resource $result)", "fetch_row( void)", "maxdb_field_count( resource $link)", "field_count( void)", "maxdb_field_seek( resource $result , int $fieldnr)", "field_seek( int $fieldnr)", "maxdb_field_tell( resource $result)", "maxdb_free_result( resource $result)", "free( void)", "maxdb_get_client_info( void)", "maxdb_get_client_version( void)", "maxdb_get_host_info( resource $link)", "maxdb_get_proto_info( resource $link)", "maxdb_get_server_info( resource $link)", "maxdb_get_server_version( resource $link)", "maxdb_info( resource $link)", "maxdb_init( void)", "maxdb_insert_id( resource $link)", "maxdb_kill( resource $link , int $processid)", "kill( int $processid)", "maxdb_master_query( resource $link , string $query)", "maxdb_more_results( resource $link)", "maxdb_multi_query( resource $link , string $query)", "multi_query( string $query)", "maxdb_next_result( resource $link)", "maxdb_num_fields( resource $result)", "maxdb_num_rows( resource $result)", "maxdb_options( resource $link , int $option , mixed $value)", "options( int $option , mixed $value)", "maxdb_ping( resource $link)", "ping( void)", "maxdb_prepare( resource $link , string $query)", "prepare( string $query)", "maxdb_query( resource $link , string $query [, int $resultmode ])", "query( string $query)", "maxdb_real_connect( resource $link [, string $hostname [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket ]]]]]])", "real_connect([ string $hostname [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket ]]]]]])", "maxdb_real_escape_string( resource $link , string $escapestr)", "real_escape_string( string $escapestr)", "maxdb_real_query( resource $link , string $query)", "real_query( string $query)", "maxdb_report( int $flags)", "maxdb_rollback( resource $link)", "rollback( void)", "maxdb_rpl_parse_enabled( resource $link)", "maxdb_rpl_probe( resource $link)", "maxdb_rpl_query_type( resource $link)", "rpl_query_type( void)", "maxdb_select_db( resource $link , string $dbname)", "maxdb_send_query( resource $link , string $query)", "send_query( string $query)", "maxdb_server_end( void)", "maxdb_server_init([ array $server [, array $groups ]])", "maxdb_sqlstate( resource $link)", "maxdb_ssl_set( resource $link , string $key , string $cert , string $ca , string $capath , string $cipher)", "ssl_set( string $key , string $cert , string $ca , string $capath , string $cipher)", "maxdb_stat( resource $link)", "stat( void)", "maxdb_stmt_affected_rows( resource $stmt)", "maxdb_stmt_bind_param( resource $stmt , string $types , mixed &$var1 [, mixed &$... ])", "bind_param( string $types , mixed &$var1 [, mixed &$... ])", "maxdb_stmt_bind_param( resource $stmt , string $types , array &$var)", "bind_param( string $types , array &$var)", "maxdb_stmt_bind_result( resource $stmt , mixed &$var1 [, mixed &$... ])", "bind_result( mixed &$var1 [, mixed &$... ])", "maxdb_stmt_close_long_data( resource $stmt , int $param_nr)", "close_long_data( void)", "maxdb_stmt_close( resource $stmt)", "close( void)", "maxdb_stmt_data_seek( resource $statement , int $offset)", "data_seek( int $offset)", "maxdb_stmt_errno( resource $stmt)", "maxdb_stmt_error( resource $stmt)", "maxdb_stmt_execute( resource $stmt)", "execute( void)", "maxdb_stmt_fetch( resource $stmt)", "fetch( void)", "maxdb_stmt_free_result( resource $stmt)", "free_result( void)", "maxdb_stmt_init( resource $link)", "stmt_init( void)", "maxdb_stmt_num_rows( resource $stmt)", "maxdb_stmt_param_count( resource $stmt)", "maxdb_stmt_prepare( resource $stmt , string $query)", "prepare( string $query)", "maxdb_stmt_reset( resource $stmt)", "reset( void)", "maxdb_stmt_result_metadata( resource $stmt)", "result_metadata( void)", "maxdb_stmt_send_long_data( resource $stmt , int $param_nr , string $data)", "stmt_send_long_data( int $param_nr , string $data)", "maxdb_stmt_sqlstate( resource $stmt)", "maxdb_stmt_store_result( resource $stmt)", "store_result( void)", "maxdb_store_result( resource $link)", "store_result( void)", "maxdb_thread_id( resource $link)", "maxdb_thread_safe( void)", "maxdb_use_result( resource $link)", "use_result( void)", "maxdb_warning_count( resource $link)", "mb_check_encoding([ string $var = NULL [, string $encoding = mb_internal_encoding() ]])", "mb_convert_case( string $str , int $mode [, string $encoding = mb_internal_encoding() ])", "mb_convert_encoding( string $str , string $to_encoding [, mixed $from_encoding = mb_internal_encoding() ])", "mb_convert_kana( string $str [, string $option = &quot;KV&quot; [, string $encoding = mb_internal_encoding() ]])", "mb_convert_variables( string $to_encoding , mixed $from_encoding , mixed &$vars [, mixed &$... ])", "mb_decode_mimeheader( string $str)", "mb_decode_numericentity( string $str , array $convmap [, string $encoding = mb_internal_encoding() ])", "mb_detect_encoding( string $str [, mixed $encoding_list = mb_detect_order() [, bool $strict = false ]])", "mb_detect_order([ mixed $encoding_list = mb_detect_order() ])", "mb_encode_mimeheader( string $str [, string $charset = mb_internal_encoding() [, string $transfer_encoding = &quot;B&quot; [, string $linefeed = &quot;\\r\\n&quot; [, int $indent = 0 ]]]])", "mb_encode_numericentity( string $str , array $convmap [, string $encoding = mb_internal_encoding() [, bool $is_hex = FALSE ]])", "mb_encoding_aliases( string $encoding)", "mb_ereg_match( string $pattern , string $string [, string $option = &quot;msr&quot; ])", "mb_ereg_replace_callback( string $pattern , callable $callback , string $string [, string $option = &quot;msr&quot; ])", "mb_ereg_replace( string $pattern , string $replacement , string $string [, string $option = &quot;msr&quot; ])", "mb_ereg_search_getpos( void)", "mb_ereg_search_getregs( void)", "mb_ereg_search_init( string $string [, string $pattern [, string $option = &quot;msr&quot; ]])", "mb_ereg_search_pos([ string $pattern [, string $option = &quot;ms&quot; ]])", "mb_ereg_search_regs([ string $pattern [, string $option = &quot;ms&quot; ]])", "mb_ereg_search_setpos( int $position)", "mb_ereg_search([ string $pattern [, string $option = &quot;ms&quot; ]])", "mb_ereg( string $pattern , string $string [, array $regs ])", "mb_eregi_replace( string $pattern , string $replace , string $string [, string $option = &quot;msri&quot; ])", "mb_eregi( string $pattern , string $string [, array $regs ])", "mb_get_info([ string $type = &quot;all&quot; ])", "mb_http_input([ string $type = &quot;&quot; ])", "mb_http_output([ string $encoding = mb_http_output() ])", "mb_internal_encoding([ string $encoding = mb_internal_encoding() ])", "mb_language([ string $language = mb_language() ])", "mb_list_encodings( void)", "mb_output_handler( string $contents , int $status)", "mb_parse_str( string $encoded_string [, array &$result ])", "mb_preferred_mime_name( string $encoding)", "mb_regex_encoding([ string $encoding = mb_regex_encoding() ])", "mb_regex_set_options([ string $options = mb_regex_set_options() ])", "mb_send_mail( string $to , string $subject , string $message [, string $additional_headers = NULL [, string $additional_parameter = NULL ]])", "mb_split( string $pattern , string $string [, int $limit = -1 ])", "mb_strcut( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]])", "mb_strimwidth( string $str , int $start , int $width [, string $trimmarker = &quot;&quot; [, string $encoding = mb_internal_encoding() ]])", "mb_stripos( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]])", "mb_stristr( string $haystack , string $needle [, bool $before_needle = false [, string $encoding = mb_internal_encoding() ]])", "mb_strlen( string $str [, string $encoding = mb_internal_encoding() ])", "mb_strpos( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]])", "mb_strrchr( string $haystack , string $needle [, bool $part = false [, string $encoding = mb_internal_encoding() ]])", "mb_strrichr( string $haystack , string $needle [, bool $part = false [, string $encoding = mb_internal_encoding() ]])", "mb_strripos( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]])", "mb_strrpos( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]])", "mb_strstr( string $haystack , string $needle [, bool $before_needle = false [, string $encoding = mb_internal_encoding() ]])", "mb_strtolower( string $str [, string $encoding = mb_internal_encoding() ])", "mb_strtoupper( string $str [, string $encoding = mb_internal_encoding() ])", "mb_strwidth( string $str [, string $encoding = mb_internal_encoding() ])", "mb_substitute_character([ mixed $substrchar = mb_substitute_character() ])", "mb_substr_count( string $haystack , string $needle [, string $encoding = mb_internal_encoding() ])", "mb_substr( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]])", "mcrypt_cbc( int $cipher , string $key , string $data , int $mode [, string $iv ])", "mcrypt_cbc( string $cipher , string $key , string $data , int $mode [, string $iv ])", "mcrypt_cfb( int $cipher , string $key , string $data , int $mode , string $iv)", "mcrypt_cfb( string $cipher , string $key , string $data , int $mode [, string $iv ])", "mcrypt_create_iv( int $size [, int $source = MCRYPT_DEV_URANDOM ])", "mcrypt_decrypt( string $cipher , string $key , string $data , string $mode [, string $iv ])", "mcrypt_ecb( int $cipher , string $key , string $data , int $mode)", "mcrypt_ecb( string $cipher , string $key , string $data , int $mode [, string $iv ])", "mcrypt_enc_get_algorithms_name( resource $td)", "mcrypt_enc_get_block_size( resource $td)", "mcrypt_enc_get_iv_size( resource $td)", "mcrypt_enc_get_key_size( resource $td)", "mcrypt_enc_get_modes_name( resource $td)", "mcrypt_enc_get_supported_key_sizes( resource $td)", "mcrypt_enc_is_block_algorithm_mode( resource $td)", "mcrypt_enc_is_block_algorithm( resource $td)", "mcrypt_enc_is_block_mode( resource $td)", "mcrypt_enc_self_test( resource $td)", "mcrypt_encrypt( string $cipher , string $key , string $data , string $mode [, string $iv ])", "mcrypt_generic_deinit( resource $td)", "mcrypt_generic_end( resource $td)", "mcrypt_generic_init( resource $td , string $key , string $iv)", "mcrypt_generic( resource $td , string $data)", "mcrypt_get_block_size( int $cipher)", "mcrypt_get_block_size( string $cipher , string $mode)", "mcrypt_get_cipher_name( int $cipher)", "mcrypt_get_cipher_name( string $cipher)", "mcrypt_get_iv_size( string $cipher , string $mode)", "mcrypt_get_key_size( int $cipher)", "mcrypt_get_key_size( string $cipher , string $mode)", "mcrypt_list_algorithms([ string $lib_dir = ini_get(&quot;mcrypt.algorithms_dir&quot;) ])", "mcrypt_list_modes([ string $lib_dir = ini_get(&quot;mcrypt.modes_dir&quot;) ])", "mcrypt_module_close( resource $td)", "mcrypt_module_get_algo_block_size( string $algorithm [, string $lib_dir ])", "mcrypt_module_get_algo_key_size( string $algorithm [, string $lib_dir ])", "mcrypt_module_get_supported_key_sizes( string $algorithm [, string $lib_dir ])", "mcrypt_module_is_block_algorithm_mode( string $mode [, string $lib_dir ])", "mcrypt_module_is_block_algorithm( string $algorithm [, string $lib_dir ])", "mcrypt_module_is_block_mode( string $mode [, string $lib_dir ])", "mcrypt_module_open( string $algorithm , string $algorithm_directory , string $mode , string $mode_directory)", "mcrypt_module_self_test( string $algorithm [, string $lib_dir ])", "mcrypt_ofb( int $cipher , string $key , string $data , int $mode , string $iv)", "mcrypt_ofb( string $cipher , string $key , string $data , int $mode [, string $iv ])", "md5_file( string $filename [, bool $raw_output = false ])", "md5( string $str [, bool $raw_output = false ])", "mdecrypt_generic( resource $td , string $data)", "memcache_debug( bool $on_off)", "memory_get_peak_usage([ bool $real_usage = false ])", "memory_get_usage([ bool $real_usage = false ])", "metaphone( string $str [, int $phonemes = 0 ])", "method_exists( mixed $object , string $method_name)", "mhash_count( void)", "mhash_get_block_size( int $hash)", "mhash_get_hash_name( int $hash)", "mhash_keygen_s2k( int $hash , string $password , string $salt , int $bytes)", "mhash( int $hash , string $data [, string $key ])", "microtime([ bool $get_as_float = false ])", "mime_content_type( string $filename)", "min( array $values)", "min( mixed $value1 , mixed $value2 [, mixed $... ])", "ming_keypress( string $char)", "ming_setcubicthreshold( int $threshold)", "ming_setscale( float $scale)", "ming_setswfcompression( int $level)", "ming_useconstants( int $use)", "ming_useswfversion( int $version)", "mkdir( string $pathname [, int $mode = 0777 [, bool $recursive = false [, resource $context ]]])", "mktime([ int $hour = date(&quot;H&quot;) [, int $minute = date(&quot;i&quot;) [, int $second = date(&quot;s&quot;) [, int $month = date(&quot;n&quot;) [, int $day = date(&quot;j&quot;) [, int $year = date(&quot;Y&quot;) [, int $is_dst = -1 ]]]]]]])", "money_format( string $format , float $number)", "move_uploaded_file( string $filename , string $destination)", "mqseries_back( resource $hconn , resource &$compCode , resource &$reason)", "mqseries_begin( resource $hconn , array $beginOptions , resource &$compCode , resource &$reason)", "mqseries_close( resource $hconn , resource $hobj , int $options , resource &$compCode , resource &$reason)", "mqseries_cmit( resource $hconn , resource &$compCode , resource &$reason)", "mqseries_conn( string $qManagerName , resource &$hconn , resource &$compCode , resource &$reason)", "mqseries_connx( string $qManagerName , array &$connOptions , resource &$hconn , resource &$compCode , resource &$reason)", "mqseries_disc( resource $hconn , resource &$compCode , resource &$reason)", "mqseries_get( resource $hConn , resource $hObj , array &$md , array &$gmo , int &$bufferLength , string &$msg , int &$data_length , resource &$compCode , resource &$reason)", "mqseries_inq( resource $hconn , resource $hobj , int $selectorCount , array $selectors , int $intAttrCount , resource &$intAttr , int $charAttrLength , resource &$charAttr , resource &$compCode , resource &$reason)", "mqseries_open( resource $hconn , array &$objDesc , int $option , resource &$hobj , resource &$compCode , resource &$reason)", "mqseries_put( resource $hConn , resource $hObj , array &$md , array &$pmo , string $message , resource &$compCode , resource &$reason)", "mqseries_put1( resource $hconn , resource &$objDesc , resource &$msgDesc , resource &$pmo , string $buffer , resource &$compCode , resource &$reason)", "mqseries_set( resource $hconn , resource $hobj , int $selectorcount , array $selectors , int $intattrcount , array $intattrs , int $charattrlength , array $charattrs , resource &$compCode , resource &$reason)", "mqseries_strerror( int $reason)", "msession_connect( string $host , string $port)", "msession_count( void)", "msession_create( string $session [, string $classname [, string $data ]])", "msession_destroy( string $name)", "msession_disconnect( void)", "msession_find( string $name , string $value)", "msession_get_array( string $session)", "msession_get_data( string $session)", "msession_get( string $session , string $name , string $value)", "msession_inc( string $session , string $name)", "msession_list( void)", "msession_listvar( string $name)", "msession_lock( string $name)", "msession_plugin( string $session , string $val [, string $param ])", "msession_randstr( int $param)", "msession_set_array( string $session , array $tuples)", "msession_set_data( string $session , string $value)", "msession_set( string $session , string $name , string $value)", "msession_timeout( string $session [, int $param ])", "msession_uniq( int $param [, string $classname [, string $data ]])", "msession_unlock( string $session , int $key)", "msg_get_queue( int $key [, int $perms = 0666 ])", "msg_queue_exists( int $key)", "msg_receive( resource $queue , int $desiredmsgtype , int &$msgtype , int $maxsize , mixed &$message [, bool $unserialize = true [, int $flags = 0 [, int &$errorcode ]]])", "msg_remove_queue( resource $queue)", "msg_send( resource $queue , int $msgtype , mixed $message [, bool $serialize = true [, bool $blocking = true [, int &$errorcode ]]])", "msg_set_queue( resource $queue , array $data)", "msg_stat_queue( resource $queue)", "msql_affected_rows( resource $result)", "msql_close([ resource $link_identifier ])", "msql_connect([ string $hostname ])", "msql_create_db( string $database_name [, resource $link_identifier ])", "msql_data_seek( resource $result , int $row_number)", "msql_db_query( string $database , string $query [, resource $link_identifier ])", "msql_drop_db( string $database_name [, resource $link_identifier ])", "msql_error( void)", "msql_fetch_array( resource $result [, int $result_type ])", "msql_fetch_field( resource $result [, int $field_offset = 0 ])", "msql_fetch_object( resource $result)", "msql_fetch_row( resource $result)", "msql_field_flags( resource $result , int $field_offset)", "msql_field_len( resource $result , int $field_offset)", "msql_field_name( resource $result , int $field_offset)", "msql_field_seek( resource $result , int $field_offset)", "msql_field_table( resource $result , int $field_offset)", "msql_field_type( resource $result , int $field_offset)", "msql_free_result( resource $result)", "msql_list_dbs([ resource $link_identifier ])", "msql_list_fields( string $database , string $tablename [, resource $link_identifier ])", "msql_list_tables( string $database [, resource $link_identifier ])", "msql_num_fields( resource $result)", "msql_num_rows( resource $query_identifier)", "msql_pconnect([ string $hostname ])", "msql_query( string $query [, resource $link_identifier ])", "msql_result( resource $result , int $row [, mixed $field ])", "msql_select_db( string $database_name [, resource $link_identifier ])", "mssql_bind( resource $stmt , string $param_name , mixed &$var , int $type [, bool $is_output = false [, bool $is_null = false [, int $maxlen = -1 ]]])", "mssql_close([ resource $link_identifier ])", "mssql_connect([ string $servername [, string $username [, string $password [, bool $new_link = false ]]]])", "mssql_data_seek( resource $result_identifier , int $row_number)", "mssql_execute( resource $stmt [, bool $skip_results = false ])", "mssql_fetch_array( resource $result [, int $result_type = MSSQL_BOTH ])", "mssql_fetch_assoc( resource $result_id)", "mssql_fetch_batch( resource $result)", "mssql_fetch_field( resource $result [, int $field_offset = -1 ])", "mssql_fetch_object( resource $result)", "mssql_fetch_row( resource $result)", "mssql_field_length( resource $result [, int $offset = -1 ])", "mssql_field_name( resource $result [, int $offset = -1 ])", "mssql_field_seek( resource $result , int $field_offset)", "mssql_field_type( resource $result [, int $offset = -1 ])", "mssql_free_result( resource $result)", "mssql_free_statement( resource $stmt)", "mssql_get_last_message( void)", "mssql_guid_string( string $binary [, bool $short_format = false ])", "mssql_init( string $sp_name [, resource $link_identifier ])", "mssql_min_error_severity( int $severity)", "mssql_min_message_severity( int $severity)", "mssql_next_result( resource $result_id)", "mssql_num_fields( resource $result)", "mssql_num_rows( resource $result)", "mssql_pconnect([ string $servername [, string $username [, string $password [, bool $new_link = false ]]]])", "mssql_query( string $query [, resource $link_identifier [, int $batch_size = 0 ]])", "mssql_result( resource $result , int $row , mixed $field)", "mssql_rows_affected( resource $link_identifier)", "mssql_select_db( string $database_name [, resource $link_identifier ])", "mt_getrandmax( void)", "mt_rand( void)", "mt_rand( int $min , int $max)", "mt_srand([ int $seed ])", "mysql_affected_rows([ resource $link_identifier = NULL ])", "mysql_client_encoding([ resource $link_identifier = NULL ])", "mysql_close([ resource $link_identifier = NULL ])", "mysql_connect([ string $server = ini_get(&quot;mysql.default_host&quot;) [, string $username = ini_get(&quot;mysql.default_user&quot;) [, string $password = ini_get(&quot;mysql.default_password&quot;) [, bool $new_link = false [, int $client_flags = 0 ]]]]])", "mysql_create_db( string $database_name [, resource $link_identifier = NULL ])", "mysql_data_seek( resource $result , int $row_number)", "mysql_db_name( resource $result , int $row [, mixed $field = NULL ])", "mysql_db_query( string $database , string $query [, resource $link_identifier = NULL ])", "mysql_drop_db( string $database_name [, resource $link_identifier = NULL ])", "mysql_errno([ resource $link_identifier = NULL ])", "mysql_error([ resource $link_identifier = NULL ])", "mysql_escape_string( string $unescaped_string)", "mysql_fetch_array( resource $result [, int $result_type = MYSQL_BOTH ])", "mysql_fetch_assoc( resource $result)", "mysql_fetch_field( resource $result [, int $field_offset = 0 ])", "mysql_fetch_lengths( resource $result)", "mysql_fetch_object( resource $result [, string $class_name [, array $params ]])", "mysql_fetch_row( resource $result)", "mysql_field_flags( resource $result , int $field_offset)", "mysql_field_len( resource $result , int $field_offset)", "mysql_field_name( resource $result , int $field_offset)", "mysql_field_seek( resource $result , int $field_offset)", "mysql_field_table( resource $result , int $field_offset)", "mysql_field_type( resource $result , int $field_offset)", "mysql_free_result( resource $result)", "mysql_get_client_info( void)", "mysql_get_host_info([ resource $link_identifier = NULL ])", "mysql_get_proto_info([ resource $link_identifier = NULL ])", "mysql_get_server_info([ resource $link_identifier = NULL ])", "mysql_info([ resource $link_identifier = NULL ])", "mysql_insert_id([ resource $link_identifier = NULL ])", "mysql_list_dbs([ resource $link_identifier = NULL ])", "mysql_list_fields( string $database_name , string $table_name [, resource $link_identifier = NULL ])", "mysql_list_processes([ resource $link_identifier = NULL ])", "mysql_list_tables( string $database [, resource $link_identifier = NULL ])", "mysql_num_fields( resource $result)", "mysql_num_rows( resource $result)", "mysql_pconnect([ string $server = ini_get(&quot;mysql.default_host&quot;) [, string $username = ini_get(&quot;mysql.default_user&quot;) [, string $password = ini_get(&quot;mysql.default_password&quot;) [, int $client_flags = 0 ]]]])", "mysql_ping([ resource $link_identifier = NULL ])", "mysql_query( string $query [, resource $link_identifier = NULL ])", "mysql_real_escape_string( string $unescaped_string [, resource $link_identifier = NULL ])", "mysql_result( resource $result , int $row [, mixed $field = 0 ])", "mysql_select_db( string $database_name [, resource $link_identifier = NULL ])", "mysql_set_charset( string $charset [, resource $link_identifier = NULL ])", "mysql_stat([ resource $link_identifier = NULL ])", "mysql_tablename( resource $result , int $i)", "mysql_thread_id([ resource $link_identifier = NULL ])", "mysql_unbuffered_query( string $query [, resource $link_identifier = NULL ])", "disable_reads_from_master( void)", "mysqli_disable_reads_from_master( mysqli $link)", "mysqli_disable_rpl_parse( mysqli $link)", "mysqli_enable_reads_from_master( mysqli $link)", "mysqli_enable_rpl_parse( mysqli $link)", "mysqli_get_cache_stats( void)", "mysqli_get_links_stats( void)", "mysqli_master_query( mysqli $link , string $query)", "mysqli_rpl_parse_enabled( mysqli $link)", "mysqli_rpl_probe( mysqli $link)", "mysqli_slave_query( mysqli $link , string $query)", "mysqlnd_memcache_get_config( mixed $connection)", "mysqlnd_memcache_set( mixed $mysql_connection [, Memcached $memcache_connection [, string $pattern [, callback $callback ]]])", "mysqlnd_ms_dump_servers( mixed $connection)", "mysqlnd_ms_fabric_select_global( mixed $connection , mixed $table_name)", "mysqlnd_ms_fabric_select_shard( mixed $connection , mixed $table_name , mixed $shard_key)", "mysqlnd_ms_get_last_gtid( mixed $connection)", "mysqlnd_ms_get_last_used_connection( mixed $connection)", "mysqlnd_ms_get_stats( void)", "mysqlnd_ms_match_wild( string $table_name , string $wildcard)", "mysqlnd_ms_query_is_select( string $query)", "mysqlnd_ms_set_qos( mixed $connection , int $service_level [, int $service_level_option [, mixed $option_value ]])", "mysqlnd_ms_set_user_pick_server( string $function)", "mysqlnd_ms_xa_begin( mixed $connection , string $gtrid [, int $timeout ])", "mysqlnd_ms_xa_commit( mixed $connection , string $gtrid)", "mysqlnd_ms_xa_gc( mixed $connection [, string $gtrid [, boolean $ignore_max_retries ]])", "mysqlnd_ms_xa_rollback( mixed $connection , string $gtrid)", "mysqlnd_qc_clear_cache( void)", "mysqlnd_qc_get_available_handlers( void)", "mysqlnd_qc_get_cache_info( void)", "mysqlnd_qc_get_core_stats( void)", "mysqlnd_qc_get_normalized_query_trace_log( void)", "mysqlnd_qc_get_query_trace_log( void)", "mysqlnd_qc_set_cache_condition( int $condition_type , mixed $condition , mixed $condition_option)", "mysqlnd_qc_set_is_select( string $callback)", "mysqlnd_qc_set_storage_handler( string $handler)", "mysqlnd_qc_set_user_handlers( string $get_hash , string $find_query_in_cache , string $return_to_cache , string $add_query_to_cache_if_not_exists , string $query_is_select , string $update_query_run_time_stats , string $get_stats , string $clear_cache)", "mysqlnd_uh_convert_to_mysqlnd( mysqli &$mysql_connection)", "mysqlnd_uh_set_connection_proxy( MysqlndUhConnection &$connection_proxy [, mysqli &$mysqli_connection ])", "mysqlnd_uh_set_statement_proxy( MysqlndUhStatement &$statement_proxy)", "natcasesort( array &$array)", "natsort( array &$array)", "ncurses_addch( int $ch)", "ncurses_addchnstr( string $s , int $n)", "ncurses_addchstr( string $s)", "ncurses_addnstr( string $s , int $n)", "ncurses_addstr( string $text)", "ncurses_assume_default_colors( int $fg , int $bg)", "ncurses_attroff( int $attributes)", "ncurses_attron( int $attributes)", "ncurses_attrset( int $attributes)", "ncurses_baudrate( void)", "ncurses_beep( void)", "ncurses_bkgd( int $attrchar)", "ncurses_bkgdset( int $attrchar)", "ncurses_border( int $left , int $right , int $top , int $bottom , int $tl_corner , int $tr_corner , int $bl_corner , int $br_corner)", "ncurses_bottom_panel( resource $panel)", "ncurses_can_change_color( void)", "ncurses_cbreak( void)", "ncurses_clear( void)", "ncurses_clrtobot( void)", "ncurses_clrtoeol( void)", "ncurses_color_content( int $color , int &$r , int &$g , int &$b)", "ncurses_color_set( int $pair)", "ncurses_curs_set( int $visibility)", "ncurses_def_prog_mode( void)", "ncurses_def_shell_mode( void)", "ncurses_define_key( string $definition , int $keycode)", "ncurses_del_panel( resource $panel)", "ncurses_delay_output( int $milliseconds)", "ncurses_delch( void)", "ncurses_deleteln( void)", "ncurses_delwin( resource $window)", "ncurses_doupdate( void)", "ncurses_echo( void)", "ncurses_echochar( int $character)", "ncurses_end( void)", "ncurses_erase( void)", "ncurses_erasechar( void)", "ncurses_filter( void)", "ncurses_flash( void)", "ncurses_flushinp( void)", "ncurses_getch( void)", "ncurses_getmaxyx( resource $window , int &$y , int &$x)", "ncurses_getmouse( array &$mevent)", "ncurses_getyx( resource $window , int &$y , int &$x)", "ncurses_halfdelay( int $tenth)", "ncurses_has_colors( void)", "ncurses_has_ic( void)", "ncurses_has_il( void)", "ncurses_has_key( int $keycode)", "ncurses_hide_panel( resource $panel)", "ncurses_hline( int $charattr , int $n)", "ncurses_inch( void)", "ncurses_init_color( int $color , int $r , int $g , int $b)", "ncurses_init_pair( int $pair , int $fg , int $bg)", "ncurses_init( void)", "ncurses_insch( int $character)", "ncurses_insdelln( int $count)", "ncurses_insertln( void)", "ncurses_insstr( string $text)", "ncurses_instr( string &$buffer)", "ncurses_isendwin( void)", "ncurses_keyok( int $keycode , bool $enable)", "ncurses_keypad( resource $window , bool $bf)", "ncurses_killchar( void)", "ncurses_longname( void)", "ncurses_meta( resource $window , bool $8bit)", "ncurses_mouse_trafo( int &$y , int &$x , bool $toscreen)", "ncurses_mouseinterval( int $milliseconds)", "ncurses_mousemask( int $newmask , int &$oldmask)", "ncurses_move_panel( resource $panel , int $startx , int $starty)", "ncurses_move( int $y , int $x)", "ncurses_mvaddch( int $y , int $x , int $c)", "ncurses_mvaddchnstr( int $y , int $x , string $s , int $n)", "ncurses_mvaddchstr( int $y , int $x , string $s)", "ncurses_mvaddnstr( int $y , int $x , string $s , int $n)", "ncurses_mvaddstr( int $y , int $x , string $s)", "ncurses_mvcur( int $old_y , int $old_x , int $new_y , int $new_x)", "ncurses_mvdelch( int $y , int $x)", "ncurses_mvgetch( int $y , int $x)", "ncurses_mvhline( int $y , int $x , int $attrchar , int $n)", "ncurses_mvinch( int $y , int $x)", "ncurses_mvvline( int $y , int $x , int $attrchar , int $n)", "ncurses_mvwaddstr( resource $window , int $y , int $x , string $text)", "ncurses_napms( int $milliseconds)", "ncurses_new_panel( resource $window)", "ncurses_newpad( int $rows , int $cols)", "ncurses_newwin( int $rows , int $cols , int $y , int $x)", "ncurses_nl( void)", "ncurses_nocbreak( void)", "ncurses_noecho( void)", "ncurses_nonl( void)", "ncurses_noqiflush( void)", "ncurses_noraw( void)", "ncurses_pair_content( int $pair , int &$f , int &$b)", "ncurses_panel_above( resource $panel)", "ncurses_panel_below( resource $panel)", "ncurses_panel_window( resource $panel)", "ncurses_pnoutrefresh( resource $pad , int $pminrow , int $pmincol , int $sminrow , int $smincol , int $smaxrow , int $smaxcol)", "ncurses_prefresh( resource $pad , int $pminrow , int $pmincol , int $sminrow , int $smincol , int $smaxrow , int $smaxcol)", "ncurses_putp( string $text)", "ncurses_qiflush( void)", "ncurses_raw( void)", "ncurses_refresh( int $ch)", "ncurses_replace_panel( resource $panel , resource $window)", "ncurses_reset_prog_mode( void)", "ncurses_reset_shell_mode( void)", "ncurses_resetty( void)", "ncurses_savetty( void)", "ncurses_scr_dump( string $filename)", "ncurses_scr_init( string $filename)", "ncurses_scr_restore( string $filename)", "ncurses_scr_set( string $filename)", "ncurses_scrl( int $count)", "ncurses_show_panel( resource $panel)", "ncurses_slk_attr( void)", "ncurses_slk_attroff( int $intarg)", "ncurses_slk_attron( int $intarg)", "ncurses_slk_attrset( int $intarg)", "ncurses_slk_clear( void)", "ncurses_slk_color( int $intarg)", "ncurses_slk_init( int $format)", "ncurses_slk_noutrefresh( void)", "ncurses_slk_refresh( void)", "ncurses_slk_restore( void)", "ncurses_slk_set( int $labelnr , string $label , int $format)", "ncurses_slk_touch( void)", "ncurses_standend( void)", "ncurses_standout( void)", "ncurses_start_color( void)", "ncurses_termattrs( void)", "ncurses_termname( void)", "ncurses_timeout( int $millisec)", "ncurses_top_panel( resource $panel)", "ncurses_typeahead( int $fd)", "ncurses_ungetch( int $keycode)", "ncurses_ungetmouse( array $mevent)", "ncurses_update_panels( void)", "ncurses_use_default_colors( void)", "ncurses_use_env( bool $flag)", "ncurses_use_extended_names( bool $flag)", "ncurses_vidattr( int $intarg)", "ncurses_vline( int $charattr , int $n)", "ncurses_waddch( resource $window , int $ch)", "ncurses_waddstr( resource $window , string $str [, int $n ])", "ncurses_wattroff( resource $window , int $attrs)", "ncurses_wattron( resource $window , int $attrs)", "ncurses_wattrset( resource $window , int $attrs)", "ncurses_wborder( resource $window , int $left , int $right , int $top , int $bottom , int $tl_corner , int $tr_corner , int $bl_corner , int $br_corner)", "ncurses_wclear( resource $window)", "ncurses_wcolor_set( resource $window , int $color_pair)", "ncurses_werase( resource $window)", "ncurses_wgetch( resource $window)", "ncurses_whline( resource $window , int $charattr , int $n)", "ncurses_wmouse_trafo( resource $window , int &$y , int &$x , bool $toscreen)", "ncurses_wmove( resource $window , int $y , int $x)", "ncurses_wnoutrefresh( resource $window)", "ncurses_wrefresh( resource $window)", "ncurses_wstandend( resource $window)", "ncurses_wstandout( resource $window)", "ncurses_wvline( resource $window , int $charattr , int $n)", "newt_bell( void)", "newt_button_bar( array &$buttons)", "newt_button( int $left , int $top , string $text)", "newt_centered_window( int $width , int $height [, string $title ])", "newt_checkbox_get_value( resource $checkbox)", "newt_checkbox_set_flags( resource $checkbox , int $flags , int $sense)", "newt_checkbox_set_value( resource $checkbox , string $value)", "newt_checkbox_tree_add_item( resource $checkboxtree , string $text , mixed $data , int $flags , int $index [, int $... ])", "newt_checkbox_tree_find_item( resource $checkboxtree , mixed $data)", "newt_checkbox_tree_get_current( resource $checkboxtree)", "newt_checkbox_tree_get_entry_value( resource $checkboxtree , mixed $data)", "newt_checkbox_tree_get_multi_selection( resource $checkboxtree , string $seqnum)", "newt_checkbox_tree_get_selection( resource $checkboxtree)", "newt_checkbox_tree_multi( int $left , int $top , int $height , string $seq [, int $flags ])", "newt_checkbox_tree_set_current( resource $checkboxtree , mixed $data)", "newt_checkbox_tree_set_entry_value( resource $checkboxtree , mixed $data , string $value)", "newt_checkbox_tree_set_entry( resource $checkboxtree , mixed $data , string $text)", "newt_checkbox_tree_set_width( resource $checkbox_tree , int $width)", "newt_checkbox_tree( int $left , int $top , int $height [, int $flags ])", "newt_checkbox( int $left , int $top , string $text , string $def_value [, string $seq ])", "newt_clear_key_buffer( void)", "newt_cls( void)", "newt_compact_button( int $left , int $top , string $text)", "newt_component_add_callback( resource $component , mixed $func_name , mixed $data)", "newt_component_takes_focus( resource $component , bool $takes_focus)", "newt_create_grid( int $cols , int $rows)", "newt_cursor_off( void)", "newt_cursor_on( void)", "newt_delay( int $microseconds)", "newt_draw_form( resource $form)", "newt_draw_root_text( int $left , int $top , string $text)", "newt_entry_get_value( resource $entry)", "newt_entry_set_filter( resource $entry , callable $filter , mixed $data)", "newt_entry_set_flags( resource $entry , int $flags , int $sense)", "newt_entry_set( resource $entry , string $value [, bool $cursor_at_end ])", "newt_entry( int $left , int $top , int $width [, string $init_value [, int $flags ]])", "newt_finished( void)", "newt_form_add_component( resource $form , resource $component)", "newt_form_add_components( resource $form , array $components)", "newt_form_add_hot_key( resource $form , int $key)", "newt_form_destroy( resource $form)", "newt_form_get_current( resource $form)", "newt_form_run( resource $form , array &$exit_struct)", "newt_form_set_background( resource $from , int $background)", "newt_form_set_height( resource $form , int $height)", "newt_form_set_size( resource $form)", "newt_form_set_timer( resource $form , int $milliseconds)", "newt_form_set_width( resource $form , int $width)", "newt_form_watch_fd( resource $form , resource $stream [, int $flags ])", "newt_form([ resource $vert_bar [, string $help [, int $flags ]]])", "newt_get_screen_size( int &$cols , int &$rows)", "newt_grid_add_components_to_form( resource $grid , resource $form , bool $recurse)", "newt_grid_basic_window( resource $text , resource $middle , resource $buttons)", "newt_grid_free( resource $grid , bool $recurse)", "newt_grid_get_size( resouce $grid , int &$width , int &$height)", "newt_grid_h_close_stacked( int $element1_type , resource $element1 [, int $... [, resource $... ]])", "newt_grid_h_stacked( int $element1_type , resource $element1 [, int $... [, resource $... ]])", "newt_grid_place( resource $grid , int $left , int $top)", "newt_grid_set_field( resource $grid , int $col , int $row , int $type , resource $val , int $pad_left , int $pad_top , int $pad_right , int $pad_bottom , int $anchor [, int $flags ])", "newt_grid_simple_window( resource $text , resource $middle , resource $buttons)", "newt_grid_v_close_stacked( int $element1_type , resource $element1 [, int $... [, resource $... ]])", "newt_grid_v_stacked( int $element1_type , resource $element1 [, int $... [, resource $... ]])", "newt_grid_wrapped_window_at( resource $grid , string $title , int $left , int $top)", "newt_grid_wrapped_window( resource $grid , string $title)", "newt_init( void)", "newt_label_set_text( resource $label , string $text)", "newt_label( int $left , int $top , string $text)", "newt_listbox_append_entry( resource $listbox , string $text , mixed $data)", "newt_listbox_clear_selection( resource $listbox)", "newt_listbox_clear( resource $listobx)", "newt_listbox_delete_entry( resource $listbox , mixed $key)", "newt_listbox_get_current( resource $listbox)", "newt_listbox_get_selection( resource $listbox)", "newt_listbox_insert_entry( resource $listbox , string $text , mixed $data , mixed $key)", "newt_listbox_item_count( resource $listbox)", "newt_listbox_select_item( resource $listbox , mixed $key , int $sense)", "newt_listbox_set_current_by_key( resource $listbox , mixed $key)", "newt_listbox_set_current( resource $listbox , int $num)", "newt_listbox_set_data( resource $listbox , int $num , mixed $data)", "newt_listbox_set_entry( resource $listbox , int $num , string $text)", "newt_listbox_set_width( resource $listbox , int $width)", "newt_listbox( int $left , int $top , int $height [, int $flags ])", "newt_listitem_get_data( resource $item)", "newt_listitem_set( resource $item , string $text)", "newt_listitem( int $left , int $top , string $text , bool $is_default , resouce $prev_item , mixed $data [, int $flags ])", "newt_open_window( int $left , int $top , int $width , int $height [, string $title ])", "newt_pop_help_line( void)", "newt_pop_window( void)", "newt_push_help_line([ string $text ])", "newt_radio_get_current( resource $set_member)", "newt_radiobutton( int $left , int $top , string $text , bool $is_default [, resource $prev_button ])", "newt_redraw_help_line( void)", "newt_reflow_text( string $text , int $width , int $flex_down , int $flex_up , int &$actual_width , int &$actual_height)", "newt_refresh( void)", "newt_resize_screen([ bool $redraw ])", "newt_resume( void)", "newt_run_form( resource $form)", "newt_scale_set( resource $scale , int $amount)", "newt_scale( int $left , int $top , int $width , int $full_value)", "newt_scrollbar_set( resource $scrollbar , int $where , int $total)", "newt_set_help_callback( mixed $function)", "newt_set_suspend_callback( callable $function , mixed $data)", "newt_suspend( void)", "newt_textbox_get_num_lines( resource $textbox)", "newt_textbox_reflowed( int $left , int $top , char $*text , int $width , int $flex_down , int $flex_up [, int $flags ])", "newt_textbox_set_height( resource $textbox , int $height)", "newt_textbox_set_text( resource $textbox , string $text)", "newt_textbox( int $left , int $top , int $width , int $height [, int $flags ])", "newt_vertical_scrollbar( int $left , int $top , int $height [, int $normal_colorset [, int $thumb_colorset ]])", "newt_wait_for_key( void)", "newt_win_choice( string $title , string $button1_text , string $button2_text , string $format [, mixed $args [, mixed $... ]])", "newt_win_entries( string $title , string $text , int $suggested_width , int $flex_down , int $flex_up , int $data_width , array &$items , string $button1 [, string $... ])", "newt_win_menu( string $title , string $text , int $suggestedWidth , int $flexDown , int $flexUp , int $maxListHeight , array $items , int &$listItem [, string $button1 [, string $... ]])", "newt_win_message( string $title , string $button_text , string $format [, mixed $args [, mixed $... ]])", "newt_win_messagev( string $title , string $button_text , string $format , array $args)", "newt_win_ternary( string $title , string $button1_text , string $button2_text , string $button3_text , string $format [, mixed $args [, mixed $... ]])", "next( array &$array)", "ngettext( string $msgid1 , string $msgid2 , int $n)", "nl_langinfo( int $item)", "nl2br( string $string [, bool $is_xhtml = true ])", "nsapi_request_headers( void)", "nsapi_response_headers( void)", "nsapi_virtual( string $uri)", "nthmac( string $clent , string $data)", "number_format( float $number [, int $decimals = 0 ])", "number_format( float $number , int $decimals = 0 , string $dec_point = &quot;.&quot; , string $thousands_sep = &quot;,&quot;)", "oauth_get_sbs( string $http_method , string $uri [, array $request_parameters ])", "oauth_urlencode( string $uri)", "ob_clean( void)", "ob_deflatehandler( string $data , int $mode)", "ob_end_clean( void)", "ob_end_flush( void)", "ob_etaghandler( string $data , int $mode)", "ob_flush( void)", "ob_get_clean( void)", "ob_get_contents( void)", "ob_get_flush( void)", "ob_get_length( void)", "ob_get_level( void)", "ob_get_status([ bool $full_status = FALSE ])", "ob_gzhandler( string $buffer , int $mode)", "ob_iconv_handler( string $contents , int $status)", "ob_implicit_flush([ int $flag = true ])", "ob_inflatehandler( string $data , int $mode)", "ob_list_handlers( void)", "ob_start([ callable $output_callback = NULL [, int $chunk_size = 0 [, int $flags = PHP_OUTPUT_HANDLER_STDFLAGS ]]])", "handler( string $buffer [, int $phase ])", "ob_tidyhandler( string $input [, int $mode ])", "oci_bind_array_by_name( resource $statement , string $name , array &$var_array , int $max_table_length [, int $max_item_length = -1 [, int $type = SQLT_AFC ]])", "oci_bind_by_name( resource $statement , string $bv_name , mixed &$variable [, int $maxlength = -1 [, int $type = SQLT_CHR ]])", "oci_cancel( resource $statement)", "oci_client_version( void)", "oci_close( resource $connection)", "oci_commit( resource $connection)", "oci_connect( string $username , string $password [, string $connection_string [, string $character_set [, int $session_mode ]]])", "oci_define_by_name( resource $statement , string $column_name , mixed &$variable [, int $type = SQLT_CHR ])", "oci_error([ resource $resource ])", "oci_execute( resource $statement [, int $mode = OCI_COMMIT_ON_SUCCESS ])", "oci_fetch_all( resource $statement , array &$output [, int $skip = 0 [, int $maxrows = -1 [, int $flags = OCI_FETCHSTATEMENT_BY_COLUMN + OCI_ASSOC ]]])", "oci_fetch_array( resource $statement [, int $mode ])", "oci_fetch_assoc( resource $statement)", "oci_fetch_object( resource $statement)", "oci_fetch_row( resource $statement)", "oci_fetch( resource $statement)", "oci_field_is_null( resource $statement , mixed $field)", "oci_field_name( resource $statement , mixed $field)", "oci_field_precision( resource $statement , mixed $field)", "oci_field_scale( resource $statement , mixed $field)", "oci_field_size( resource $statement , mixed $field)", "oci_field_type_raw( resource $statement , mixed $field)", "oci_field_type( resource $statement , mixed $field)", "oci_free_descriptor( resource $descriptor)", "oci_free_statement( resource $statement)", "oci_get_implicit_resultset( resource $statement)", "oci_internal_debug( bool $onoff)", "oci_lob_copy( OCI-Lob $lob_to , OCI-Lob $lob_from [, int $length = 0 ])", "oci_lob_is_equal( OCI-Lob $lob1 , OCI-Lob $lob2)", "oci_new_collection( resource $connection , string $tdo [, string $schema = NULL ])", "oci_new_connect( string $username , string $password [, string $connection_string [, string $character_set [, int $session_mode ]]])", "oci_new_cursor( resource $connection)", "oci_new_descriptor( resource $connection [, int $type = OCI_DTYPE_LOB ])", "oci_num_fields( resource $statement)", "oci_num_rows( resource $statement)", "oci_parse( resource $connection , string $sql_text)", "oci_password_change( resource $connection , string $username , string $old_password , string $new_password)", "oci_password_change( string $dbname , string $username , string $old_password , string $new_password)", "oci_pconnect( string $username , string $password [, string $connection_string [, string $character_set [, int $session_mode ]]])", "oci_result( resource $statement , mixed $field)", "oci_rollback( resource $connection)", "oci_server_version( resource $connection)", "oci_set_action( resource $connection , string $action_name)", "oci_set_client_identifier( resource $connection , string $client_identifier)", "oci_set_client_info( resource $connection , string $client_info)", "oci_set_edition( string $edition)", "oci_set_module_name( resource $connection , string $module_name)", "oci_set_prefetch( resource $statement , int $rows)", "oci_statement_type( resource $statement)", "octdec( string $octal_string)", "odbc_autocommit( resource $connection_id [, bool $OnOff = false ])", "odbc_binmode( resource $result_id , int $mode)", "odbc_close_all( void)", "odbc_close( resource $connection_id)", "odbc_columnprivileges( resource $connection_id , string $qualifier , string $owner , string $table_name , string $column_name)", "odbc_columns( resource $connection_id [, string $qualifier [, string $schema [, string $table_name [, string $column_name ]]]])", "odbc_commit( resource $connection_id)", "odbc_connect( string $dsn , string $user , string $password [, int $cursor_type ])", "odbc_cursor( resource $result_id)", "odbc_data_source( resource $connection_id , int $fetch_type)", "odbc_error([ resource $connection_id ])", "odbc_errormsg([ resource $connection_id ])", "odbc_exec( resource $connection_id , string $query_string [, int $flags ])", "odbc_execute( resource $result_id [, array $parameters_array ])", "odbc_fetch_array( resource $result [, int $rownumber ])", "odbc_fetch_into( resource $result_id , array &$result_array [, int $rownumber ])", "odbc_fetch_object( resource $result [, int $rownumber ])", "odbc_fetch_row( resource $result_id [, int $row_number ])", "odbc_field_len( resource $result_id , int $field_number)", "odbc_field_name( resource $result_id , int $field_number)", "odbc_field_num( resource $result_id , string $field_name)", "odbc_field_scale( resource $result_id , int $field_number)", "odbc_field_type( resource $result_id , int $field_number)", "odbc_foreignkeys( resource $connection_id , string $pk_qualifier , string $pk_owner , string $pk_table , string $fk_qualifier , string $fk_owner , string $fk_table)", "odbc_free_result( resource $result_id)", "odbc_gettypeinfo( resource $connection_id [, int $data_type ])", "odbc_longreadlen( resource $result_id , int $length)", "odbc_next_result( resource $result_id)", "odbc_num_fields( resource $result_id)", "odbc_num_rows( resource $result_id)", "odbc_pconnect( string $dsn , string $user , string $password [, int $cursor_type ])", "odbc_prepare( resource $connection_id , string $query_string)", "odbc_primarykeys( resource $connection_id , string $qualifier , string $owner , string $table)", "odbc_procedurecolumns( resource $connection_id)", "odbc_procedurecolumns( resource $connection_id , string $qualifier , string $owner , string $proc , string $column)", "odbc_procedures( resource $connection_id)", "odbc_procedures( resource $connection_id , string $qualifier , string $owner , string $name)", "odbc_result_all( resource $result_id [, string $format ])", "odbc_result( resource $result_id , mixed $field)", "odbc_rollback( resource $connection_id)", "odbc_setoption( resource $id , int $function , int $option , int $param)", "odbc_specialcolumns( resource $connection_id , int $type , string $qualifier , string $owner , string $table , int $scope , int $nullable)", "odbc_statistics( resource $connection_id , string $qualifier , string $owner , string $table_name , int $unique , int $accuracy)", "odbc_tableprivileges( resource $connection_id , string $qualifier , string $owner , string $name)", "odbc_tables( resource $connection_id [, string $qualifier [, string $owner [, string $name [, string $types ]]]])", "opcache_compile_file( string $file)", "opcache_get_configuration( void)", "opcache_get_status([ boolean $get_scripts = TRUE ])", "opcache_invalidate( string $script [, boolean $force = FALSE ])", "opcache_reset( void)", "openal_buffer_create( void)", "openal_buffer_data( resource $buffer , int $format , string $data , int $freq)", "openal_buffer_destroy( resource $buffer)", "openal_buffer_get( resource $buffer , int $property)", "openal_buffer_loadwav( resource $buffer , string $wavfile)", "openal_context_create( resource $device)", "openal_context_current( resource $context)", "openal_context_destroy( resource $context)", "openal_context_process( resource $context)", "openal_context_suspend( resource $context)", "openal_device_close( resource $device)", "openal_device_open([ string $device_desc ])", "openal_listener_get( int $property)", "openal_listener_set( int $property , mixed $setting)", "openal_source_create( void)", "openal_source_destroy( resource $source)", "openal_source_get( resource $source , int $property)", "openal_source_pause( resource $source)", "openal_source_play( resource $source)", "openal_source_rewind( resource $source)", "openal_source_set( resource $source , int $property , mixed $setting)", "openal_source_stop( resource $source)", "openal_stream( resource $source , int $format , int $rate)", "opendir( string $path [, resource $context ])", "openlog( string $ident , int $option , int $facility)", "openssl_cipher_iv_length( string $method)", "openssl_csr_export_to_file( resource $csr , string $outfilename [, bool $notext = true ])", "openssl_csr_export( resource $csr , string &$out [, bool $notext = true ])", "openssl_csr_get_public_key( mixed $csr [, bool $use_shortnames = true ])", "openssl_csr_get_subject( mixed $csr [, bool $use_shortnames = true ])", "openssl_csr_new( array $dn , resource &$privkey [, array $configargs [, array $extraattribs ]])", "openssl_csr_sign( mixed $csr , mixed $cacert , mixed $priv_key , int $days [, array $configargs [, int $serial = 0 ]])", "openssl_decrypt( string $data , string $method , string $password [, int $options = 0 [, string $iv = &quot;&quot; ]])", "openssl_dh_compute_key( string $pub_key , resource $dh_key)", "openssl_digest( string $data , string $method [, bool $raw_output = false ])", "openssl_encrypt( string $data , string $method , string $password [, int $options = 0 [, string $iv = &quot;&quot; ]])", "openssl_error_string( void)", "openssl_free_key( resource $key_identifier)", "openssl_get_cert_locations( void)", "openssl_get_cipher_methods([ bool $aliases = false ])", "openssl_get_md_methods([ bool $aliases = false ])", "openssl_open( string $sealed_data , string &$open_data , string $env_key , mixed $priv_key_id [, string $method ])", "openssl_pbkdf2( string $password , string $salt , int $key_length , int $iterations [, string $digest_algorithm ])", "openssl_pkcs12_export_to_file( mixed $x509 , string $filename , mixed $priv_key , string $pass [, array $args ])", "openssl_pkcs12_export( mixed $x509 , string &$out , mixed $priv_key , string $pass [, array $args ])", "openssl_pkcs12_read( string $pkcs12 , array &$certs , string $pass)", "openssl_pkcs7_decrypt( string $infilename , string $outfilename , mixed $recipcert [, mixed $recipkey ])", "openssl_pkcs7_encrypt( string $infile , string $outfile , mixed $recipcerts , array $headers [, int $flags = 0 [, int $cipherid = OPENSSL_CIPHER_RC2_40 ]])", "openssl_pkcs7_sign( string $infilename , string $outfilename , mixed $signcert , mixed $privkey , array $headers [, int $flags = PKCS7_DETACHED [, string $extracerts ]])", "openssl_pkcs7_verify( string $filename , int $flags [, string $outfilename [, array $cainfo [, string $extracerts [, string $content ]]]])", "openssl_pkey_export_to_file( mixed $key , string $outfilename [, string $passphrase [, array $configargs ]])", "openssl_pkey_export( mixed $key , string &$out [, string $passphrase [, array $configargs ]])", "openssl_pkey_free( resource $key)", "openssl_pkey_get_details( resource $key)", "openssl_pkey_get_private( mixed $key [, string $passphrase = &quot;&quot; ])", "openssl_pkey_get_public( mixed $certificate)", "openssl_pkey_new([ array $configargs ])", "openssl_private_decrypt( string $data , string &$decrypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ])", "openssl_private_encrypt( string $data , string &$crypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ])", "openssl_public_decrypt( string $data , string &$decrypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ])", "openssl_public_encrypt( string $data , string &$crypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ])", "openssl_random_pseudo_bytes( int $length [, bool &$crypto_strong ])", "openssl_seal( string $data , string &$sealed_data , array &$env_keys , array $pub_key_ids [, string $method ])", "openssl_sign( string $data , string &$signature , mixed $priv_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1 ])", "openssl_spki_export_challenge( string &$spkac)", "openssl_spki_export( string &$spkac)", "openssl_spki_new( resource &$privkey , string &$challenge [, int $algorithm = 0 ])", "openssl_spki_verify( string &$spkac)", "openssl_verify( string $data , string $signature , mixed $pub_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1 ])", "openssl_x509_check_private_key( mixed $cert , mixed $key)", "openssl_x509_checkpurpose( mixed $x509cert , int $purpose [, array $cainfo = array() [, string $untrustedfile ]])", "openssl_x509_export_to_file( mixed $x509 , string $outfilename [, bool $notext = TRUE ])", "openssl_x509_export( mixed $x509 , string &$output [, bool $notext = TRUE ])", "openssl_x509_fingerprint( mixed $x509 [, string $hash_algorithm = &quot;sha1&quot; [, bool $raw_output = FALSE ]])", "openssl_x509_free( resource $x509cert)", "openssl_x509_parse( mixed $x509cert [, bool $shortnames = true ])", "openssl_x509_read( mixed $x509certdata)", "ord( string $string)", "output_add_rewrite_var( string $name , string $value)", "output_reset_rewrite_vars( void)", "override_function( string $function_name , string $function_args , string $function_code)", "pack( string $format [, mixed $args [, mixed $... ]])", "parse_ini_file( string $filename [, bool $process_sections = false [, int $scanner_mode = INI_SCANNER_NORMAL ]])", "parse_ini_string( string $ini [, bool $process_sections = false [, int $scanner_mode = INI_SCANNER_NORMAL ]])", "parse_str( string $str [, array &$arr ])", "parse_url( string $url [, int $component = -1 ])", "parsekit_compile_file( string $filename [, array &$errors [, int $options = PARSEKIT_QUIET ]])", "parsekit_compile_string( string $phpcode [, array &$errors [, int $options = PARSEKIT_QUIET ]])", "parsekit_func_arginfo( mixed $function)", "passthru( string $command [, int &$return_var ])", "password_get_info( string $hash)", "password_hash( string $password , integer $algo [, array $options ])", "password_needs_rehash( string $hash , integer $algo [, array $options ])", "password_verify( string $password , string $hash)", "pathinfo( string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME ])", "pclose( resource $handle)", "pcntl_alarm( int $seconds)", "pcntl_exec( string $path [, array $args [, array $envs ]])", "pcntl_fork( void)", "pcntl_get_last_error( void)", "pcntl_getpriority([ int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS ]])", "pcntl_setpriority( int $priority [, int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS ]])", "pcntl_signal_dispatch( void)", "pcntl_signal( int $signo , callable|int $handler [, bool $restart_syscalls = true ])", "handler( int $signo)", "pcntl_sigprocmask( int $how , array $set [, array &$oldset ])", "pcntl_sigtimedwait( array $set [, array &$siginfo [, int $seconds = 0 [, int $nanoseconds = 0 ]]])", "pcntl_sigwaitinfo( array $set [, array &$siginfo ])", "pcntl_strerror( int $errno)", "pcntl_wait( int &$status [, int $options = 0 ])", "pcntl_waitpid( int $pid , int &$status [, int $options = 0 ])", "pcntl_wexitstatus( int $status)", "pcntl_wifexited( int $status)", "pcntl_wifsignaled( int $status)", "pcntl_wifstopped( int $status)", "pcntl_wstopsig( int $status)", "pcntl_wtermsig( int $status)", "PDF_activate_item( resource $pdfdoc , int $id)", "PDF_add_launchlink( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $filename)", "PDF_add_locallink( resource $pdfdoc , float $lowerleftx , float $lowerlefty , float $upperrightx , float $upperrighty , int $page , string $dest)", "PDF_add_nameddest( resource $pdfdoc , string $name , string $optlist)", "PDF_add_note( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $contents , string $title , string $icon , int $open)", "PDF_add_pdflink( resource $pdfdoc , float $bottom_left_x , float $bottom_left_y , float $up_right_x , float $up_right_y , string $filename , int $page , string $dest)", "PDF_add_table_cell( resource $pdfdoc , int $table , int $column , int $row , string $text , string $optlist)", "PDF_add_textflow( resource $pdfdoc , int $textflow , string $text , string $optlist)", "PDF_add_thumbnail( resource $pdfdoc , int $image)", "PDF_add_weblink( resource $pdfdoc , float $lowerleftx , float $lowerlefty , float $upperrightx , float $upperrighty , string $url)", "PDF_arc( resource $p , float $x , float $y , float $r , float $alpha , float $beta)", "PDF_arcn( resource $p , float $x , float $y , float $r , float $alpha , float $beta)", "PDF_attach_file( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $filename , string $description , string $author , string $mimetype , string $icon)", "PDF_begin_document( resource $pdfdoc , string $filename , string $optlist)", "PDF_begin_font( resource $pdfdoc , string $filename , float $a , float $b , float $c , float $d , float $e , float $f , string $optlist)", "PDF_begin_glyph( resource $pdfdoc , string $glyphname , float $wx , float $llx , float $lly , float $urx , float $ury)", "PDF_begin_item( resource $pdfdoc , string $tag , string $optlist)", "PDF_begin_layer( resource $pdfdoc , int $layer)", "PDF_begin_page_ext( resource $pdfdoc , float $width , float $height , string $optlist)", "PDF_begin_page( resource $pdfdoc , float $width , float $height)", "PDF_begin_pattern( resource $pdfdoc , float $width , float $height , float $xstep , float $ystep , int $painttype)", "PDF_begin_template_ext( resource $pdfdoc , float $width , float $height , string $optlist)", "PDF_begin_template( resource $pdfdoc , float $width , float $height)", "PDF_circle( resource $pdfdoc , float $x , float $y , float $r)", "PDF_clip( resource $p)", "PDF_close_image( resource $p , int $image)", "PDF_close_pdi_page( resource $p , int $page)", "PDF_close_pdi( resource $p , int $doc)", "PDF_close( resource $p)", "PDF_closepath_fill_stroke( resource $p)", "PDF_closepath_stroke( resource $p)", "PDF_closepath( resource $p)", "PDF_concat( resource $p , float $a , float $b , float $c , float $d , float $e , float $f)", "PDF_continue_text( resource $p , string $text)", "PDF_create_3dview( resource $pdfdoc , string $username , string $optlist)", "PDF_create_action( resource $pdfdoc , string $type , string $optlist)", "PDF_create_annotation( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $type , string $optlist)", "PDF_create_bookmark( resource $pdfdoc , string $text , string $optlist)", "PDF_create_field( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $name , string $type , string $optlist)", "PDF_create_fieldgroup( resource $pdfdoc , string $name , string $optlist)", "PDF_create_gstate( resource $pdfdoc , string $optlist)", "PDF_create_pvf( resource $pdfdoc , string $filename , string $data , string $optlist)", "PDF_create_textflow( resource $pdfdoc , string $text , string $optlist)", "PDF_curveto( resource $p , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3)", "PDF_define_layer( resource $pdfdoc , string $name , string $optlist)", "PDF_delete_pvf( resource $pdfdoc , string $filename)", "PDF_delete_table( resource $pdfdoc , int $table , string $optlist)", "PDF_delete_textflow( resource $pdfdoc , int $textflow)", "PDF_delete( resource $pdfdoc)", "PDF_encoding_set_char( resource $pdfdoc , string $encoding , int $slot , string $glyphname , int $uv)", "PDF_end_document( resource $pdfdoc , string $optlist)", "PDF_end_font( resource $pdfdoc)", "PDF_end_glyph( resource $pdfdoc)", "PDF_end_item( resource $pdfdoc , int $id)", "PDF_end_layer( resource $pdfdoc)", "PDF_end_page_ext( resource $pdfdoc , string $optlist)", "PDF_end_page( resource $p)", "PDF_end_pattern( resource $p)", "PDF_end_template( resource $p)", "PDF_endpath( resource $p)", "PDF_fill_imageblock( resource $pdfdoc , int $page , string $blockname , int $image , string $optlist)", "PDF_fill_pdfblock( resource $pdfdoc , int $page , string $blockname , int $contents , string $optlist)", "PDF_fill_stroke( resource $p)", "PDF_fill_textblock( resource $pdfdoc , int $page , string $blockname , string $text , string $optlist)", "PDF_fill( resource $p)", "PDF_findfont( resource $p , string $fontname , string $encoding , int $embed)", "PDF_fit_image( resource $pdfdoc , int $image , float $x , float $y , string $optlist)", "PDF_fit_pdi_page( resource $pdfdoc , int $page , float $x , float $y , string $optlist)", "PDF_fit_table( resource $pdfdoc , int $table , float $llx , float $lly , float $urx , float $ury , string $optlist)", "PDF_fit_textflow( resource $pdfdoc , int $textflow , float $llx , float $lly , float $urx , float $ury , string $optlist)", "PDF_fit_textline( resource $pdfdoc , string $text , float $x , float $y , string $optlist)", "PDF_get_apiname( resource $pdfdoc)", "PDF_get_buffer( resource $p)", "PDF_get_errmsg( resource $pdfdoc)", "PDF_get_errnum( resource $pdfdoc)", "PDF_get_majorversion( void)", "PDF_get_minorversion( void)", "PDF_get_parameter( resource $p , string $key , float $modifier)", "PDF_get_pdi_parameter( resource $p , string $key , int $doc , int $page , int $reserved)", "PDF_get_pdi_value( resource $p , string $key , int $doc , int $page , int $reserved)", "PDF_get_value( resource $p , string $key , float $modifier)", "PDF_info_font( resource $pdfdoc , int $font , string $keyword , string $optlist)", "PDF_info_matchbox( resource $pdfdoc , string $boxname , int $num , string $keyword)", "PDF_info_table( resource $pdfdoc , int $table , string $keyword)", "PDF_info_textflow( resource $pdfdoc , int $textflow , string $keyword)", "PDF_info_textline( resource $pdfdoc , string $text , string $keyword , string $optlist)", "PDF_initgraphics( resource $p)", "PDF_lineto( resource $p , float $x , float $y)", "PDF_load_3ddata( resource $pdfdoc , string $filename , string $optlist)", "PDF_load_font( resource $pdfdoc , string $fontname , string $encoding , string $optlist)", "PDF_load_iccprofile( resource $pdfdoc , string $profilename , string $optlist)", "PDF_load_image( resource $pdfdoc , string $imagetype , string $filename , string $optlist)", "PDF_makespotcolor( resource $p , string $spotname)", "PDF_moveto( resource $p , float $x , float $y)", "PDF_new( void)", "PDF_open_ccitt( resource $pdfdoc , string $filename , int $width , int $height , int $BitReverse , int $k , int $Blackls1)", "PDF_open_file( resource $p , string $filename)", "PDF_open_image_file( resource $p , string $imagetype , string $filename , string $stringparam , int $intparam)", "PDF_open_image( resource $p , string $imagetype , string $source , string $data , int $length , int $width , int $height , int $components , int $bpc , string $params)", "PDF_open_memory_image( resource $p , resource $image)", "PDF_open_pdi_document( resource $p , string $filename , string $optlist)", "PDF_open_pdi_page( resource $p , int $doc , int $pagenumber , string $optlist)", "PDF_open_pdi( resource $pdfdoc , string $filename , string $optlist , int $len)", "PDF_pcos_get_number( resource $p , int $doc , string $path)", "PDF_pcos_get_stream( resource $p , int $doc , string $optlist , string $path)", "PDF_pcos_get_string( resource $p , int $doc , string $path)", "PDF_place_image( resource $pdfdoc , int $image , float $x , float $y , float $scale)", "PDF_place_pdi_page( resource $pdfdoc , int $page , float $x , float $y , float $sx , float $sy)", "PDF_process_pdi( resource $pdfdoc , int $doc , int $page , string $optlist)", "PDF_rect( resource $p , float $x , float $y , float $width , float $height)", "PDF_restore( resource $p)", "PDF_resume_page( resource $pdfdoc , string $optlist)", "PDF_rotate( resource $p , float $phi)", "PDF_save( resource $p)", "PDF_scale( resource $p , float $sx , float $sy)", "PDF_set_border_color( resource $p , float $red , float $green , float $blue)", "PDF_set_border_dash( resource $pdfdoc , float $black , float $white)", "PDF_set_border_style( resource $pdfdoc , string $style , float $width)", "PDF_set_gstate( resource $pdfdoc , int $gstate)", "PDF_set_info( resource $p , string $key , string $value)", "PDF_set_layer_dependency( resource $pdfdoc , string $type , string $optlist)", "PDF_set_parameter( resource $p , string $key , string $value)", "PDF_set_text_pos( resource $p , float $x , float $y)", "PDF_set_value( resource $p , string $key , float $value)", "PDF_setcolor( resource $p , string $fstype , string $colorspace , float $c1 , float $c2 , float $c3 , float $c4)", "PDF_setdash( resource $pdfdoc , float $b , float $w)", "PDF_setdashpattern( resource $pdfdoc , string $optlist)", "PDF_setflat( resource $pdfdoc , float $flatness)", "PDF_setfont( resource $pdfdoc , int $font , float $fontsize)", "PDF_setgray_fill( resource $p , float $g)", "PDF_setgray_stroke( resource $p , float $g)", "PDF_setgray( resource $p , float $g)", "PDF_setlinecap( resource $p , int $linecap)", "PDF_setlinejoin( resource $p , int $value)", "PDF_setlinewidth( resource $p , float $width)", "PDF_setmatrix( resource $p , float $a , float $b , float $c , float $d , float $e , float $f)", "PDF_setmiterlimit( resource $pdfdoc , float $miter)", "PDF_setrgbcolor_fill( resource $p , float $red , float $green , float $blue)", "PDF_setrgbcolor_stroke( resource $p , float $red , float $green , float $blue)", "PDF_setrgbcolor( resource $p , float $red , float $green , float $blue)", "PDF_shading_pattern( resource $pdfdoc , int $shading , string $optlist)", "PDF_shading( resource $pdfdoc , string $shtype , float $x0 , float $y0 , float $x1 , float $y1 , float $c1 , float $c2 , float $c3 , float $c4 , string $optlist)", "PDF_shfill( resource $pdfdoc , int $shading)", "PDF_show_boxed( resource $p , string $text , float $left , float $top , float $width , float $height , string $mode , string $feature)", "PDF_show_xy( resource $p , string $text , float $x , float $y)", "PDF_show( resource $pdfdoc , string $text)", "PDF_skew( resource $p , float $alpha , float $beta)", "PDF_stringwidth( resource $p , string $text , int $font , float $fontsize)", "PDF_stroke( resource $p)", "PDF_suspend_page( resource $pdfdoc , string $optlist)", "PDF_translate( resource $p , float $tx , float $ty)", "PDF_utf16_to_utf8( resource $pdfdoc , string $utf16string)", "PDF_utf32_to_utf16( resource $pdfdoc , string $utf32string , string $ordering)", "PDF_utf8_to_utf16( resource $pdfdoc , string $utf8string , string $ordering)", "pfsockopen( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get(&quot;default_socket_timeout&quot;) ]]]])", "pg_affected_rows( resource $result)", "pg_cancel_query( resource $connection)", "pg_client_encoding([ resource $connection ])", "pg_close([ resource $connection ])", "pg_connect_poll([ resource $connection ])", "pg_connect( string $connection_string [, int $connect_type ])", "pg_connection_busy( resource $connection)", "pg_connection_reset( resource $connection)", "pg_connection_status( resource $connection)", "pg_consume_input( resource $connection)", "pg_convert( resource $connection , string $table_name , array $assoc_array [, int $options = 0 ])", "pg_copy_from( resource $connection , string $table_name , array $rows [, string $delimiter [, string $null_as ]])", "pg_copy_to( resource $connection , string $table_name [, string $delimiter [, string $null_as ]])", "pg_dbname([ resource $connection ])", "pg_delete( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC ])", "pg_end_copy([ resource $connection ])", "pg_escape_bytea([ resource $connection ], string $data)", "pg_escape_identifier([ resource $connection ], string $data)", "pg_escape_literal([ resource $connection ], string $data)", "pg_escape_string([ resource $connection ], string $data)", "pg_execute([ resource $connection ], string $stmtname , array $params)", "pg_fetch_all_columns( resource $result [, int $column = 0 ])", "pg_fetch_all( resource $result)", "pg_fetch_array( resource $result [, int $row [, int $result_type = PGSQL_BOTH ]])", "pg_fetch_assoc( resource $result [, int $row ])", "pg_fetch_object( resource $result [, int $row [, int $result_type = PGSQL_ASSOC ]])", "pg_fetch_object( resource $result [, int $row [, string $class_name [, array $params ]]])", "pg_fetch_result( resource $result , int $row , mixed $field)", "pg_fetch_result( resource $result , mixed $field)", "pg_fetch_row( resource $result [, int $row ])", "pg_field_is_null( resource $result , int $row , mixed $field)", "pg_field_is_null( resource $result , mixed $field)", "pg_field_name( resource $result , int $field_number)", "pg_field_num( resource $result , string $field_name)", "pg_field_prtlen( resource $result , int $row_number , mixed $field_name_or_number)", "pg_field_prtlen( resource $result , mixed $field_name_or_number)", "pg_field_size( resource $result , int $field_number)", "pg_field_table( resource $result , int $field_number [, bool $oid_only = false ])", "pg_field_type_oid( resource $result , int $field_number)", "pg_field_type( resource $result , int $field_number)", "pg_flush( resource $connection)", "pg_free_result( resource $result)", "pg_get_notify( resource $connection [, int $result_type ])", "pg_get_pid( resource $connection)", "pg_get_result([ resource $connection ])", "pg_host([ resource $connection ])", "pg_insert( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC ])", "pg_last_error([ resource $connection ])", "pg_last_notice( resource $connection)", "pg_last_oid( resource $result)", "pg_lo_close( resource $large_object)", "pg_lo_create([ resource $connection [, mixed $object_id ]])", "pg_lo_create( mixed $object_id)", "pg_lo_export([ resource $connection ], int $oid , string $pathname)", "pg_lo_import([ resource $connection ], string $pathname [, mixed $object_id ])", "pg_lo_open( resource $connection , int $oid , string $mode)", "pg_lo_read_all( resource $large_object)", "pg_lo_read( resource $large_object [, int $len = 8192 ])", "pg_lo_seek( resource $large_object , int $offset [, int $whence = PGSQL_SEEK_CUR ])", "pg_lo_tell( resource $large_object)", "pg_lo_truncate( resource $large_object , int $size)", "pg_lo_unlink( resource $connection , int $oid)", "pg_lo_write( resource $large_object , string $data [, int $len ])", "pg_meta_data( resource $connection , string $table_name [, bool $extended ])", "pg_num_fields( resource $result)", "pg_num_rows( resource $result)", "pg_options([ resource $connection ])", "pg_parameter_status([ resource $connection ], string $param_name)", "pg_pconnect( string $connection_string [, int $connect_type ])", "pg_ping([ resource $connection ])", "pg_port([ resource $connection ])", "pg_prepare([ resource $connection ], string $stmtname , string $query)", "pg_put_line([ resource $connection ], string $data)", "pg_query_params([ resource $connection ], string $query , array $params)", "pg_query([ resource $connection ], string $query)", "pg_result_error_field( resource $result , int $fieldcode)", "pg_result_error( resource $result)", "pg_result_seek( resource $result , int $offset)", "pg_result_status( resource $result [, int $type = PGSQL_STATUS_LONG ])", "pg_select( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC ])", "pg_send_execute( resource $connection , string $stmtname , array $params)", "pg_send_prepare( resource $connection , string $stmtname , string $query)", "pg_send_query_params( resource $connection , string $query , array $params)", "pg_send_query( resource $connection , string $query)", "pg_set_client_encoding([ resource $connection ], string $encoding)", "pg_set_error_verbosity([ resource $connection ], int $verbosity)", "pg_socket( resource $connection)", "pg_trace( string $pathname [, string $mode = &quot;w&quot; [, resource $connection ]])", "pg_transaction_status( resource $connection)", "pg_tty([ resource $connection ])", "pg_unescape_bytea( string $data)", "pg_untrace([ resource $connection ])", "pg_update( resource $connection , string $table_name , array $data , array $condition [, int $options = PGSQL_DML_EXEC ])", "pg_version([ resource $connection ])", "php_check_syntax( string $filename [, string &$error_message ])", "php_ini_loaded_file( void)", "php_ini_scanned_files( void)", "php_logo_guid( void)", "php_sapi_name( void)", "php_strip_whitespace( string $filename)", "php_uname([ string $mode = &quot;a&quot; ])", "phpcredits([ int $flag = CREDITS_ALL ])", "phpinfo([ int $what = INFO_ALL ])", "phpversion([ string $extension ])", "pi( void)", "png2wbmp( string $pngname , string $wbmpname , int $dest_height , int $dest_width , int $threshold)", "popen( string $command , string $mode)", "posix_access( string $file [, int $mode = POSIX_F_OK ])", "posix_ctermid( void)", "posix_get_last_error( void)", "posix_getcwd( void)", "posix_getegid( void)", "posix_geteuid( void)", "posix_getgid( void)", "posix_getgrgid( int $gid)", "posix_getgrnam( string $name)", "posix_getgroups( void)", "posix_getlogin( void)", "posix_getpgid( int $pid)", "posix_getpgrp( void)", "posix_getpid( void)", "posix_getppid( void)", "posix_getpwnam( string $username)", "posix_getpwuid( int $uid)", "posix_getrlimit( void)", "posix_getsid( int $pid)", "posix_getuid( void)", "posix_initgroups( string $name , int $base_group_id)", "posix_isatty( mixed $fd)", "posix_kill( int $pid , int $sig)", "posix_mkfifo( string $pathname , int $mode)", "posix_mknod( string $pathname , int $mode [, int $major = 0 [, int $minor = 0 ]])", "posix_setegid( int $gid)", "posix_seteuid( int $uid)", "posix_setgid( int $gid)", "posix_setpgid( int $pid , int $pgid)", "posix_setsid( void)", "posix_setuid( int $uid)", "posix_strerror( int $errno)", "posix_times( void)", "posix_ttyname( mixed $fd)", "posix_uname( void)", "pow( number $base , number $exp)", "preg_filter( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &$count ]])", "preg_grep( string $pattern , array $input [, int $flags = 0 ])", "preg_last_error( void)", "preg_match_all( string $pattern , string $subject [, array &$matches [, int $flags = PREG_PATTERN_ORDER [, int $offset = 0 ]]])", "preg_match( string $pattern , string $subject [, array &$matches [, int $flags = 0 [, int $offset = 0 ]]])", "preg_quote( string $str [, string $delimiter = NULL ])", "preg_replace_callback( mixed $pattern , callable $callback , mixed $subject [, int $limit = -1 [, int &$count ]])", "handler( array $matches)", "preg_replace( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &$count ]])", "preg_split( string $pattern , string $subject [, int $limit = -1 [, int $flags = 0 ]])", "prev( array &$array)", "print_r( mixed $expression [, bool $return = false ])", "print( string $arg)", "printf( string $format [, mixed $args [, mixed $... ]])", "proc_close( resource $process)", "proc_get_status( resource $process)", "proc_nice( int $increment)", "proc_open( string $cmd , array $descriptorspec , array &$pipes [, string $cwd [, array $env [, array $other_options ]]])", "proc_terminate( resource $process [, int $signal = 15 ])", "property_exists( mixed $class , string $property)", "ps_add_bookmark( resource $psdoc , string $text [, int $parent = 0 [, int $open = 0 ]])", "ps_add_launchlink( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $filename)", "ps_add_locallink( resource $psdoc , float $llx , float $lly , float $urx , float $ury , int $page , string $dest)", "ps_add_note( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $contents , string $title , string $icon , int $open)", "ps_add_pdflink( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $filename , int $page , string $dest)", "ps_add_weblink( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $url)", "ps_arc( resource $psdoc , float $x , float $y , float $radius , float $alpha , float $beta)", "ps_arcn( resource $psdoc , float $x , float $y , float $radius , float $alpha , float $beta)", "ps_begin_page( resource $psdoc , float $width , float $height)", "ps_begin_pattern( resource $psdoc , float $width , float $height , float $xstep , float $ystep , int $painttype)", "ps_begin_template( resource $psdoc , float $width , float $height)", "ps_circle( resource $psdoc , float $x , float $y , float $radius)", "ps_clip( resource $psdoc)", "ps_close_image( resource $psdoc , int $imageid)", "ps_close( resource $psdoc)", "ps_closepath_stroke( resource $psdoc)", "ps_closepath( resource $psdoc)", "ps_continue_text( resource $psdoc , string $text)", "ps_curveto( resource $psdoc , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3)", "ps_delete( resource $psdoc)", "ps_end_page( resource $psdoc)", "ps_end_pattern( resource $psdoc)", "ps_end_template( resource $psdoc)", "ps_fill_stroke( resource $psdoc)", "ps_fill( resource $psdoc)", "ps_findfont( resource $psdoc , string $fontname , string $encoding [, bool $embed = false ])", "ps_get_buffer( resource $psdoc)", "ps_get_parameter( resource $psdoc , string $name [, float $modifier ])", "ps_get_value( resource $psdoc , string $name [, float $modifier ])", "ps_hyphenate( resource $psdoc , string $text)", "ps_include_file( resource $psdoc , string $file)", "ps_lineto( resource $psdoc , float $x , float $y)", "ps_makespotcolor( resource $psdoc , string $name [, int $reserved = 0 ])", "ps_moveto( resource $psdoc , float $x , float $y)", "ps_new( void)", "ps_open_file( resource $psdoc [, string $filename ])", "ps_open_image_file( resource $psdoc , string $type , string $filename [, string $stringparam [, int $intparam = 0 ]])", "ps_open_image( resource $psdoc , string $type , string $source , string $data , int $lenght , int $width , int $height , int $components , int $bpc , string $params)", "ps_open_memory_image( resource $psdoc , int $gd)", "ps_place_image( resource $psdoc , int $imageid , float $x , float $y , float $scale)", "ps_rect( resource $psdoc , float $x , float $y , float $width , float $height)", "ps_restore( resource $psdoc)", "ps_rotate( resource $psdoc , float $rot)", "ps_save( resource $psdoc)", "ps_scale( resource $psdoc , float $x , float $y)", "ps_set_border_color( resource $psdoc , float $red , float $green , float $blue)", "ps_set_border_dash( resource $psdoc , float $black , float $white)", "ps_set_border_style( resource $psdoc , string $style , float $width)", "ps_set_info( resource $p , string $key , string $val)", "ps_set_parameter( resource $psdoc , string $name , string $value)", "ps_set_text_pos( resource $psdoc , float $x , float $y)", "ps_set_value( resource $psdoc , string $name , float $value)", "ps_setcolor( resource $psdoc , string $type , string $colorspace , float $c1 , float $c2 , float $c3 , float $c4)", "ps_setdash( resource $psdoc , float $on , float $off)", "ps_setflat( resource $psdoc , float $value)", "ps_setfont( resource $psdoc , int $fontid , float $size)", "ps_setgray( resource $psdoc , float $gray)", "ps_setlinecap( resource $psdoc , int $type)", "ps_setlinejoin( resource $psdoc , int $type)", "ps_setlinewidth( resource $psdoc , float $width)", "ps_setmiterlimit( resource $psdoc , float $value)", "ps_setoverprintmode( resource $psdoc , int $mode)", "ps_setpolydash( resource $psdoc , float $arr)", "ps_shading_pattern( resource $psdoc , int $shadingid , string $optlist)", "ps_shading( resource $psdoc , string $type , float $x0 , float $y0 , float $x1 , float $y1 , float $c1 , float $c2 , float $c3 , float $c4 , string $optlist)", "ps_shfill( resource $psdoc , int $shadingid)", "ps_show_boxed( resource $psdoc , string $text , float $left , float $bottom , float $width , float $height , string $hmode [, string $feature ])", "ps_show_xy( resource $psdoc , string $text , float $x , float $y)", "ps_show_xy2( resource $psdoc , string $text , int $len , float $xcoor , float $ycoor)", "ps_show( resource $psdoc , string $text)", "ps_show2( resource $psdoc , string $text , int $len)", "ps_string_geometry( resource $psdoc , string $text [, int $fontid = 0 [, float $size = 0.0 ]])", "ps_stringwidth( resource $psdoc , string $text [, int $fontid = 0 [, float $size = 0.0 ]])", "ps_stroke( resource $psdoc)", "ps_symbol_name( resource $psdoc , int $ord [, int $fontid = 0 ])", "ps_symbol_width( resource $psdoc , int $ord [, int $fontid = 0 [, float $size = 0.0 ]])", "ps_symbol( resource $psdoc , int $ord)", "ps_translate( resource $psdoc , float $x , float $y)", "pspell_add_to_personal( int $dictionary_link , string $word)", "pspell_add_to_session( int $dictionary_link , string $word)", "pspell_check( int $dictionary_link , string $word)", "pspell_clear_session( int $dictionary_link)", "pspell_config_create( string $language [, string $spelling [, string $jargon [, string $encoding ]]])", "pspell_config_data_dir( int $conf , string $directory)", "pspell_config_dict_dir( int $conf , string $directory)", "pspell_config_ignore( int $dictionary_link , int $n)", "pspell_config_mode( int $dictionary_link , int $mode)", "pspell_config_personal( int $dictionary_link , string $file)", "pspell_config_repl( int $dictionary_link , string $file)", "pspell_config_runtogether( int $dictionary_link , bool $flag)", "pspell_config_save_repl( int $dictionary_link , bool $flag)", "pspell_new_config( int $config)", "pspell_new_personal( string $personal , string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode = 0 ]]]])", "pspell_new( string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode = 0 ]]]])", "pspell_save_wordlist( int $dictionary_link)", "pspell_store_replacement( int $dictionary_link , string $misspelled , string $correct)", "pspell_suggest( int $dictionary_link , string $word)", "putenv( string $setting)", "px_close( resource $pxdoc)", "px_create_fp( resource $pxdoc , resource $file , array $fielddesc)", "px_date2string( resource $pxdoc , int $value , string $format)", "px_delete_record( resource $pxdoc , int $num)", "px_delete( resource $pxdoc)", "px_get_field( resource $pxdoc , int $fieldno)", "px_get_info( resource $pxdoc)", "px_get_parameter( resource $pxdoc , string $name)", "px_get_record( resource $pxdoc , int $num [, int $mode = 0 ])", "px_get_schema( resource $pxdoc [, int $mode = 0 ])", "px_get_value( resource $pxdoc , string $name)", "px_insert_record( resource $pxdoc , array $data)", "px_new( void)", "px_numfields( resource $pxdoc)", "px_numrecords( resource $pxdoc)", "px_open_fp( resource $pxdoc , resource $file)", "px_put_record( resource $pxdoc , array $record [, int $recpos = -1 ])", "px_retrieve_record( resource $pxdoc , int $num [, int $mode = 0 ])", "px_set_blob_file( resource $pxdoc , string $filename)", "px_set_parameter( resource $pxdoc , string $name , string $value)", "px_set_tablename( resource $pxdoc , string $name)", "px_set_targetencoding( resource $pxdoc , string $encoding)", "px_set_value( resource $pxdoc , string $name , float $value)", "px_timestamp2string( resource $pxdoc , float $value , string $format)", "px_update_record( resource $pxdoc , array $data , int $num)", "quoted_printable_decode( string $str)", "quoted_printable_encode( string $str)", "quotemeta( string $str)", "rad2deg( float $number)", "radius_acct_open( void)", "radius_add_server( resource $radius_handle , string $hostname , int $port , string $secret , int $timeout , int $max_tries)", "radius_auth_open( void)", "radius_close( resource $radius_handle)", "radius_config( resource $radius_handle , string $file)", "radius_create_request( resource $radius_handle , int $type)", "radius_cvt_addr( string $data)", "radius_cvt_int( string $data)", "radius_cvt_string( string $data)", "radius_demangle_mppe_key( resource $radius_handle , string $mangled)", "radius_demangle( resource $radius_handle , string $mangled)", "radius_get_attr( resource $radius_handle)", "radius_get_tagged_attr_data( string $data)", "radius_get_tagged_attr_tag( string $data)", "radius_get_vendor_attr( string $data)", "radius_put_addr( resource $radius_handle , int $type , string $addr [, int $options = 0 [, int $tag ]])", "radius_put_attr( resource $radius_handle , int $type , string $value [, int $options = 0 [, int $tag ]])", "radius_put_int( resource $radius_handle , int $type , int $value [, int $options = 0 [, int $tag ]])", "radius_put_string( resource $radius_handle , int $type , string $value [, int $options = 0 [, int $tag ]])", "radius_put_vendor_addr( resource $radius_handle , int $vendor , int $type , string $addr)", "radius_put_vendor_attr( resource $radius_handle , int $vendor , int $type , string $value [, int $options = 0 [, int $tag ]])", "radius_put_vendor_int( resource $radius_handle , int $vendor , int $type , int $value [, int $options = 0 [, int $tag ]])", "radius_put_vendor_string( resource $radius_handle , int $vendor , int $type , string $value [, int $options = 0 [, int $tag ]])", "radius_request_authenticator( resource $radius_handle)", "radius_salt_encrypt_attr( resource $radius_handle , string $data)", "radius_send_request( resource $radius_handle)", "radius_server_secret( resource $radius_handle)", "radius_strerror( resource $radius_handle)", "rand( void)", "rand( int $min , int $max)", "range( mixed $start , mixed $end [, number $step = 1 ])", "rar_wrapper_cache_stats( void)", "rawurldecode( string $str)", "rawurlencode( string $str)", "readdir([ resource $dir_handle ])", "readfile( string $filename [, bool $use_include_path = false [, resource $context ]])", "readgzfile( string $filename [, int $use_include_path = 0 ])", "readline_add_history( string $line)", "readline_callback_handler_install( string $prompt , callable $callback)", "readline_callback_handler_remove( void)", "readline_callback_read_char( void)", "readline_clear_history( void)", "readline_completion_function( callable $function)", "readline_info([ string $varname [, string $newvalue ]])", "readline_list_history( void)", "readline_on_new_line( void)", "readline_read_history([ string $filename ])", "readline_redisplay( void)", "readline_write_history([ string $filename ])", "readline([ string $prompt ])", "readlink( string $path)", "realpath_cache_get( void)", "realpath_cache_size( void)", "realpath( string $path)", "recode_file( string $request , resource $input , resource $output)", "recode_string( string $request , string $string)", "register_shutdown_function( callable $callback [, mixed $parameter [, mixed $... ]])", "register_tick_function( callable $function [, mixed $arg [, mixed $... ]])", "rename_function( string $original_name , string $new_name)", "rename( string $oldname , string $newname [, resource $context ])", "reset( array &$array)", "restore_error_handler( void)", "restore_exception_handler( void)", "restore_include_path( void)", "rewind( resource $handle)", "rewinddir([ resource $dir_handle ])", "rmdir( string $dirname [, resource $context ])", "round( float $val [, int $precision = 0 [, int $mode = PHP_ROUND_HALF_UP ]])", "rpm_close( resource $rpmr)", "rpm_get_tag( resource $rpmr , int $tagnum)", "rpm_is_valid( string $filename)", "rpm_open( string $filename)", "rpm_version( void)", "rrd_create( string $filename , array $options)", "rrd_error( void)", "rrd_fetch( string $filename , array $options)", "rrd_first( string $file [, int $raaindex = 0 ])", "rrd_graph( string $filename , array $options)", "rrd_info( string $filename)", "rrd_last( string $filename)", "rrd_lastupdate( string $filename)", "rrd_restore( string $xml_file , string $rrd_file [, array $options ])", "rrd_tune( string $filename , array $options)", "rrd_update( string $filename , array $options)", "rrd_version( void)", "rrd_xport( array $options)", "rrdc_disconnect( void)", "rsort( array &$array [, int $sort_flags = SORT_REGULAR ])", "rtrim( string $str [, string $character_mask ])", "runkit_class_adopt( string $classname , string $parentname)", "runkit_class_emancipate( string $classname)", "runkit_constant_add( string $constname , mixed $value)", "runkit_constant_redefine( string $constname , mixed $newvalue)", "runkit_constant_remove( string $constname)", "runkit_function_add( string $funcname , string $arglist , string $code)", "runkit_function_copy( string $funcname , string $targetname)", "runkit_function_redefine( string $funcname , string $arglist , string $code)", "runkit_function_remove( string $funcname)", "runkit_function_rename( string $funcname , string $newname)", "runkit_import( string $filename [, int $flags = RUNKIT_IMPORT_CLASS_METHODS ])", "runkit_lint_file( string $filename)", "runkit_lint( string $code)", "runkit_method_add( string $classname , string $methodname , string $args , string $code [, int $flags = RUNKIT_ACC_PUBLIC ])", "runkit_method_copy( string $dClass , string $dMethod , string $sClass [, string $sMethod ])", "runkit_method_redefine( string $classname , string $methodname , string $args , string $code [, int $flags = RUNKIT_ACC_PUBLIC ])", "runkit_method_remove( string $classname , string $methodname)", "runkit_method_rename( string $classname , string $methodname , string $newname)", "runkit_return_value_used( void)", "runkit_sandbox_output_handler( object $sandbox [, mixed $callback ])", "runkit_superglobals( void)", "scandir( string $directory [, int $sorting_order = SCANDIR_SORT_ASCENDING [, resource $context ]])", "sem_acquire( resource $sem_identifier)", "sem_get( int $key [, int $max_acquire = 1 [, int $perm = 0666 [, int $auto_release = 1 ]]])", "sem_release( resource $sem_identifier)", "sem_remove( resource $sem_identifier)", "serialize( mixed $value)", "session_abort( void)", "session_cache_expire([ string $new_cache_expire ])", "session_cache_limiter([ string $cache_limiter ])", "session_decode( string $data)", "session_destroy( void)", "session_encode( void)", "session_get_cookie_params( void)", "session_id([ string $id ])", "session_is_registered( string $name)", "session_module_name([ string $module ])", "session_name([ string $name ])", "session_pgsql_add_error( int $error_level [, string $error_message ])", "session_pgsql_get_error([ bool $with_error_message = false ])", "session_pgsql_get_field( void)", "session_pgsql_reset( void)", "session_pgsql_set_field( string $value)", "session_pgsql_status( void)", "session_regenerate_id([ bool $delete_old_session = false ])", "session_register_shutdown( void)", "session_register( mixed $name [, mixed $... ])", "session_reset( void)", "session_save_path([ string $path ])", "session_set_cookie_params( int $lifetime [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]])", "session_set_save_handler( callable $open , callable $close , callable $read , callable $write , callable $destroy , callable $gc [, callable $create_sid ])", "session_set_save_handler( SessionHandlerInterface $sessionhandler [, bool $register_shutdown = true ])", "session_start( void)", "session_status( void)", "session_unregister( string $name)", "session_unset( void)", "session_write_close( void)", "set_error_handler( callable $error_handler [, int $error_types = E_ALL | E_STRICT ])", "handler( int $errno , string $errstr [, string $errfile [, int $errline [, array $errcontext ]]])", "set_exception_handler( callable $exception_handler)", "handler( Exception $ex)", "set_include_path( string $new_include_path)", "set_magic_quotes_runtime( bool $new_setting)", "set_time_limit( int $seconds)", "setcookie( string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]]]])", "setlocale( int $category , string $locale [, string $... ])", "setlocale( int $category , array $locale)", "setproctitle( string $title)", "setrawcookie( string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]]]])", "setthreadtitle( string $title)", "settype( mixed &$var , string $type)", "sha1_file( string $filename [, bool $raw_output = false ])", "sha1( string $str [, bool $raw_output = false ])", "shell_exec( string $cmd)", "shm_attach( int $key [, int $memsize [, int $perm = 0666 ]])", "shm_detach( resource $shm_identifier)", "shm_get_var( resource $shm_identifier , int $variable_key)", "shm_has_var( resource $shm_identifier , int $variable_key)", "shm_put_var( resource $shm_identifier , int $variable_key , mixed $variable)", "shm_remove_var( resource $shm_identifier , int $variable_key)", "shm_remove( resource $shm_identifier)", "shmop_close( int $shmid)", "shmop_delete( int $shmid)", "shmop_open( int $key , string $flags , int $mode , int $size)", "shmop_read( int $shmid , int $start , int $count)", "shmop_size( int $shmid)", "shmop_write( int $shmid , string $data , int $offset)", "shuffle( array &$array)", "nthmac( string $clent , string $data)", "similar_text( string $first , string $second [, float &$percent ])", "simplexml_import_dom( DOMNode $node [, string $class_name = &quot;SimpleXMLElement&quot; ])", "simplexml_load_file( string $filename [, string $class_name = &quot;SimpleXMLElement&quot; [, int $options = 0 [, string $ns = &quot;&quot; [, bool $is_prefix = false ]]]])", "simplexml_load_string( string $data [, string $class_name = &quot;SimpleXMLElement&quot; [, int $options = 0 [, string $ns = &quot;&quot; [, bool $is_prefix = false ]]]])", "sin( float $arg)", "sinh( float $arg)", "sleep( int $seconds)", "snmp_get_quick_print( void)", "snmp_get_valueretrieval( void)", "snmp_read_mib( string $filename)", "snmp_set_enum_print( int $enum_print)", "snmp_set_oid_numeric_print( int $oid_format)", "snmp_set_oid_output_format( int $oid_format = SNMP_OID_OUTPUT_MODULE)", "snmp_set_quick_print( bool $quick_print)", "snmp_set_valueretrieval( int $method = SNMP_VALUE_LIBRARY)", "snmp2_get( string $host , string $community , string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]])", "snmp2_getnext( string $host , string $community , string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]])", "snmp2_real_walk( string $host , string $community , string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]])", "snmp2_set( string $host , string $community , string $object_id , string $type , string $value [, string $timeout = 1000000 [, string $retries = 5 ]])", "snmp2_walk( string $host , string $community , string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]])", "snmp3_get( string $host , string $sec_name , string $sec_level , string $auth_protocol , string $auth_passphrase , string $priv_protocol , string $priv_passphrase , string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]])", "snmp3_getnext( string $host , string $sec_name , string $sec_level , string $auth_protocol , string $auth_passphrase , string $priv_protocol , string $priv_passphrase , string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]])", "snmp3_real_walk( string $host , string $sec_name , string $sec_level , string $auth_protocol , string $auth_passphrase , string $priv_protocol , string $priv_passphrase , string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]])", "snmp3_set( string $host , string $sec_name , string $sec_level , string $auth_protocol , string $auth_passphrase , string $priv_protocol , string $priv_passphrase , string $object_id , string $type , string $value [, int $timeout = 1000000 [, int $retries = 5 ]])", "snmp3_walk( string $host , string $sec_name , string $sec_level , string $auth_protocol , string $auth_passphrase , string $priv_protocol , string $priv_passphrase , string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]])", "snmpget( string $hostname , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]])", "snmpgetnext( string $host , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]])", "snmprealwalk( string $host , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]])", "snmpset( string $host , string $community , string $object_id , string $type , mixed $value [, int $timeout = 1000000 [, int $retries = 5 ]])", "snmpwalk( string $hostname , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]])", "snmpwalkoid( string $hostname , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]])", "socket_accept( resource $socket)", "socket_bind( resource $socket , string $address [, int $port = 0 ])", "socket_clear_error([ resource $socket ])", "socket_close( resource $socket)", "socket_cmsg_space( int $level , int $type)", "socket_connect( resource $socket , string $address [, int $port = 0 ])", "socket_create_listen( int $port [, int $backlog = 128 ])", "socket_create_pair( int $domain , int $type , int $protocol , array &$fd)", "socket_create( int $domain , int $type , int $protocol)", "socket_get_option( resource $socket , int $level , int $optname)", "socket_getpeername( resource $socket , string &$address [, int &$port ])", "socket_getsockname( resource $socket , string &$addr [, int &$port ])", "socket_import_stream( resource $stream)", "socket_last_error([ resource $socket ])", "socket_listen( resource $socket [, int $backlog = 0 ])", "socket_read( resource $socket , int $length [, int $type = PHP_BINARY_READ ])", "socket_recv( resource $socket , string &$buf , int $len , int $flags)", "socket_recvfrom( resource $socket , string &$buf , int $len , int $flags , string &$name [, int &$port ])", "socket_recvmsg( resource $socket , string $message [, int $flags ])", "socket_select( array &$read , array &$write , array &$except , int $tv_sec [, int $tv_usec = 0 ])", "socket_send( resource $socket , string $buf , int $len , int $flags)", "socket_sendmsg( resource $socket , array $message , int $flags)", "socket_sendto( resource $socket , string $buf , int $len , int $flags , string $addr [, int $port = 0 ])", "socket_set_block( resource $socket)", "socket_set_nonblock( resource $socket)", "socket_set_option( resource $socket , int $level , int $optname , mixed $optval)", "socket_shutdown( resource $socket [, int $how = 2 ])", "socket_strerror( int $errno)", "socket_write( resource $socket , string $buffer [, int $length = 0 ])", "solr_get_version( void)", "sort( array &$array [, int $sort_flags = SORT_REGULAR ])", "soundex( string $str)", "spl_autoload_call( string $class_name)", "spl_autoload_extensions([ string $file_extensions ])", "spl_autoload_functions( void)", "spl_autoload_register([ callable $autoload_function [, bool $throw = true [, bool $prepend = false ]]])", "spl_autoload_unregister( mixed $autoload_function)", "spl_autoload( string $class_name [, string $file_extensions = spl_autoload_extensions() ])", "spl_classes( void)", "spl_object_hash( object $obj)", "split( string $pattern , string $string [, int $limit = -1 ])", "spliti( string $pattern , string $string [, int $limit = -1 ])", "sprintf( string $format [, mixed $args [, mixed $... ]])", "sql_regcase( string $string)", "sqlite_array_query( resource $dbhandle , string $query [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]])", "sqlite_array_query( string $query , resource $dbhandle [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]])", "arrayQuery( string $query [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]])", "sqlite_busy_timeout( resource $dbhandle , int $milliseconds)", "busyTimeout( int $milliseconds)", "sqlite_changes( resource $dbhandle)", "changes( void)", "sqlite_close( resource $dbhandle)", "sqlite_column( resource $result , mixed $index_or_name [, bool $decode_binary = true ])", "column( mixed $index_or_name [, bool $decode_binary = true ])", "column( mixed $index_or_name [, bool $decode_binary = true ])", "sqlite_create_aggregate( resource $dbhandle , string $function_name , callable $step_func , callable $finalize_func [, int $num_args = -1 ])", "createAggregate( string $function_name , callable $step_func , callable $finalize_func [, int $num_args = -1 ])", "sqlite_create_function( resource $dbhandle , string $function_name , callable $callback [, int $num_args = -1 ])", "createFunction( string $function_name , callable $callback [, int $num_args = -1 ])", "sqlite_current( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]])", "current([ int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]])", "current([ int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]])", "sqlite_error_string( int $error_code)", "sqlite_escape_string( string $item)", "sqlite_exec( resource $dbhandle , string $query [, string &$error_msg ])", "sqlite_exec( string $query , resource $dbhandle)", "queryExec( string $query [, string &$error_msg ])", "sqlite_factory( string $filename [, int $mode = 0666 [, string &$error_message ]])", "sqlite_fetch_all( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]])", "fetchAll([ int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]])", "fetchAll([ int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]])", "sqlite_fetch_array( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]])", "fetch([ int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]])", "fetch([ int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]])", "sqlite_fetch_column_types( string $table_name , resource $dbhandle [, int $result_type = SQLITE_ASSOC ])", "fetchColumnTypes( string $table_name [, int $result_type = SQLITE_ASSOC ])", "sqlite_fetch_object( resource $result [, string $class_name [, array $ctor_params [, bool $decode_binary = true ]]])", "fetchObject([ string $class_name [, array $ctor_params [, bool $decode_binary = true ]]])", "fetchObject([ string $class_name [, array $ctor_params [, bool $decode_binary = true ]]])", "sqlite_fetch_single( resource $result [, bool $decode_binary = true ])", "fetchSingle([ bool $decode_binary = true ])", "fetchSingle([ bool $decode_binary = true ])", "sqlite_field_name( resource $result , int $field_index)", "fieldName( int $field_index)", "fieldName( int $field_index)", "sqlite_has_more( resource $result)", "sqlite_has_prev( resource $result)", "hasPrev( void)", "key( void)", "sqlite_last_error( resource $dbhandle)", "lastError( void)", "sqlite_last_insert_rowid( resource $dbhandle)", "lastInsertRowid( void)", "sqlite_libencoding( void)", "sqlite_libversion( void)", "sqlite_next( resource $result)", "next( void)", "next( void)", "sqlite_num_fields( resource $result)", "numFields( void)", "numFields( void)", "sqlite_num_rows( resource $result)", "numRows( void)", "sqlite_open( string $filename [, int $mode = 0666 [, string &$error_message ]])", "sqlite_popen( string $filename [, int $mode = 0666 [, string &$error_message ]])", "sqlite_prev( resource $result)", "prev( void)", "sqlite_query( resource $dbhandle , string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]])", "sqlite_query( string $query , resource $dbhandle [, int $result_type = SQLITE_BOTH [, string &$error_msg ]])", "query( string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]])", "sqlite_rewind( resource $result)", "rewind( void)", "sqlite_seek( resource $result , int $rownum)", "seek( int $rownum)", "sqlite_single_query( resource $db , string $query [, bool $first_row_only [, bool $decode_binary ]])", "singleQuery( string $query [, bool $first_row_only [, bool $decode_binary ]])", "sqlite_udf_decode_binary( string $data)", "sqlite_udf_encode_binary( string $data)", "sqlite_unbuffered_query( resource $dbhandle , string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]])", "sqlite_unbuffered_query( string $query , resource $dbhandle [, int $result_type = SQLITE_BOTH [, string &$error_msg ]])", "unbufferedQuery( string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]])", "sqlite_valid( resource $result)", "valid( void)", "valid( void)", "sqlsrv_begin_transaction( resource $conn)", "sqlsrv_cancel( resource $stmt)", "sqlsrv_client_info( resource $conn)", "sqlsrv_close( resource $conn)", "sqlsrv_commit( resource $conn)", "sqlsrv_configure( string $setting , mixed $value)", "sqlsrv_connect( string $serverName [, array $connectionInfo ])", "sqlsrv_errors([ int $errorsOrWarnings ])", "sqlsrv_execute( resource $stmt)", "sqlsrv_fetch_array( resource $stmt [, int $fetchType [, int $row [, int $offset ]]])", "sqlsrv_fetch_object( resource $stmt [, string $className [, array $ctorParams [, int $row [, int $offset ]]]])", "sqlsrv_fetch( resource $stmt [, int $row [, int $offset ]])", "sqlsrv_field_metadata( resource $stmt)", "sqlsrv_free_stmt( resource $stmt)", "sqlsrv_get_config( string $setting)", "sqlsrv_get_field( resource $stmt , int $fieldIndex [, int $getAsType ])", "sqlsrv_has_rows( resource $stmt)", "sqlsrv_next_result( resource $stmt)", "sqlsrv_num_fields( resource $stmt)", "sqlsrv_num_rows( resource $stmt)", "sqlsrv_prepare( resource $conn , string $sql [, array $params [, array $options ]])", "sqlsrv_query( resource $conn , string $sql [, array $params [, array $options ]])", "sqlsrv_rollback( resource $conn)", "sqlsrv_rows_affected( resource $stmt)", "sqlsrv_send_stream_data( resource $stmt)", "sqlsrv_server_info( resource $conn)", "sqrt( float $arg)", "srand([ int $seed ])", "sscanf( string $str , string $format [, mixed &$... ])", "ssdeep_fuzzy_compare( string $signature1 , string $signature2)", "ssdeep_fuzzy_hash_filename( string $file_name)", "ssdeep_fuzzy_hash( string $to_hash)", "ssh2_auth_agent( resource $session , string $username)", "ssh2_auth_hostbased_file( resource $session , string $username , string $hostname , string $pubkeyfile , string $privkeyfile [, string $passphrase [, string $local_username ]])", "ssh2_auth_none( resource $session , string $username)", "ssh2_auth_password( resource $session , string $username , string $password)", "ssh2_auth_pubkey_file( resource $session , string $username , string $pubkeyfile , string $privkeyfile [, string $passphrase ])", "ssh2_connect( string $host [, int $port = 22 [, array $methods [, array $callbacks ]]])", "ssh2_exec( resource $session , string $command [, string $pty [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS ]]]]])", "ssh2_fetch_stream( resource $channel , int $streamid)", "ssh2_fingerprint( resource $session [, int $flags = SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX ])", "ssh2_methods_negotiated( resource $session)", "ssh2_publickey_add( resource $pkey , string $algoname , string $blob [, bool $overwrite = false [, array $attributes ]])", "ssh2_publickey_init( resource $session)", "ssh2_publickey_list( resource $pkey)", "ssh2_publickey_remove( resource $pkey , string $algoname , string $blob)", "ssh2_scp_recv( resource $session , string $remote_file , string $local_file)", "ssh2_scp_send( resource $session , string $local_file , string $remote_file [, int $create_mode = 0644 ])", "ssh2_sftp_chmod( resource $sftp , string $filename , int $mode)", "ssh2_sftp_lstat( resource $sftp , string $path)", "ssh2_sftp_mkdir( resource $sftp , string $dirname [, int $mode = 0777 [, bool $recursive = false ]])", "ssh2_sftp_readlink( resource $sftp , string $link)", "ssh2_sftp_realpath( resource $sftp , string $filename)", "ssh2_sftp_rename( resource $sftp , string $from , string $to)", "ssh2_sftp_rmdir( resource $sftp , string $dirname)", "ssh2_sftp_stat( resource $sftp , string $path)", "ssh2_sftp_symlink( resource $sftp , string $target , string $link)", "ssh2_sftp_unlink( resource $sftp , string $filename)", "ssh2_sftp( resource $session)", "ssh2_shell( resource $session [, string $term_type = &quot;vanilla&quot; [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS ]]]]])", "ssh2_tunnel( resource $session , string $host , int $port)", "stat( string $filename)", "stats_absolute_deviation( array $a)", "stats_cdf_beta( float $par1 , float $par2 , float $par3 , int $which)", "stats_cdf_binomial( float $par1 , float $par2 , float $par3 , int $which)", "stats_cdf_cauchy( float $par1 , float $par2 , float $par3 , int $which)", "stats_cdf_chisquare( float $par1 , float $par2 , int $which)", "stats_cdf_exponential( float $par1 , float $par2 , int $which)", "stats_cdf_f( float $par1 , float $par2 , float $par3 , int $which)", "stats_cdf_gamma( float $par1 , float $par2 , float $par3 , int $which)", "stats_cdf_laplace( float $par1 , float $par2 , float $par3 , int $which)", "stats_cdf_logistic( float $par1 , float $par2 , float $par3 , int $which)", "stats_cdf_negative_binomial( float $par1 , float $par2 , float $par3 , int $which)", "stats_cdf_noncentral_chisquare( float $par1 , float $par2 , float $par3 , int $which)", "stats_cdf_noncentral_f( float $par1 , float $par2 , float $par3 , float $par4 , int $which)", "stats_cdf_poisson( float $par1 , float $par2 , int $which)", "stats_cdf_t( float $par1 , float $par2 , int $which)", "stats_cdf_uniform( float $par1 , float $par2 , float $par3 , int $which)", "stats_cdf_weibull( float $par1 , float $par2 , float $par3 , int $which)", "stats_covariance( array $a , array $b)", "stats_den_uniform( float $x , float $a , float $b)", "stats_dens_beta( float $x , float $a , float $b)", "stats_dens_cauchy( float $x , float $ave , float $stdev)", "stats_dens_chisquare( float $x , float $dfr)", "stats_dens_exponential( float $x , float $scale)", "stats_dens_f( float $x , float $dfr1 , float $dfr2)", "stats_dens_gamma( float $x , float $shape , float $scale)", "stats_dens_laplace( float $x , float $ave , float $stdev)", "stats_dens_logistic( float $x , float $ave , float $stdev)", "stats_dens_negative_binomial( float $x , float $n , float $pi)", "stats_dens_normal( float $x , float $ave , float $stdev)", "stats_dens_pmf_binomial( float $x , float $n , float $pi)", "stats_dens_pmf_hypergeometric( float $n1 , float $n2 , float $N1 , float $N2)", "stats_dens_pmf_poisson( float $x , float $lb)", "stats_dens_t( float $x , float $dfr)", "stats_dens_weibull( float $x , float $a , float $b)", "stats_harmonic_mean( array $a)", "stats_kurtosis( array $a)", "stats_rand_gen_beta( float $a , float $b)", "stats_rand_gen_chisquare( float $df)", "stats_rand_gen_exponential( float $av)", "stats_rand_gen_f( float $dfn , float $dfd)", "stats_rand_gen_funiform( float $low , float $high)", "stats_rand_gen_gamma( float $a , float $r)", "stats_rand_gen_ibinomial_negative( int $n , float $p)", "stats_rand_gen_ibinomial( int $n , float $pp)", "stats_rand_gen_int( void)", "stats_rand_gen_ipoisson( float $mu)", "stats_rand_gen_iuniform( int $low , int $high)", "stats_rand_gen_noncenral_chisquare( float $df , float $xnonc)", "stats_rand_gen_noncentral_f( float $dfn , float $dfd , float $xnonc)", "stats_rand_gen_noncentral_t( float $df , float $xnonc)", "stats_rand_gen_normal( float $av , float $sd)", "stats_rand_gen_t( float $df)", "stats_rand_get_seeds( void)", "stats_rand_phrase_to_seeds( string $phrase)", "stats_rand_ranf( void)", "stats_rand_setall( int $iseed1 , int $iseed2)", "stats_skew( array $a)", "stats_standard_deviation( array $a [, bool $sample = false ])", "stats_stat_binomial_coef( int $x , int $n)", "stats_stat_correlation( array $arr1 , array $arr2)", "stats_stat_gennch( int $n)", "stats_stat_independent_t( array $arr1 , array $arr2)", "stats_stat_innerproduct( array $arr1 , array $arr2)", "stats_stat_noncentral_t( float $par1 , float $par2 , float $par3 , int $which)", "stats_stat_paired_t( array $arr1 , array $arr2)", "stats_stat_percentile( float $df , float $xnonc)", "stats_stat_powersum( array $arr , float $power)", "stats_variance( array $a [, bool $sample = false ])", "stomp_connect_error( void)", "stomp_version( void)", "str_getcsv( string $input [, string $delimiter = &quot;,&quot; [, string $enclosure = &#039;&quot;&#039; [, string $escape = &quot;\\\\&quot; ]]])", "str_ireplace( mixed $search , mixed $replace , mixed $subject [, int &$count ])", "str_pad( string $input , int $pad_length [, string $pad_string = &quot; &quot; [, int $pad_type = STR_PAD_RIGHT ]])", "str_repeat( string $input , int $multiplier)", "str_replace( mixed $search , mixed $replace , mixed $subject [, int &$count ])", "str_rot13( string $str)", "str_shuffle( string $str)", "str_split( string $string [, int $split_length = 1 ])", "str_word_count( string $string [, int $format = 0 [, string $charlist ]])", "strcasecmp( string $str1 , string $str2)", "strcmp( string $str1 , string $str2)", "strcoll( string $str1 , string $str2)", "strcspn( string $str1 , string $str2 [, int $start [, int $length ]])", "stream_bucket_append( resource $brigade , resource $bucket)", "stream_bucket_make_writeable( resource $brigade)", "stream_bucket_new( resource $stream , string $buffer)", "stream_bucket_prepend( resource $brigade , resource $bucket)", "stream_context_create([ array $options [, array $params ]])", "stream_context_get_default([ array $options ])", "stream_context_get_options( resource $stream_or_context)", "stream_context_get_params( resource $stream_or_context)", "stream_context_set_default( array $options)", "stream_context_set_option( resource $stream_or_context , string $wrapper , string $option , mixed $value)", "stream_context_set_option( resource $stream_or_context , array $options)", "stream_context_set_params( resource $stream_or_context , array $params)", "stream_copy_to_stream( resource $source , resource $dest [, int $maxlength = -1 [, int $offset = 0 ]])", "stream_encoding( resource $stream [, string $encoding ])", "stream_filter_append( resource $stream , string $filtername [, int $read_write [, mixed $params ]])", "stream_filter_prepend( resource $stream , string $filtername [, int $read_write [, mixed $params ]])", "stream_filter_register( string $filtername , string $classname)", "stream_filter_remove( resource $stream_filter)", "stream_get_contents( resource $handle [, int $maxlength = -1 [, int $offset = -1 ]])", "stream_get_filters( void)", "stream_get_line( resource $handle , int $length [, string $ending ])", "stream_get_meta_data( resource $stream)", "stream_get_transports( void)", "stream_get_wrappers( void)", "stream_is_local( mixed $stream_or_url)", "stream_notification_callback( int $notification_code , int $severity , string $message , int $message_code , int $bytes_transferred , int $bytes_max)", "stream_resolve_include_path( string $filename)", "stream_select( array &$read , array &$write , array &$except , int $tv_sec [, int $tv_usec = 0 ])", "stream_set_blocking( resource $stream , int $mode)", "stream_set_chunk_size( resource $fp , int $chunk_size)", "stream_set_read_buffer( resource $stream , int $buffer)", "stream_set_timeout( resource $stream , int $seconds [, int $microseconds = 0 ])", "stream_set_write_buffer( resource $stream , int $buffer)", "stream_socket_accept( resource $server_socket [, float $timeout = ini_get(&quot;default_socket_timeout&quot;) [, string &$peername ]])", "stream_socket_client( string $remote_socket [, int &$errno [, string &$errstr [, float $timeout = ini_get(&quot;default_socket_timeout&quot;) [, int $flags = STREAM_CLIENT_CONNECT [, resource $context ]]]]])", "stream_socket_enable_crypto( resource $stream , bool $enable [, int $crypto_type [, resource $session_stream ]])", "stream_socket_get_name( resource $handle , bool $want_peer)", "stream_socket_pair( int $domain , int $type , int $protocol)", "stream_socket_recvfrom( resource $socket , int $length [, int $flags = 0 [, string &$address ]])", "stream_socket_sendto( resource $socket , string $data [, int $flags = 0 [, string $address ]])", "stream_socket_server( string $local_socket [, int &$errno [, string &$errstr [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, resource $context ]]]])", "stream_socket_shutdown( resource $stream , int $how)", "stream_supports_lock( resource $stream)", "stream_wrapper_register( string $protocol , string $classname [, int $flags = 0 ])", "stream_wrapper_restore( string $protocol)", "stream_wrapper_unregister( string $protocol)", "strftime( string $format [, int $timestamp = time() ])", "strip_tags( string $str [, string $allowable_tags ])", "stripcslashes( string $str)", "stripos( string $haystack , string $needle [, int $offset = 0 ])", "stripslashes( string $str)", "stristr( string $haystack , mixed $needle [, bool $before_needle = false ])", "strlen( string $string)", "strnatcasecmp( string $str1 , string $str2)", "strnatcmp( string $str1 , string $str2)", "strncasecmp( string $str1 , string $str2 , int $len)", "strncmp( string $str1 , string $str2 , int $len)", "strpbrk( string $haystack , string $char_list)", "strpos( string $haystack , mixed $needle [, int $offset = 0 ])", "strptime( string $date , string $format)", "strrchr( string $haystack , mixed $needle)", "strrev( string $string)", "strripos( string $haystack , string $needle [, int $offset = 0 ])", "strrpos( string $haystack , string $needle [, int $offset = 0 ])", "strspn( string $subject , string $mask [, int $start [, int $length ]])", "strstr( string $haystack , mixed $needle [, bool $before_needle = false ])", "strtok( string $str , string $token)", "strtok( string $token)", "strtolower( string $str)", "strtotime( string $time [, int $now = time() ])", "strtoupper( string $string)", "strtr( string $str , string $from , string $to)", "strtr( string $str , array $replace_pairs)", "strval( mixed $var)", "substr_compare( string $main_str , string $str , int $offset [, int $length [, bool $case_insensitivity = false ]])", "substr_count( string $haystack , string $needle [, int $offset = 0 [, int $length ]])", "substr_replace( mixed $string , mixed $replacement , mixed $start [, mixed $length ])", "substr( string $string , int $start [, int $length ])", "svn_add( string $path [, bool $recursive = true [, bool $force = false ]])", "svn_auth_get_parameter( string $key)", "svn_auth_set_parameter( string $key , string $value)", "svn_blame( string $repository_url [, int $revision_no = SVN_REVISION_HEAD ])", "svn_cat( string $repos_url [, int $revision_no ])", "svn_checkout( string $repos , string $targetpath [, int $revision [, int $flags = 0 ]])", "svn_cleanup( string $workingdir)", "svn_client_version( void)", "svn_commit( string $log , array $targets [, bool $recursive = true ])", "svn_delete( string $path [, bool $force = false ])", "svn_diff( string $path1 , int $rev1 , string $path2 , int $rev2)", "svn_export( string $frompath , string $topath [, bool $working_copy = true [, int $revision_no = -1 ]])", "svn_fs_abort_txn( resource $txn)", "svn_fs_apply_text( resource $root , string $path)", "svn_fs_begin_txn2( resource $repos , int $rev)", "svn_fs_change_node_prop( resource $root , string $path , string $name , string $value)", "svn_fs_check_path( resource $fsroot , string $path)", "svn_fs_contents_changed( resource $root1 , string $path1 , resource $root2 , string $path2)", "svn_fs_copy( resource $from_root , string $from_path , resource $to_root , string $to_path)", "svn_fs_delete( resource $root , string $path)", "svn_fs_dir_entries( resource $fsroot , string $path)", "svn_fs_file_contents( resource $fsroot , string $path)", "svn_fs_file_length( resource $fsroot , string $path)", "svn_fs_is_dir( resource $root , string $path)", "svn_fs_is_file( resource $root , string $path)", "svn_fs_make_dir( resource $root , string $path)", "svn_fs_make_file( resource $root , string $path)", "svn_fs_node_created_rev( resource $fsroot , string $path)", "svn_fs_node_prop( resource $fsroot , string $path , string $propname)", "svn_fs_props_changed( resource $root1 , string $path1 , resource $root2 , string $path2)", "svn_fs_revision_prop( resource $fs , int $revnum , string $propname)", "svn_fs_revision_root( resource $fs , int $revnum)", "svn_fs_txn_root( resource $txn)", "svn_fs_youngest_rev( resource $fs)", "svn_import( string $path , string $url , bool $nonrecursive)", "svn_log( string $repos_url [, int $start_revision [, int $end_revision [, int $limit = 0 [, int $flags = SVN_DISCOVER_CHANGED_PATHS | SVN_STOP_ON_COPY ]]]])", "svn_ls( string $repos_url [, int $revision_no = SVN_REVISION_HEAD [, bool $recurse = false [, bool $peg = false ]]])", "svn_mkdir( string $path [, string $log_message ])", "svn_repos_create( string $path [, array $config [, array $fsconfig ]])", "svn_repos_fs_begin_txn_for_commit( resource $repos , int $rev , string $author , string $log_msg)", "svn_repos_fs_commit_txn( resource $txn)", "svn_repos_fs( resource $repos)", "svn_repos_hotcopy( string $repospath , string $destpath , bool $cleanlogs)", "svn_repos_open( string $path)", "svn_repos_recover( string $path)", "svn_revert( string $path [, bool $recursive = false ])", "svn_status( string $path [, int $flags = 0 ])", "svn_update( string $path [, int $revno = SVN_REVISION_HEAD [, bool $recurse = true ]])", "sybase_affected_rows([ resource $link_identifier ])", "sybase_close([ resource $link_identifier ])", "sybase_connect([ string $servername [, string $username [, string $password [, string $charset [, string $appname [, bool $new = false ]]]]]])", "sybase_data_seek( resource $result_identifier , int $row_number)", "sybase_deadlock_retry_count( int $retry_count)", "sybase_fetch_array( resource $result)", "sybase_fetch_assoc( resource $result)", "sybase_fetch_field( resource $result [, int $field_offset = -1 ])", "sybase_fetch_object( resource $result [, mixed $object ])", "sybase_fetch_row( resource $result)", "sybase_field_seek( resource $result , int $field_offset)", "sybase_free_result( resource $result)", "sybase_get_last_message( void)", "sybase_min_client_severity( int $severity)", "sybase_min_error_severity( int $severity)", "sybase_min_message_severity( int $severity)", "sybase_min_server_severity( int $severity)", "sybase_num_fields( resource $result)", "sybase_num_rows( resource $result)", "sybase_pconnect([ string $servername [, string $username [, string $password [, string $charset [, string $appname ]]]]])", "sybase_query( string $query [, resource $link_identifier ])", "sybase_result( resource $result , int $row , mixed $field)", "sybase_select_db( string $database_name [, resource $link_identifier ])", "sybase_set_message_handler( callable $handler [, resource $link_identifier ])", "sybase_unbuffered_query( string $query , resource $link_identifier [, bool $store_result ])", "symlink( string $target , string $link)", "sys_get_temp_dir( void)", "sys_getloadavg( void)", "syslog( int $priority , string $message)", "system( string $command [, int &$return_var ])", "taint( string &$string [, string $... ])", "tan( float $arg)", "tanh( float $arg)", "tcpwrap_check( string $daemon , string $address [, string $user [, bool $nodns = false ]])", "tempnam( string $dir , string $prefix)", "textdomain( string $text_domain)", "tidy_access_count( tidy $object)", "tidy_config_count( tidy $object)", "tidy_error_count( tidy $object)", "tidy_get_output( tidy $object)", "tidy_load_config( string $filename , string $encoding)", "tidy_reset_config( void)", "tidy_save_config( string $filename)", "tidy_set_encoding( string $encoding)", "tidy_setopt( string $option , mixed $value)", "tidy_warning_count( tidy $object)", "time_nanosleep( int $seconds , int $nanoseconds)", "time_sleep_until( float $timestamp)", "time( void)", "timezone_name_from_abbr( string $abbr [, int $gmtOffset = -1 [, int $isdst = -1 ]])", "timezone_version_get( void)", "tmpfile( void)", "token_get_all( string $source)", "token_name( int $token)", "touch( string $filename [, int $time = time() [, int $atime ]])", "trader_acos( array $real)", "trader_ad( array $high , array $low , array $close , array $volume)", "trader_add( array $real0 , array $real1)", "trader_adosc( array $high , array $low , array $close , array $volume [, integer $fastPeriod [, integer $slowPeriod ]])", "trader_adx( array $high , array $low , array $close [, integer $timePeriod ])", "trader_adxr( array $high , array $low , array $close [, integer $timePeriod ])", "trader_apo( array $real [, integer $fastPeriod [, integer $slowPeriod [, integer $mAType ]]])", "trader_aroon( array $high , array $low [, integer $timePeriod ])", "trader_aroonosc( array $high , array $low [, integer $timePeriod ])", "trader_asin( array $real)", "trader_atan( array $real)", "trader_atr( array $high , array $low , array $close [, integer $timePeriod ])", "trader_avgprice( array $open , array $high , array $low , array $close)", "trader_bbands( array $real [, integer $timePeriod [, float $nbDevUp [, float $nbDevDn [, integer $mAType ]]]])", "trader_beta( array $real0 , array $real1 [, integer $timePeriod ])", "trader_bop( array $open , array $high , array $low , array $close)", "trader_cci( array $high , array $low , array $close [, integer $timePeriod ])", "trader_cdl2crows( array $open , array $high , array $low , array $close)", "trader_cdl3blackcrows( array $open , array $high , array $low , array $close)", "trader_cdl3inside( array $open , array $high , array $low , array $close)", "trader_cdl3linestrike( array $open , array $high , array $low , array $close)", "trader_cdl3outside( array $open , array $high , array $low , array $close)", "trader_cdl3starsinsouth( array $open , array $high , array $low , array $close)", "trader_cdl3whitesoldiers( array $open , array $high , array $low , array $close)", "trader_cdlabandonedbaby( array $open , array $high , array $low , array $close [, float $penetration ])", "trader_cdladvanceblock( array $open , array $high , array $low , array $close)", "trader_cdlbelthold( array $open , array $high , array $low , array $close)", "trader_cdlbreakaway( array $open , array $high , array $low , array $close)", "trader_cdlclosingmarubozu( array $open , array $high , array $low , array $close)", "trader_cdlconcealbabyswall( array $open , array $high , array $low , array $close)", "trader_cdlcounterattack( array $open , array $high , array $low , array $close)", "trader_cdldarkcloudcover( array $open , array $high , array $low , array $close [, float $penetration ])", "trader_cdldoji( array $open , array $high , array $low , array $close)", "trader_cdldojistar( array $open , array $high , array $low , array $close)", "trader_cdldragonflydoji( array $open , array $high , array $low , array $close)", "trader_cdlengulfing( array $open , array $high , array $low , array $close)", "trader_cdleveningdojistar( array $open , array $high , array $low , array $close [, float $penetration ])", "trader_cdleveningstar( array $open , array $high , array $low , array $close [, float $penetration ])", "trader_cdlgapsidesidewhite( array $open , array $high , array $low , array $close)", "trader_cdlgravestonedoji( array $open , array $high , array $low , array $close)", "trader_cdlhammer( array $open , array $high , array $low , array $close)", "trader_cdlhangingman( array $open , array $high , array $low , array $close)", "trader_cdlharami( array $open , array $high , array $low , array $close)", "trader_cdlharamicross( array $open , array $high , array $low , array $close)", "trader_cdlhighwave( array $open , array $high , array $low , array $close)", "trader_cdlhikkake( array $open , array $high , array $low , array $close)", "trader_cdlhikkakemod( array $open , array $high , array $low , array $close)", "trader_cdlhomingpigeon( array $open , array $high , array $low , array $close)", "trader_cdlidentical3crows( array $open , array $high , array $low , array $close)", "trader_cdlinneck( array $open , array $high , array $low , array $close)", "trader_cdlinvertedhammer( array $open , array $high , array $low , array $close)", "trader_cdlkicking( array $open , array $high , array $low , array $close)", "trader_cdlkickingbylength( array $open , array $high , array $low , array $close)", "trader_cdlladderbottom( array $open , array $high , array $low , array $close)", "trader_cdllongleggeddoji( array $open , array $high , array $low , array $close)", "trader_cdllongline( array $open , array $high , array $low , array $close)", "trader_cdlmarubozu( array $open , array $high , array $low , array $close)", "trader_cdlmatchinglow( array $open , array $high , array $low , array $close)", "trader_cdlmathold( array $open , array $high , array $low , array $close [, float $penetration ])", "trader_cdlmorningdojistar( array $open , array $high , array $low , array $close [, float $penetration ])", "trader_cdlmorningstar( array $open , array $high , array $low , array $close [, float $penetration ])", "trader_cdlonneck( array $open , array $high , array $low , array $close)", "trader_cdlpiercing( array $open , array $high , array $low , array $close)", "trader_cdlrickshawman( array $open , array $high , array $low , array $close)", "trader_cdlrisefall3methods( array $open , array $high , array $low , array $close)", "trader_cdlseparatinglines( array $open , array $high , array $low , array $close)", "trader_cdlshootingstar( array $open , array $high , array $low , array $close)", "trader_cdlshortline( array $open , array $high , array $low , array $close)", "trader_cdlspinningtop( array $open , array $high , array $low , array $close)", "trader_cdlstalledpattern( array $open , array $high , array $low , array $close)", "trader_cdlsticksandwich( array $open , array $high , array $low , array $close)", "trader_cdltakuri( array $open , array $high , array $low , array $close)", "trader_cdltasukigap( array $open , array $high , array $low , array $close)", "trader_cdlthrusting( array $open , array $high , array $low , array $close)", "trader_cdltristar( array $open , array $high , array $low , array $close)", "trader_cdlunique3river( array $open , array $high , array $low , array $close)", "trader_cdlupsidegap2crows( array $open , array $high , array $low , array $close)", "trader_cdlxsidegap3methods( array $open , array $high , array $low , array $close)", "trader_ceil( array $real)", "trader_cmo( array $real [, integer $timePeriod ])", "trader_correl( array $real0 , array $real1 [, integer $timePeriod ])", "trader_cos( array $real)", "trader_cosh( array $real)", "trader_dema( array $real [, integer $timePeriod ])", "trader_div( array $real0 , array $real1)", "trader_dx( array $high , array $low , array $close [, integer $timePeriod ])", "trader_ema( array $real [, integer $timePeriod ])", "trader_errno( void)", "trader_exp( array $real)", "trader_floor( array $real)", "trader_get_compat( void)", "trader_get_unstable_period( integer $functionId)", "trader_ht_dcperiod( array $real)", "trader_ht_dcphase( array $real)", "trader_ht_phasor( array $real)", "trader_ht_sine( array $real)", "trader_ht_trendline( array $real)", "trader_ht_trendmode( array $real)", "trader_kama( array $real [, integer $timePeriod ])", "trader_linearreg_angle( array $real [, integer $timePeriod ])", "trader_linearreg_intercept( array $real [, integer $timePeriod ])", "trader_linearreg_slope( array $real [, integer $timePeriod ])", "trader_linearreg( array $real [, integer $timePeriod ])", "trader_ln( array $real)", "trader_log10( array $real)", "trader_ma( array $real [, integer $timePeriod [, integer $mAType ]])", "trader_macd( array $real [, integer $fastPeriod [, integer $slowPeriod [, integer $signalPeriod ]]])", "trader_macdext( array $real [, integer $fastPeriod [, integer $fastMAType [, integer $slowPeriod [, integer $slowMAType [, integer $signalPeriod [, integer $signalMAType ]]]]]])", "trader_macdfix( array $real [, integer $signalPeriod ])", "trader_mama( array $real [, float $fastLimit [, float $slowLimit ]])", "trader_mavp( array $real , array $periods [, integer $minPeriod [, integer $maxPeriod [, integer $mAType ]]])", "trader_max( array $real [, integer $timePeriod ])", "trader_maxindex( array $real [, integer $timePeriod ])", "trader_medprice( array $high , array $low)", "trader_mfi( array $high , array $low , array $close , array $volume [, integer $timePeriod ])", "trader_midpoint( array $real [, integer $timePeriod ])", "trader_midprice( array $high , array $low [, integer $timePeriod ])", "trader_min( array $real [, integer $timePeriod ])", "trader_minindex( array $real [, integer $timePeriod ])", "trader_minmax( array $real [, integer $timePeriod ])", "trader_minmaxindex( array $real [, integer $timePeriod ])", "trader_minus_di( array $high , array $low , array $close [, integer $timePeriod ])", "trader_minus_dm( array $high , array $low [, integer $timePeriod ])", "trader_mom( array $real [, integer $timePeriod ])", "trader_mult( array $real0 , array $real1)", "trader_natr( array $high , array $low , array $close [, integer $timePeriod ])", "trader_obv( array $real , array $volume)", "trader_plus_di( array $high , array $low , array $close [, integer $timePeriod ])", "trader_plus_dm( array $high , array $low [, integer $timePeriod ])", "trader_ppo( array $real [, integer $fastPeriod [, integer $slowPeriod [, integer $mAType ]]])", "trader_roc( array $real [, integer $timePeriod ])", "trader_rocp( array $real [, integer $timePeriod ])", "trader_rocr( array $real [, integer $timePeriod ])", "trader_rocr100( array $real [, integer $timePeriod ])", "trader_rsi( array $real [, integer $timePeriod ])", "trader_sar( array $high , array $low [, float $acceleration [, float $maximum ]])", "trader_sarext( array $high , array $low [, float $startValue [, float $offsetOnReverse [, float $accelerationInitLong [, float $accelerationLong [, float $accelerationMaxLong [, float $accelerationInitShort [, float $accelerationShort [, float $accelerationMaxShort ]]]]]]]])", "trader_set_compat( integer $compatId)", "trader_set_unstable_period( integer $functionId , integer $timePeriod)", "trader_sin( array $real)", "trader_sinh( array $real)", "trader_sma( array $real [, integer $timePeriod ])", "trader_sqrt( array $real)", "trader_stddev( array $real [, integer $timePeriod [, float $nbDev ]])", "trader_stoch( array $high , array $low , array $close [, integer $fastK_Period [, integer $slowK_Period [, integer $slowK_MAType [, integer $slowD_Period [, integer $slowD_MAType ]]]]])", "trader_stochf( array $high , array $low , array $close [, integer $fastK_Period [, integer $fastD_Period [, integer $fastD_MAType ]]])", "trader_stochrsi( array $real [, integer $timePeriod [, integer $fastK_Period [, integer $fastD_Period [, integer $fastD_MAType ]]]])", "trader_sub( array $real0 , array $real1)", "trader_sum( array $real [, integer $timePeriod ])", "trader_t3( array $real [, integer $timePeriod [, float $vFactor ]])", "trader_tan( array $real)", "trader_tanh( array $real)", "trader_tema( array $real [, integer $timePeriod ])", "trader_trange( array $high , array $low , array $close)", "trader_trima( array $real [, integer $timePeriod ])", "trader_trix( array $real [, integer $timePeriod ])", "trader_tsf( array $real [, integer $timePeriod ])", "trader_typprice( array $high , array $low , array $close)", "trader_ultosc( array $high , array $low , array $close [, integer $timePeriod1 [, integer $timePeriod2 [, integer $timePeriod3 ]]])", "trader_var( array $real [, integer $timePeriod [, float $nbDev ]])", "trader_wclprice( array $high , array $low , array $close)", "trader_willr( array $high , array $low , array $close [, integer $timePeriod ])", "trader_wma( array $real [, integer $timePeriod ])", "trait_exists( string $traitname [, bool $autoload ])", "trigger_error( string $error_msg [, int $error_type = E_USER_NOTICE ])", "trim( string $str [, string $character_mask = &quot; \\t\\n\\r\\0\\x0B&quot; ])", "uasort( array &$array , callable $value_compare_func)", "ucfirst( string $str)", "ucwords( string $str)", "udm_add_search_limit( resource $agent , int $var , string $val)", "udm_alloc_agent_array( array $databases)", "udm_alloc_agent( string $dbaddr [, string $dbmode ])", "udm_api_version( void)", "udm_cat_list( resource $agent , string $category)", "udm_cat_path( resource $agent , string $category)", "udm_check_charset( resource $agent , string $charset)", "udm_clear_search_limits( resource $agent)", "udm_crc32( resource $agent , string $str)", "udm_errno( resource $agent)", "udm_error( resource $agent)", "udm_find( resource $agent , string $query)", "udm_free_agent( resource $agent)", "udm_free_ispell_data( int $agent)", "udm_free_res( resource $res)", "udm_get_doc_count( resource $agent)", "udm_get_res_field( resource $res , int $row , int $field)", "udm_get_res_param( resource $res , int $param)", "udm_hash32( resource $agent , string $str)", "udm_load_ispell_data( resource $agent , int $var , string $val1 , string $val2 , int $flag)", "udm_set_agent_param( resource $agent , int $var , string $val)", "uksort( array &$array , callable $key_compare_func)", "", "umask([ int $mask ])", "uniqid([ string $prefix = &quot;&quot; [, bool $more_entropy = false ]])", "unixtojd([ int $timestamp = time() ])", "unlink( string $filename [, resource $context ])", "unpack( string $format , string $data)", "unregister_tick_function( string $function_name)", "unserialize( string $str)", "unset( mixed $var [, mixed $... ])", "untaint( string &$string [, string $... ])", "uopz_backup( string $class , string $function)", "uopz_backup( string $function)", "uopz_compose( string $name , array $classes [, array $methods [, array $properties [, int $flags ]]])", "uopz_copy( string $class , string $function)", "uopz_copy( string $function)", "uopz_delete( string $class , string $function)", "uopz_delete( string $function)", "uopz_extend( string $class , string $parent)", "uopz_flags( string $class , string $function , int $flags)", "uopz_flags( string $function , int $flags)", "uopz_function( string $class , string $function , Closure $handler [, int $modifiers ])", "uopz_function( string $function , Closure $handler [, int $modifiers ])", "uopz_implement( string $class , string $interface)", "uopz_overload( int $opcode , Callable $callable)", "uopz_redefine( string $class , string $constant , mixed $value)", "uopz_redefine( string $constant , mixed $value)", "uopz_rename( string $class , string $function , string $rename)", "uopz_rename( string $function , string $rename)", "uopz_restore( string $class , string $function)", "uopz_restore( string $function)", "uopz_undefine( string $class , string $constant)", "uopz_undefine( string $constant)", "urldecode( string $str)", "urlencode( string $str)", "use_soap_error_handler([ bool $handler = true ])", "usleep( int $micro_seconds)", "usort( array &$array , callable $value_compare_func)", "Precauci\u00f3n La devoluci\u00f3n de valores que no sean de tipo integer por parte de la funci\u00f3n de comparaci\u00f3n, como float, resultar\u00e1 en una conversi\u00f3n interna a integer del valor devuelto por la llamada de retorno. As\u00ed, valores como 0.99 y 0.1 ser\u00e1n convertidos al valor de tipo integer 0, lo cual har\u00e1 que la comparaci\u00f3n de tales valores sea igual.", "utf8_decode( string $data)", "utf8_encode( string $data)", "var_dump( mixed $expression [, mixed $... ])", "var_export( mixed $expression [, bool $return = false ])", "variant_abs( mixed $val)", "variant_add( mixed $left , mixed $right)", "variant_and( mixed $left , mixed $right)", "variant_cast( variant $variant , int $type)", "variant_cat( mixed $left , mixed $right)", "variant_cmp( mixed $left , mixed $right [, int $lcid [, int $flags ]])", "variant_date_from_timestamp( int $timestamp)", "variant_date_to_timestamp( variant $variant)", "variant_div( mixed $left , mixed $right)", "variant_eqv( mixed $left , mixed $right)", "variant_fix( mixed $variant)", "variant_get_type( variant $variant)", "variant_idiv( mixed $left , mixed $right)", "variant_imp( mixed $left , mixed $right)", "variant_int( mixed $variant)", "variant_mod( mixed $left , mixed $right)", "variant_mul( mixed $left , mixed $right)", "variant_neg( mixed $variant)", "variant_not( mixed $variant)", "variant_or( mixed $left , mixed $right)", "variant_pow( mixed $left , mixed $right)", "variant_round( mixed $variant , int $decimals)", "variant_set_type( variant $variant , int $type)", "variant_set( variant $variant , mixed $value)", "variant_sub( mixed $left , mixed $right)", "variant_xor( mixed $left , mixed $right)", "version_compare( string $version1 , string $version2 [, string $operator ])", "vfprintf( resource $handle , string $format , array $args)", "virtual( string $filename)", "vpopmail_add_alias_domain_ex( string $olddomain , string $newdomain)", "vpopmail_add_alias_domain( string $domain , string $aliasdomain)", "vpopmail_add_domain_ex( string $domain , string $passwd [, string $quota [, string $bounce [, bool $apop ]]])", "vpopmail_add_domain( string $domain , string $dir , int $uid , int $gid)", "vpopmail_add_user( string $user , string $domain , string $password [, string $gecos [, bool $apop ]])", "vpopmail_alias_add( string $user , string $domain , string $alias)", "vpopmail_alias_del_domain( string $domain)", "vpopmail_alias_del( string $user , string $domain)", "vpopmail_alias_get_all( string $domain)", "vpopmail_alias_get( string $alias , string $domain)", "vpopmail_auth_user( string $user , string $domain , string $password [, string $apop ])", "vpopmail_del_domain_ex( string $domain)", "vpopmail_del_domain( string $domain)", "vpopmail_del_user( string $user , string $domain)", "vpopmail_error( void)", "vpopmail_passwd( string $user , string $domain , string $password [, bool $apop ])", "vpopmail_set_user_quota( string $user , string $domain , string $quota)", "vprintf( string $format , array $args)", "vsprintf( string $format , array $args)", "wddx_add_vars( resource $packet_id , mixed $var_name [, mixed $... ])", "wddx_deserialize( string $packet)", "wddx_packet_end( resource $packet_id)", "wddx_packet_start([ string $comment ])", "wddx_serialize_value( mixed $var [, string $comment ])", "wddx_serialize_vars( mixed $var_name [, mixed $... ])", "win32_continue_service( string $servicename [, string $machine ])", "win32_create_service( array $details [, string $machine ])", "win32_delete_service( string $servicename [, string $machine ])", "win32_get_last_control_message( void)", "win32_pause_service( string $servicename [, string $machine ])", "win32_ps_list_procs( void)", "win32_ps_stat_mem( void)", "win32_ps_stat_proc([ int $pid = 0 ])", "win32_query_service_status( string $servicename [, string $machine ])", "win32_set_service_status( int $status [, int $checkpoint = 0 ])", "win32_start_service_ctrl_dispatcher( string $name)", "win32_start_service( string $servicename [, string $machine ])", "win32_stop_service( string $servicename [, string $machine ])", "wincache_fcache_fileinfo([ bool $summaryonly = false ])", "wincache_fcache_meminfo( void)", "wincache_lock( string $key [, bool $isglobal = false ])", "wincache_ocache_fileinfo([ bool $summaryonly = false ])", "wincache_ocache_meminfo( void)", "wincache_refresh_if_changed([ array $files ])", "wincache_rplist_fileinfo([ bool $summaryonly = false ])", "wincache_rplist_meminfo( void)", "wincache_scache_info([ bool $summaryonly = false ])", "wincache_scache_meminfo( void)", "wincache_ucache_add( string $key , mixed $value [, int $ttl = 0 ])", "wincache_ucache_add( array $values [, mixed $unused [, int $ttl = 0 ]])", "wincache_ucache_cas( string $key , int $old_value , int $new_value)", "wincache_ucache_clear( void)", "wincache_ucache_dec( string $key [, int $dec_by = 1 [, bool &$success ]])", "wincache_ucache_delete( mixed $key)", "wincache_ucache_exists( string $key)", "wincache_ucache_get( mixed $key [, bool &$success ])", "wincache_ucache_inc( string $key [, int $inc_by = 1 [, bool &$success ]])", "wincache_ucache_info([ bool $summaryonly = false [, string $key ]])", "wincache_ucache_meminfo( void)", "wincache_ucache_set( mixed $key , mixed $value [, int $ttl = 0 ])", "wincache_ucache_set( array $values [, mixed $unused [, int $ttl = 0 ]])", "wincache_unlock( string $key)", "wordwrap( string $str [, int $width = 75 [, string $break = &quot;\\n&quot; [, bool $cut = false ]]])", "xattr_get( string $filename , string $name [, int $flags = 0 ])", "xattr_list( string $filename [, int $flags = 0 ])", "xattr_remove( string $filename , string $name [, int $flags = 0 ])", "xattr_set( string $filename , string $name , string $value [, int $flags = 0 ])", "xattr_supported( string $filename [, int $flags = 0 ])", "xdiff_file_bdiff_size( string $file)", "xdiff_file_bdiff( string $old_file , string $new_file , string $dest)", "xdiff_file_bpatch( string $file , string $patch , string $dest)", "xdiff_file_diff_binary( string $old_file , string $new_file , string $dest)", "xdiff_file_diff( string $old_file , string $new_file , string $dest [, int $context = 3 [, bool $minimal = false ]])", "xdiff_file_merge3( string $old_file , string $new_file1 , string $new_file2 , string $dest)", "xdiff_file_patch_binary( string $file , string $patch , string $dest)", "xdiff_file_patch( string $file , string $patch , string $dest [, int $flags = DIFF_PATCH_NORMAL ])", "xdiff_file_rabdiff( string $old_file , string $new_file , string $dest)", "xdiff_string_bdiff_size( string $patch)", "xdiff_string_bdiff( string $old_data , string $new_data)", "xdiff_string_bpatch( string $str , string $patch)", "xdiff_string_bdiff( string $old_data , string $new_data)", "xdiff_string_diff( string $old_data , string $new_data [, int $context = 3 [, bool $minimal = false ]])", "xdiff_string_merge3( string $old_data , string $new_data1 , string $new_data2 [, string &$error ])", "xdiff_string_patch_binary( string $str , string $patch)", "xdiff_string_patch( string $str , string $patch [, int $flags [, string &$error ]])", "xdiff_string_bdiff( string $old_data , string $new_data)", "xhprof_disable( void)", "xhprof_enable([ int $flags = 0 [, array $options ]])", "xhprof_sample_disable( void)", "xhprof_sample_enable( void)", "xml_error_string( int $code)", "xml_get_current_byte_index( resource $parser)", "xml_get_current_column_number( resource $parser)", "xml_get_current_line_number( resource $parser)", "xml_get_error_code( resource $parser)", "xml_parse_into_struct( resource $parser , string $data , array &$values [, array &$index ])", "xml_parse( resource $parser , string $data [, bool $is_final = false ])", "xml_parser_create_ns([ string $encoding [, string $separator = &quot;:&quot; ]])", "xml_parser_create([ string $encoding ])", "xml_parser_free( resource $parser)", "xml_parser_get_option( resource $parser , int $option)", "xml_parser_set_option( resource $parser , int $option , mixed $value)", "xml_set_character_data_handler( resource $parser , callable $handler)", "handler( resource $parser , string $data)", "xml_set_default_handler( resource $parser , callable $handler)", "handler( resource $parser , string $data)", "xml_set_element_handler( resource $parser , callable $start_element_handler , callable $end_element_handler)", "start_element_handler( resource $parser , string $name , array $attribs)", "end_element_handler( resource $parser , string $name)", "xml_set_end_namespace_decl_handler( resource $parser , callable $handler)", "handler( resource $parser , string $prefix)", "xml_set_external_entity_ref_handler( resource $parser , callable $handler)", "handler( resource $parser , string $open_entity_names , string $base , string $system_id , string $public_id)", "xml_set_notation_decl_handler( resource $parser , callable $handler)", "handler( resource $parser , string $notation_name , string $base , string $system_id , string $public_id)", "xml_set_object( resource $parser , object &$object)", "xml_set_processing_instruction_handler( resource $parser , callable $handler)", "handler( resource $parser , string $target , string $data)", "xml_set_start_namespace_decl_handler( resource $parser , callable $handler)", "handler( resource $parser , string $prefix , string $uri)", "xml_set_unparsed_entity_decl_handler( resource $parser , callable $handler)", "handler( resource $parser , string $entity_name , string $base , string $system_id , string $public_id , string $notation_name)", "xmlrpc_decode_request( string $xml , string &$method [, string $encoding ])", "xmlrpc_decode( string $xml [, string $encoding = &quot;iso-8859-1&quot; ])", "xmlrpc_encode_request( string $method , mixed $params [, array $output_options ])", "xmlrpc_encode( mixed $value)", "xmlrpc_get_type( mixed $value)", "xmlrpc_is_fault( array $arg)", "xmlrpc_parse_method_descriptions( string $xml)", "xmlrpc_server_add_introspection_data( resource $server , array $desc)", "xmlrpc_server_call_method( resource $server , string $xml , mixed $user_data [, array $output_options ])", "xmlrpc_server_create( void)", "xmlrpc_server_destroy( resource $server)", "xmlrpc_server_register_introspection_callback( resource $server , string $function)", "xmlrpc_server_register_method( resource $server , string $method_name , string $function)", "xmlrpc_set_type( string &$value , string $type)", "endAttribute( void)", "xmlwriter_end_attribute( resource $xmlwriter)", "endCData( void)", "xmlwriter_end_cdata( resource $xmlwriter)", "endComment( void)", "xmlwriter_end_comment( resource $xmlwriter)", "endDocument( void)", "xmlwriter_end_document( resource $xmlwriter)", "endDTDAttlist( void)", "xmlwriter_end_dtd_attlist( resource $xmlwriter)", "endDTDElement( void)", "xmlwriter_end_dtd_element( resource $xmlwriter)", "endDTDEntity( void)", "xmlwriter_end_dtd_entity( resource $xmlwriter)", "endDTD( void)", "xmlwriter_end_dtd( resource $xmlwriter)", "endElement( void)", "xmlwriter_end_element( resource $xmlwriter)", "endPI( void)", "xmlwriter_end_pi( resource $xmlwriter)", "flush([ bool $empty = true ])", "xmlwriter_flush( resource $xmlwriter [, bool $empty = true ])", "fullEndElement( void)", "xmlwriter_full_end_element( resource $xmlwriter)", "openMemory( void)", "xmlwriter_open_memory( void)", "openURI( string $uri)", "xmlwriter_open_uri( string $uri)", "outputMemory([ bool $flush = true ])", "xmlwriter_output_memory( resource $xmlwriter [, bool $flush = true ])", "setIndentString( string $indentString)", "xmlwriter_set_indent_string( resource $xmlwriter , string $indentString)", "setIndent( bool $indent)", "xmlwriter_set_indent( resource $xmlwriter , bool $indent)", "startAttributeNS( string $prefix , string $name , string $uri)", "xmlwriter_start_attribute_ns( resource $xmlwriter , string $prefix , string $name , string $uri)", "startAttribute( string $name)", "xmlwriter_start_attribute( resource $xmlwriter , string $name)", "startCData( void)", "xmlwriter_start_cdata( resource $xmlwriter)", "startComment( void)", "xmlwriter_start_comment( resource $xmlwriter)", "startDocument([ string $version = 1.0 [, string $encoding = NULL [, string $standalone ]]])", "xmlwriter_start_document( resource $xmlwriter [, string $version = 1.0 [, string $encoding = NULL [, string $standalone ]]])", "startDTDAttlist( string $name)", "xmlwriter_start_dtd_attlist( resource $xmlwriter , string $name)", "startDTDElement( string $qualifiedName)", "xmlwriter_start_dtd_element( resource $xmlwriter , string $qualifiedName)", "startDTDEntity( string $name , bool $isparam)", "xmlwriter_start_dtd_entity( resource $xmlwriter , string $name , bool $isparam)", "startDTD( string $qualifiedName [, string $publicId [, string $systemId ]])", "xmlwriter_start_dtd( resource $xmlwriter , string $qualifiedName [, string $publicId [, string $systemId ]])", "startElementNS( string $prefix , string $name , string $uri)", "xmlwriter_start_element_ns( resource $xmlwriter , string $prefix , string $name , string $uri)", "startElement( string $name)", "xmlwriter_start_element( resource $xmlwriter , string $name)", "startPI( string $target)", "xmlwriter_start_pi( resource $xmlwriter , string $target)", "text( string $content)", "xmlwriter_text( resource $xmlwriter , string $content)", "writeAttributeNS( string $prefix , string $name , string $uri , string $content)", "xmlwriter_write_attribute_ns( resource $xmlwriter , string $prefix , string $name , string $uri , string $content)", "writeAttribute( string $name , string $value)", "xmlwriter_write_attribute( resource $xmlwriter , string $name , string $value)", "writeCData( string $content)", "xmlwriter_write_cdata( resource $xmlwriter , string $content)", "writeComment( string $content)", "xmlwriter_write_comment( resource $xmlwriter , string $content)", "writeDTDAttlist( string $name , string $content)", "xmlwriter_write_dtd_attlist( resource $xmlwriter , string $name , string $content)", "writeDTDElement( string $name , string $content)", "xmlwriter_write_dtd_element( resource $xmlwriter , string $name , string $content)", "writeDTDEntity( string $name , string $content , bool $pe , string $pubid , string $sysid , string $ndataid)", "xmlwriter_write_dtd_entity( resource $xmlwriter , string $name , string $content , bool $pe , string $pubid , string $sysid , string $ndataid)", "writeDTD( string $name [, string $publicId [, string $systemId [, string $subset ]]])", "xmlwriter_write_dtd( resource $xmlwriter , string $name [, string $publicId [, string $systemId [, string $subset ]]])", "writeElementNS( string $prefix , string $name , string $uri [, string $content ])", "xmlwriter_write_element_ns( resource $xmlwriter , string $prefix , string $name , string $uri [, string $content ])", "writeElement( string $name [, string $content ])", "xmlwriter_write_element( resource $xmlwriter , string $name [, string $content ])", "writePI( string $target , string $content)", "xmlwriter_write_pi( resource $xmlwriter , string $target , string $content)", "writeRaw( string $content)", "xmlwriter_write_raw( resource $xmlwriter , string $content)", "yaml_emit_file( string $filename , mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks ]]])", "yaml_emit( mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks ]]])", "yaml_parse_file( string $filename [, int $pos = 0 [, int &$ndocs [, array $callbacks ]]])", "yaml_parse_url( string $url [, int $pos = 0 [, int &$ndocs [, array $callbacks ]]])", "yaml_parse( string $input [, int $pos = 0 [, int &$ndocs [, array $callbacks ]]])", "yaz_addinfo( resource $id)", "yaz_ccl_conf( resource $id , array $config)", "yaz_ccl_parse( resource $id , string $query , array &$result)", "yaz_close( resource $id)", "yaz_connect( string $zurl [, mixed $options ])", "yaz_database( resource $id , string $databases)", "yaz_element( resource $id , string $elementset)", "yaz_errno( resource $id)", "yaz_error( resource $id)", "yaz_es_result( resource $id)", "yaz_es( resource $id , string $type , array $args)", "yaz_get_option( resource $id , string $name)", "yaz_hits( resource $id [, array &$searchresult ])", "yaz_itemorder( resource $id , array $args)", "yaz_present( resource $id)", "yaz_range( resource $id , int $start , int $number)", "yaz_record( resource $id , int $pos , string $type)", "yaz_scan_result( resource $id [, array &$result ])", "yaz_scan( resource $id , string $type , string $startterm [, array $flags ])", "yaz_schema( resource $id , string $schema)", "yaz_search( resource $id , string $type , string $query)", "yaz_set_option( resource $id , string $name , string $value)", "yaz_set_option( resource $id , array $options)", "yaz_sort( resource $id , string $criteria)", "yaz_syntax( resource $id , string $syntax)", "yaz_wait([ array &$options ])", "yp_all( string $domain , string $map , string $callback)", "yp_cat( string $domain , string $map)", "yp_err_string( int $errorcode)", "yp_errno( void)", "yp_first( string $domain , string $map)", "yp_get_default_domain( void)", "yp_master( string $domain , string $map)", "yp_match( string $domain , string $map , string $key)", "yp_next( string $domain , string $map , string $key)", "yp_order( string $domain , string $map)", "zend_logo_guid( void)", "zend_thread_id( void)", "zend_version( void)", "zip_close( resource $zip)", "zip_entry_close( resource $zip_entry)", "zip_entry_compressedsize( resource $zip_entry)", "zip_entry_compressionmethod( resource $zip_entry)", "zip_entry_filesize( resource $zip_entry)", "zip_entry_name( resource $zip_entry)", "zip_entry_open( resource $zip , resource $zip_entry [, string $mode ])", "zip_entry_read( resource $zip_entry [, int $length = 1024 ])", "zip_open( string $filename)", "zip_read( resource $zip)", "zlib_decode( string $data [, string $max_decoded_len ])", "zlib_encode( string $data , string $encoding [, string $level = -1 ])", "zlib_get_coding_type( void)"]